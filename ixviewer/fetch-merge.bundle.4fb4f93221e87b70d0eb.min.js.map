{"version":3,"file":"fetch-merge.bundle.4fb4f93221e87b70d0eb.min.js","mappings":"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","sources":["webpack://ixviewer-2/webpack/runtime/chunk loaded","webpack://ixviewer-2/webpack/runtime/startup chunk dependencies","webpack://ixviewer-2/./src/ts/fetch-merge/index.ts","webpack://ixviewer-2/./src/ts/workers/index.ts","webpack://ixviewer-2/webpack/bootstrap","webpack://ixviewer-2/webpack/runtime/define property getters","webpack://ixviewer-2/webpack/runtime/ensure chunk","webpack://ixviewer-2/webpack/runtime/get javascript chunk filename","webpack://ixviewer-2/webpack/runtime/get mini-css chunk filename","webpack://ixviewer-2/webpack/runtime/global","webpack://ixviewer-2/webpack/runtime/hasOwnProperty shorthand","webpack://ixviewer-2/webpack/runtime/make namespace object","webpack://ixviewer-2/webpack/runtime/publicPath","webpack://ixviewer-2/webpack/runtime/importScripts chunk loading","webpack://ixviewer-2/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(783).then(next);\n};","import * as cheerio from 'cheerio';\r\nimport * as convert from 'xml-js';\r\nimport { Meta, Xbrltype, reference } from '../interface/meta';\r\nimport { Context, DeiAmendmentFlagAttributes, Instance, LinkFootnote, LinkFootnoteArc, LinkLOC, Units } from '../interface/instance';\r\nimport { Facts, SingleFact } from '../interface/fact';\r\nimport { Logger, ILogObj } from 'tslog';\r\n\r\n/* Created by staff of the U.S. Securities and Exchange Commission.\r\n * Data and content created by government employees within the scope of their employment\r\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\r\n */\r\nexport class FetchAndMerge {\r\n    private absolute: string;\r\n    private params: {\r\n        doc: string,\r\n        'doc-file': string,\r\n        hostName: string,\r\n        redline: boolean,\r\n        metalinks: string,\r\n        'metalinks-file': string,\r\n        fact: string,\r\n        summary: string,\r\n    };\r\n    private customPrefix: undefined | string;\r\n    private currentInstance;\r\n    private std_ref;\r\n    private sections;\r\n    private metaVersion;\r\n    private instance;\r\n\r\n    constructor(input: {\r\n        absolute: string,\r\n        partial: boolean,\r\n        map: boolean | Map<string, Facts>,\r\n        customPrefix: undefined | string,\r\n        params: {\r\n            doc: string,\r\n            'doc-file': string,\r\n            hostName: string,\r\n            redline: boolean,\r\n            metalinks: string,\r\n            'metalinks-file': string,\r\n        }\r\n    }) {\r\n        this.absolute = input.absolute;\r\n        this.partial = input.partial;\r\n        this.map = input.map;\r\n        this.params = input.params;\r\n        this.customPrefix = input.customPrefix;\r\n        this.instance = input.instance;\r\n        this.std_ref = input.std_ref;\r\n    }\r\n\r\n    init() {\r\n\r\n        const XHTMLandInstance = (instance, addInstance = false) => {\r\n            return Promise.all([\r\n                this.fetchXHTML(),\r\n                this.fetchInstance(),\r\n            ]).then((allResponses) => {\r\n                const errors = allResponses.filter(element => element ? Object.prototype.hasOwnProperty.call(element, 'error') : false);\r\n                if (errors.length) {\r\n                    const errorMessages = errors.map(current => current.message);\r\n                    return {\r\n                        all: { error: true, message: errorMessages }\r\n                    };\r\n                }\r\n                allResponses[0].forEach((current, index) => {\r\n                    this.currentInstance.xhtmls[index].loaded = true;\r\n                    this.currentInstance.xhtmls[index].xhtml = current.xhtml;\r\n                });\r\n                this.currentInstance.xml = (allResponses[1] as Instance);\r\n                this.mergeAllResponses(addInstance);\r\n                return {\r\n                    all: { instance: (addInstance ? instance.instance : instance), sections: this.sections, std_ref: this.std_ref }\r\n                }\r\n            })\r\n        };\r\n\r\n        const MetaandSummary = () => {\r\n            return Promise.all([\r\n                this.fetchMeta(),\r\n                this.fetchSummary(),\r\n            ]).then((allResponses) => {\r\n                this.metaVersion = allResponses[0].version;\r\n                this.std_ref = allResponses[0].std_ref;\r\n                if (allResponses[0].error) {\r\n                    return {\r\n                        all: { error: true, message: [allResponses[0].message] }\r\n                    }\r\n                } else {\r\n                    this.currentInstance = allResponses[0].instance?.filter(element => element.current)[0];\r\n\r\n                    const mapCategoryName = (input: string) => {\r\n                        const options = {\r\n                            \"Cover\": \"Cover\",\r\n                            \"document\": \"Document & Entity Information\",\r\n                            \"statement\": \"Financial Statements\",\r\n                            \"Statements\": \"Financial Statements\",\r\n                            \"disclosure\": \"Notes to the Financial Statements\",\r\n                            \"Notes\": \"Notes to Financial Statements\",\r\n                            \"Policies\": \"Accounting Policies\",\r\n                            \"Tables\": \"Notes Tables\",\r\n                            \"Details\": \"Notes Details\",\r\n                            \"RR_Summaries\": \"RR Summaries\",\r\n                            \"Prospectus\": \"Prospectus\",\r\n                            \"Fee_Exhibit\": \"RR Summaries\",\r\n                        };\r\n                        if (options[input]) {\r\n                            return options[input];\r\n                        }\r\n                        return 'INCOMPLETE SECTIONS DATA!';\r\n                    };\r\n                    const metaLinksSections = Object.values(allResponses[0].sections);\r\n                    this.sections = allResponses[1].MyReports.Report.reduce((accumulator, current) => {\r\n                        if (current && current.MenuCategory && current.Position && current.ShortName && current._attributes) {\r\n                            const fact = { name: '', contextRef: '', instance: null };\r\n                            const additional = metaLinksSections.find(element => element.shortName === current.ShortName._text);\r\n                            if (additional) {\r\n                                fact.instance = additional.instance;\r\n                                if (additional.uniqueAnchor) {\r\n                                    fact.name = additional.uniqueAnchor.name;\r\n                                    fact.contextRef = additional.uniqueAnchor.contextRef;\r\n                                } else if (additional.firstAnchors) {\r\n                                    fact.name = additional.firstAnchor.name;\r\n                                    fact.contextRef = additional.firstAnchor.contextRef;\r\n                                }\r\n                            }\r\n                            const index = accumulator.findIndex(element => element.name === mapCategoryName(current.MenuCategory._text))\r\n                            if (index !== -1) {\r\n                                accumulator[index].children.push(\r\n                                    {\r\n                                        sort: +current.Position._text,\r\n                                        name: current.ShortName._text,\r\n                                        file: current._attributes.instance,\r\n                                        fact: fact,\r\n                                    }\r\n\r\n                                );\r\n                                accumulator[index].children.sort((first, second) => {\r\n                                    if (first.sort < second.sort) {\r\n                                        return -1;\r\n                                    }\r\n                                    if (first.sort > second.sort) {\r\n                                        return 1;\r\n                                    }\r\n                                    return 0;\r\n                                });\r\n                            } else {\r\n                                accumulator.push({\r\n                                    name: mapCategoryName(current.MenuCategory._text),\r\n                                    children: [\r\n                                        {\r\n                                            sort: +current.Position._text,\r\n                                            name: current.ShortName._text,\r\n                                            file: current._attributes.instance,\r\n                                            fact: fact,\r\n                                        }\r\n                                    ]\r\n                                });\r\n\r\n                            }\r\n                        }\r\n                        return accumulator;\r\n                    }, []);\r\n                }\r\n\r\n                return Promise.all([\r\n                    XHTMLandInstance(allResponses[0], true)\r\n                ]).then(data => {\r\n                    return data[0];\r\n                })\r\n            });\r\n        };\r\n\r\n        if (this.instance !== null) {\r\n            this.currentInstance = this.instance.filter(element => element.current)[0];\r\n            return XHTMLandInstance(this.instance);\r\n        } else {\r\n            return MetaandSummary();\r\n        }\r\n    }\r\n\r\n    fetchXHTML() {\r\n        const promises = this.currentInstance.xhtmls.map((current: { url: string }) => {\r\n            return new Promise((resolve) =>\r\n                fetch(current.url, {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/xhtml+xml\"\r\n                    }\r\n                }).then((response) => {\r\n                    if (response.status >= 200 && response.status <= 299) {\r\n                        return response.text();\r\n                    } else {\r\n                        throw Error(`${response.status.toString()}, Could not find \"${this.params.doc}\"`);\r\n                    }\r\n                }).then((data) => {\r\n                    resolve({ xhtml: data });\r\n                }).catch((error) => {\r\n                    resolve({ error: true, message: error });\r\n                }));\r\n        });\r\n        return Promise.all(promises).then((allXHTML: Array<{ xhtml: string, index: number }>) => {\r\n            return allXHTML;\r\n        });\r\n    }\r\n\r\n    fetchMeta(): Promise<{\r\n        error?: boolean,\r\n        message?: string,\r\n        instance?: Array<{\r\n            current: boolean,\r\n            instance: number,\r\n            xhtmls: Array<{\r\n                slug: string,\r\n                url: string,\r\n                current: boolean,\r\n                loaded: boolean\r\n            }>,\r\n            xmlSlug: Array<string>,\r\n            xmlUrls: Array<string>,\r\n            metaInstance: Array<Instance>\r\n        }>,\r\n        meta?: Meta,\r\n        inlineFiles?: Array<{ slug: string, current: boolean, loaded: boolean }>\r\n    }> {\r\n        return new Promise((resolve) => {\r\n            return fetch(this.params.metalinks).then((response) => {\r\n                if (response.status >= 200 && response.status <= 299) {\r\n                    return response.json();\r\n                } else {\r\n                    throw Error(response.status.toString());\r\n                }\r\n            }).then((data) => {\r\n\r\n                const XHTMLSlug = this.params.doc.substr(this.params.doc.lastIndexOf('/') + 1);\r\n                const instanceKeys = Object.keys(data.instance).join().split(/[ ,]+/);\r\n                let sections = {}\r\n                if (instanceKeys.includes(XHTMLSlug)) {\r\n                    const instanceObjects = Object.keys(data.instance).map((current, index) => {\r\n\r\n                        data.instance[current].report[Object.keys(data.instance[current].report)[0]].instance = index;\r\n                        sections = Object.assign(sections, data.instance[current].report);\r\n                        const xhtmls = current.split(' ').map((element) => {\r\n                            return {\r\n                                slug: element,\r\n                                url: this.params.doc.replace(this.params['doc-file'], element),\r\n                                current: current.split(' ').includes(XHTMLSlug) && element === this.params['doc-file'],\r\n                                loaded: false\r\n                            };\r\n                        });\r\n                        const xmlSlugs = xhtmls.map(element => element.slug.replace('.htm', '_htm.xml'));\r\n                        const xmlUrls = xhtmls.map(element => this.params.metalinks.replace('MetaLinks.json', element.slug.replace('.htm', '_htm.xml')));\r\n                        return {\r\n                            instance: index,\r\n                            xhtmls: xhtmls,\r\n                            current: current.split(' ').includes(XHTMLSlug),\r\n                            xmlSlug: xmlSlugs,\r\n                            xmlUrls: xmlUrls,\r\n                            metaInstance: Object.assign(data.instance[current]),\r\n                            map: new Map()\r\n                        }\r\n                    });\r\n                    delete data.instance;\r\n                    resolve({ instance: instanceObjects, ...data, sections, version: data.version });\r\n                } else {\r\n                    throw Error('Incorrect MetaLinks.json Instance');\r\n                }\r\n                resolve(data);\r\n            }).catch((error) => resolve({ error: true, message: `${error}, Could not find \"${this.params.metalinks}\"` }))\r\n        });\r\n    }\r\n\r\n    fetchSummary() {\r\n        return new Promise((resolve) => {\r\n            return fetch(this.params.summary).then((response) => {\r\n                if (response.status >= 200 && response.status <= 299) {\r\n                    return response.text();\r\n                } else {\r\n                    throw Error(response.status.toString());\r\n                }\r\n            }).then((data) => {\r\n                resolve(JSON.parse(convert.xml2json(data as unknown as string, { compact: true })).FilingSummary)\r\n            }).catch((error) => resolve({ error: true, message: `${error}, Could not find \"${this.params.summary}\"` }))\r\n        });\r\n    }\r\n\r\n    fetchInstance() {\r\n        const promises = this.currentInstance.xmlUrls.map((current) => {\r\n            return new Promise((resolve) =>\r\n                fetch(current).then((response) => {\r\n                    if (response.status >= 200 && response.status <= 299) {\r\n                        return response.text();\r\n                    } else {\r\n                        throw Error(`${response.status.toString()}, Could not find XML Instance Document`);\r\n                    }\r\n                }).then((data) => {\r\n                    resolve({ instance: data });\r\n                }).catch((error) => {\r\n                    resolve({ error: true, message: error });\r\n                }));\r\n        });\r\n        return Promise.all(promises).then((xmlInstances) => {\r\n            const instance = xmlInstances.filter(element => element.instance);\r\n            if (instance && instance[0]) {\r\n                return JSON.parse(convert.xml2json(instance[0].instance as unknown as string, { compact: true }))\r\n            } else {\r\n                return instance[0];\r\n            }\r\n        });\r\n    }\r\n\r\n    mergeAllResponses(\r\n        includeSections: boolean\r\n    ) {\r\n        this.currentInstance.map = this.buildInitialMap(this.currentInstance.xml);\r\n        if (includeSections) {\r\n            this.sections = this.extractSections();\r\n        }\r\n        this.currentInstance.formInformation = this.extractFormInformation(this.currentInstance.metaInstance);\r\n        this.mergeMapandMeta();\r\n        this.customPrefix = this.currentInstance.metaInstance.nsprefix;\r\n        this.prepareXHTML();\r\n        return;\r\n\r\n    }\r\n\r\n    buildInitialMap(instance: Instance) {\r\n        const context = instance.xbrl.context;\r\n        const unit = instance.xbrl.unit;\r\n        const footnote = instance.xbrl['link:footnoteLink'];\r\n        delete instance.xbrl.context;\r\n        delete instance.xbrl.unit;\r\n        delete instance.xbrl._attributes;\r\n        delete instance.xbrl['link:schemaRef'];\r\n        delete instance.xbrl['link:footnoteLink'];\r\n        this.setPeriodText(context);\r\n        this.setSegmentData(context);\r\n        this.setMeasureText(unit);\r\n        const map = new Map();\r\n        let factCounter = 0;\r\n        for (const key in instance.xbrl) {\r\n            if (Array.isArray(instance.xbrl[key])) {\r\n                instance.xbrl[key].forEach((current: { _attributes: DeiAmendmentFlagAttributes; _text: string; }) => {\r\n                    const attributes = { ...current._attributes };\r\n                    const id = attributes.id ? attributes.id : `fact-identifier-${factCounter}`;\r\n                    delete attributes.id;\r\n                    map.set(id, {\r\n                        ...attributes,\r\n                        name: key,\r\n                        ix: id,\r\n                        id: `fact-identifier-${factCounter++}`,\r\n                        value: this.isFactHTML(current._text) ? this.updateValueToRemoveIDs(current._text) : current._text,\r\n                        isAmountsOnly: this.isFactAmountsOnly(current._text),\r\n                        isTextOnly: !this.isFactAmountsOnly(current._text),\r\n                        isNegativeOnly: this.isFactNegativeOnly(current._text),\r\n                        isHTML: this.isFactHTML(current._text),\r\n                        period: this.setPeriodInfo(attributes.contextRef, context),\r\n                        segment: this.setSegmentInfo(attributes.contextRef, context),\r\n                        measure: this.setMeasureInfo(attributes.unitRef, unit),\r\n                        scale: this.setScaleInfo(attributes.scale),\r\n                        decimals: this.setDecimalsInfo(attributes.decimals),\r\n                        sign: this.setSignInfo(attributes.sign),\r\n                        footnote: this.setFootnoteInfo(id, footnote),\r\n                        isEnabled: true,\r\n                        isHighlight: false,\r\n                        isSelected: false,\r\n                        filter: {\r\n                            content: this.getTextFromHTML(current._text),\r\n                        },\r\n                    });\r\n                });\r\n            } else {\r\n                const attributes = { ...instance.xbrl[key]._attributes };\r\n                const id = attributes.id ? attributes.id : `fact-identifier-${factCounter}`;\r\n                delete attributes.id;\r\n\r\n                map.set(id, {\r\n                    ...attributes,\r\n                    name: key,\r\n                    ix: id,\r\n                    id: `fact-identifier-${factCounter++}`,\r\n                    value: this.isFactHTML(instance.xbrl[key]._text) ? this.updateValueToRemoveIDs(instance.xbrl[key]._text) : instance.xbrl[key]._text,\r\n                    isAmountsOnly: this.isFactAmountsOnly(instance.xbrl[key]._text),\r\n                    isTextOnly: !this.isFactAmountsOnly(instance.xbrl[key]._text),\r\n                    isNegativeOnly: this.isFactNegativeOnly(instance.xbrl[key]._text),\r\n                    isHTML: this.isFactHTML(instance.xbrl[key]._text),\r\n                    period: this.setPeriodInfo(attributes.contextRef, context),\r\n                    segment: this.setSegmentInfo(attributes.contextRef, context),\r\n                    measure: this.setMeasureInfo(attributes.unitRef, unit),\r\n                    scale: this.setScaleInfo(attributes.scale),\r\n                    decimals: this.setDecimalsInfo(attributes.decimals),\r\n                    sign: this.setSignInfo(attributes.sign),\r\n                    footnote: this.setFootnoteInfo(id, footnote),\r\n                    isEnabled: true,\r\n                    isHighlight: false,\r\n                    isSelected: false,\r\n                    filter: {\r\n                        content: this.getTextFromHTML(instance.xbrl[key]._text),\r\n                    },\r\n                });\r\n            }\r\n        }\r\n        return map;\r\n    }\r\n\r\n    extractSections() {\r\n        return Object.keys(this.sections).map((current) => {\r\n            if (this.metaVersion >= '2.2') {\r\n                if (this.sections[current].menuCat) {\r\n                    this.sections[current].groupType = this.sections[current].menuCat;\r\n                }\r\n                return this.sections[current];\r\n            }\r\n            return this.sections[current];\r\n        });\r\n    }\r\n\r\n    extractFormInformation(meta: Meta) {\r\n        const metaCopy = Object.assign({}, meta);\r\n        delete metaCopy.report;\r\n        delete metaCopy.tag;\r\n        return metaCopy;\r\n    }\r\n\r\n    mergeMapandMeta() {\r\n\r\n        this.currentInstance.map.forEach((currentValue: {\r\n            name: string;\r\n            segment: [{ dimension: string, axis: string }];\r\n            references: reference[];\r\n            calculations: [{ label: string, value: string }];\r\n            labels: string[];\r\n            filter: { labels: string; definitions: string; };\r\n            balance: string;\r\n            xbrltype: Xbrltype | null;\r\n            localname: string | null;\r\n            nsuri: string | null;\r\n            presentation: string[] | null | undefined;\r\n        }) => {\r\n            if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')]) {\r\n                // add references (if any) to each individual fact\r\n                // including references via any dimension [name]\r\n                // including references via any member [name]\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].auth_ref) {\r\n\r\n                    let references = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].auth_ref.map((current) => {\r\n                        return current;\r\n                    });\r\n\r\n                    if (currentValue.segment) {\r\n\r\n                        const dimensions = currentValue.segment.map((element: { dimension: string; }) => {\r\n                            if (element.dimension && this.currentInstance.metaInstance.tag[element.dimension.replace(':', '_')]) {\r\n                                return this.currentInstance.metaInstance.tag[element.dimension.replace(':', '_')].auth_ref ? this.currentInstance.metaInstance.tag[element.dimension.replace(':', '_')].auth_ref : null;\r\n                            }\r\n                        }).filter(Boolean)[0];\r\n\r\n                        const axis = currentValue.segment.map((element: { dimension: string; axis: string; }) => {\r\n                            if (element.dimension && this.currentInstance.metaInstance.tag[element.axis.replace(':', '_')]) {\r\n                                return this.currentInstance.metaInstance.tag[element.axis.replace(':', '_')].auth_ref ? this.currentInstance.metaInstance.tag[element.axis.replace(':', '_')].auth_ref : null;\r\n                            }\r\n                        }).filter(Boolean)[0];\r\n\r\n                        references = references.concat(dimensions).concat(axis);\r\n                    }\r\n\r\n                    currentValue.references = [...new Set(references)].map((current) => {\r\n                        return this.std_ref[current];\r\n                    });\r\n                }\r\n\r\n                // add calculations (if any) to each individual fact\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].calculation) {\r\n                    const tempCalculation = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].calculation;\r\n                    currentValue.calculations = [];\r\n                    for (const property in tempCalculation) {\r\n                        const result = this.sections.map(element => {\r\n                            if (element.role === property) {\r\n                                return [\r\n                                    {\r\n                                        label: 'Section',\r\n                                        value: element.longName\r\n                                    },\r\n                                    {\r\n                                        label: 'Weight',\r\n                                        value: this.getCalculationWeight(tempCalculation[property].weight)\r\n                                    },\r\n                                    {\r\n                                        'label': 'Parent',\r\n                                        value: this.getCalculationParent(tempCalculation[property].parentTag)\r\n                                    }\r\n                                ];\r\n                            }\r\n                        }).filter(Boolean);\r\n                        currentValue.calculations = currentValue.calculations.concat(result);\r\n                    }\r\n                } else {\r\n                    currentValue.calculations = [];\r\n                }\r\n\r\n                // add labels (if any) to each individual fact\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].lang) {\r\n                    currentValue.labels = Object.keys(this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].lang).map((current) => {\r\n                        const oldObject = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].lang[current].role;\r\n                        const newObject = {};\r\n                        for (const property in oldObject) {\r\n\r\n                            const result = property.replace(/([A-Z])/g, ' $1');\r\n                            const finalResult = result.charAt(0).toUpperCase() + result.slice(1);\r\n                            Object.assign(newObject, { [finalResult]: oldObject[property] });\r\n                        }\r\n                        return newObject\r\n                    });\r\n\r\n                    currentValue.filter.labels = currentValue.labels.reduce((accumulator: string, current) => {\r\n                        const tempCurrent = { ...current };\r\n                        delete tempCurrent.documentation;\r\n                        return `${accumulator} ${Object.values(tempCurrent).join(' ')}`;\r\n\r\n                    }, '');\r\n\r\n                    currentValue.filter.definitions = currentValue.labels.reduce((accumulator, current: { Documentation: string; }) => {\r\n                        return `${accumulator} ${current.Documentation}`;\r\n                    }, '');\r\n                }\r\n\r\n                // add credit / debit\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].crdr) {\r\n                    const balance = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].crdr;\r\n                    currentValue.balance = `${balance.charAt(0).toUpperCase()}${balance.slice(1)}`;\r\n                }\r\n\r\n                // add xbrltype\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype) {\r\n                    currentValue.xbrltype = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype;\r\n                }\r\n\r\n                // add additional info to each individual fact\r\n                currentValue.localname = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].localname ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].localname : null;\r\n                currentValue.nsuri = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].nsuri ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].nsuri : null;\r\n                currentValue.presentation = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].presentation ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].presentation : null;\r\n                currentValue.xbrltype = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype : null;\r\n            }\r\n        });\r\n        // return map;\r\n    }\r\n\r\n    prepareXHTML() {\r\n        this.currentInstance.xhtmls.forEach((current) => {\r\n            if (current.xhtml) {\r\n                let $ = cheerio.load(current.xhtml, {});\r\n                $ = this.fixImages($);\r\n                $ = this.hiddenFacts($);\r\n                $ = this.redLineFacts($);\r\n                $ = this.excludeFacts($);\r\n                const updates = this.attributeFacts($, this.currentInstance.map, current.slug);\r\n                current.xhtml = updates.xhtml;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    fixImages($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        const foundImagesArray = Array.from($('img'));\r\n        foundImagesArray.forEach((current) => {\r\n            if (!$(current).attr('src')?.startsWith('data:')) {\r\n                const imageSlug = $(current).attr('src')?.substr($(current).attr('src')!.lastIndexOf('/') + 1);\r\n                $(current).attr('src', `${this.absolute}${imageSlug}`);\r\n                $(current).attr('loading', 'lazy');\r\n            }\r\n        });\r\n        const endPerformance = performance.now();\r\n        if (!PRODUCTION) {\r\n            const items = foundImagesArray.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`\\nFetchAndMerge.fixImages() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    hiddenFacts($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        const foundElements = Array.from($('[style*=\"-ix-hidden\"]')).slice(0, 1000);\r\n        foundElements.forEach((current) => {\r\n            const updatedStyle = Object.values($(current).css([\"-sec-ix-hidden\", \"-esef-ix-hidden\"]) as {}).filter(Boolean)[0];\r\n            const hiddenElement = $(`#${updatedStyle}`);\r\n            if ($(hiddenElement).length) {\r\n                // we now create an entirely new element based on the innerHTML\r\n                // of current, and the attributes of hiddenElement\r\n                const cheerioElement = $(`<${$(hiddenElement).prop('tagName')?.toLowerCase().replace(`:`, `\\\\:`)}>`);\r\n                for (const key in $(hiddenElement).attr()) {\r\n                    $(cheerioElement).attr(key, $(hiddenElement).attr(key));\r\n                }\r\n                $(cheerioElement).attr('isadditionalitemsonly', 'true');\r\n                $(cheerioElement).attr('ishiddenelement', 'true');\r\n                $(cheerioElement).html($(current).text());\r\n                $(hiddenElement).removeAttr('id');\r\n                $(hiddenElement).removeAttr('contextref');\r\n                $(hiddenElement).removeAttr('name');\r\n            }\r\n        });\r\n        const endPerformance = performance.now();\r\n        if (!PRODUCTION) {\r\n            const items = foundElements.length\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`\\nFetchAndMerge.hiddenFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    redLineFacts($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        const foundElements = Array.from($('[style*=\"-ix-redline\"]'));\r\n        if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\r\n            if (!PRODUCTION) {\r\n                const log: Logger<ILogObj> = new Logger();\r\n                log.debug(`\\nRedline Found: ${foundElements.length}`);\r\n            }\r\n            foundElements.forEach((current) => {\r\n                const updatedStyle = Object.values($(current).css([\"-sec-ix-redline\", \"-esef-ix-redline\"]) as {}).filter(Boolean)[0];\r\n                if (updatedStyle === \"true\") {\r\n                    $(current).attr(\"redline\", 'true');\r\n                }\r\n            });\r\n        }\r\n        const endPerformance = performance.now();\r\n        if (!PRODUCTION) {\r\n            const items = foundElements.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`\\nFetchAndMerge.redLineFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    excludeFacts($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        const foundElements = Array.from($('[style*=\":exclude\"]'));\r\n        foundElements.forEach((current) => {\r\n            $(current).addClass('no-hover');\r\n        });\r\n        const endPerformance = performance.now();\r\n        if (!PRODUCTION) {\r\n            const items = foundElements.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`\\nFetchAndMerge.excludeFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    attributeFacts($: cheerio.CheerioAPI, map: Map<string, SingleFact>, currentSlug: string) {\r\n        const startPerformance = performance.now();\r\n\r\n        const foundElements = Array.from($(`[contextRef]`));\r\n\r\n        foundElements.forEach((current) => {\r\n            $(current).attr(\"selected-fact\", 'false');\r\n            $(current).attr(\"hover-fact\", 'false');\r\n            $(current).attr(\"continued-fact\", 'false');\r\n            $(current).closest('table').length ? $(current).attr(\"inside-table\", 'true') : $(current).attr(\"inside-table\", 'false');\r\n\r\n            if ($(current).attr('contextref') && $(current).attr('id')) {\r\n\r\n                $(current).attr('ix', $(current).attr('id'));\r\n                $(current).attr('id', this.updateMap($(current)?.attr('ix') as string, $(current), currentSlug));\r\n            }\r\n            if (!$(current).prop('tagName').toLowerCase().endsWith(\"continuation\") &&\r\n                $(current).attr(\"continuedat\")\r\n            ) {\r\n                $(current).attr(\"continued-main-fact\", 'true');\r\n            }\r\n\r\n            if ($(current).attr('contextref') && !$(current).attr('id')) {\r\n                // for the facts in the html that have no ids...\r\n                const getByNameAndContextRef = (searchContextref: string | undefined, searchName: string | undefined) => {\r\n                    for (const [key, value] of this.currentInstance.map.entries()) {\r\n                        if (value.contextRef === searchContextref && value.name === searchName) {\r\n                            return key;\r\n                        }\r\n                    }\r\n                };\r\n                const mapKey = getByNameAndContextRef($(current).attr('contextref'), $(current).attr('name'));\r\n                if (mapKey) {\r\n\r\n                    $(current).attr('ix', mapKey);\r\n                    $(current).attr('id', mapKey);\r\n                    this.updateMap($(current)?.attr('ix') as string, $(current), currentSlug);\r\n                } else {\r\n                    const log: Logger<ILogObj> = new Logger();\r\n                    log.error(`Fact [name] && [contextRef] could not be located in the Map Object.`);\r\n                }\r\n            }\r\n            $(current).wrap(`<span></span>`);\r\n        });\r\n        // TODO is this a good idea?\r\n        // $(`${namespace}\\\\:header`).remove();\r\n        const endPerformance = performance.now();\r\n        if (!PRODUCTION) {\r\n            const items = foundElements.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`\\nFetchAndMerge.attributeFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n\r\n        return { xhtml: $.html(), map };\r\n    }\r\n\r\n    updateMap(ix: string, element: cheerio.Cheerio<cheerio.Element>, currentSlug: string) {\r\n        this.currentInstance.map.set(\r\n            ix,\r\n            {\r\n                ...this.currentInstance.map.get(ix),\r\n                raw: element.text(),\r\n                format: element.attr('format') ? element.attr('format') : null,\r\n                isAdditional: element.parents().prop('tagName').toLowerCase().endsWith(':hidden'),\r\n                isCustom: (element.attr('name')?.split(':')[0].toLowerCase() === this.customPrefix),\r\n                isAmountsOnly: element.prop('tagName')?.split(':')[1].toLowerCase() === 'nonfraction',\r\n                isTextOnly: element.prop('tagName')?.split(':')[1].toLowerCase() === 'nonnumeric',\r\n                isNegativeOnly: element.attr('sign') === '-',\r\n                file: currentSlug,\r\n                scale: element.attr('scale') ? this.setScaleInfo(element.attr('scale') as unknown as number) : null,\r\n                continuedIDs: []\r\n            });\r\n\r\n        return this.currentInstance.map.get(ix).id;\r\n    }\r\n\r\n    updateValueToRemoveIDs(input: string) {\r\n        const $ = cheerio.load(input, { xml: false });\r\n        $('[id]').each(function () {\r\n            $(this).removeAttr('id');\r\n        });\r\n        // we also wrap the entirity of the html in a simple div\r\n        $('body ').wrapInner('<div></div>');\r\n        return $.html('body');\r\n    }\r\n\r\n    isFactAmountsOnly(input: string) {\r\n        return /^-?\\d+\\d*$/.test(input);\r\n    }\r\n\r\n    isFactNegativeOnly(input: string) {\r\n        return this.isFactAmountsOnly(input) && input.startsWith('-');\r\n    }\r\n\r\n    isFactHTML(input: string) {\r\n        return /<\\/?[a-z][\\s\\S]*>/i.test(input);\r\n    }\r\n\r\n    getTextFromHTML(input: string) {\r\n        if (this.isFactHTML(input)) {\r\n            const $ = cheerio.load(input);\r\n            return $.text();\r\n        }\r\n        return input;\r\n    }\r\n\r\n    setPeriodText(context: Context[]) {\r\n        context = Array.isArray(context) ? context : [context];\r\n        context?.forEach((current) => {\r\n            if (current.period) {\r\n                if (current.period.instant) {\r\n                    const date = new Date(current.period.instant._text);\r\n                    current.period._text = `As of ${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\r\n\r\n                } else if (current.period.startDate && current.period.endDate) {\r\n                    const startDate = new Date(current.period.startDate._text);\r\n                    const endDate = new Date(current.period.endDate._text);\r\n\r\n                    const yearDiff = endDate.getFullYear() - startDate.getFullYear();\r\n                    const monthDiff = endDate.getMonth() - startDate.getMonth() + (yearDiff * 12);\r\n                    if (monthDiff <= 0) {\r\n                        current.period._text = `${startDate.getMonth() + 1}/${startDate.getDate()}/${startDate.getFullYear()} - ${endDate.getMonth() + 1}/${endDate.getDate()}/${endDate.getFullYear()}`;\r\n                    } else {\r\n                        current.period._text = `${monthDiff} months ending ${endDate.getMonth() + 1}/${endDate.getDate()}/${endDate.getFullYear()}`;\r\n                    }\r\n                } else {\r\n                    const log: Logger<ILogObj> = new Logger();\r\n                    log.error(`\\nFact Period is NEITHER Instant or Start / End`);\r\n                }\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    setPeriodInfo(contextRef: string, context: [Context]) {\r\n        // we go through and find the 'id' in context that equals contextRef \r\n        context = Array.isArray(context) ? context : [context];\r\n        const factContext = context?.find((element) => {\r\n            return element._attributes.id === contextRef;\r\n        });\r\n        if (factContext && factContext.period) {\r\n            return factContext.period._text;\r\n        }\r\n    }\r\n\r\n    setSegmentData(context: Context | undefined) {\r\n        context = Array.isArray(context) ? context : [context];\r\n        context.forEach((current) => {\r\n            if (current.entity && current.entity.segment) {\r\n                current.entity.segment.data = Object.keys(current.entity.segment).map((key) => {\r\n                    if (Array.isArray(current.entity.segment[key])) {\r\n                        return current.entity.segment[key].map((segment: { _attributes: { dimension: string; }; _text: string; }) => {\r\n                            return {\r\n                                axis: segment._attributes.dimension,\r\n                                dimension: segment._text,\r\n                                type: key.endsWith('explicitMember') ? 'explicit' : 'implicit'\r\n                            }\r\n                        });\r\n                    } else {\r\n                        return {\r\n                            axis: current.entity.segment[key]._attributes.dimension,\r\n                            dimension: current.entity.segment[key]._text ?\r\n                                current.entity.segment[key]._text :\r\n                                current.entity.segment[key][Object.keys(current.entity.segment[key]).filter(element => !element.startsWith('_'))[0]]?._text,\r\n                            type: key.endsWith('explicitMember') ?\r\n                                'explicit' :\r\n                                'implicit',\r\n                            value: !key.endsWith('explicitMember') ?\r\n                                current.entity.segment[key][Object.keys(current.entity.segment[key])[1]]._text :\r\n                                null\r\n                        };\r\n                    }\r\n                });\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    setSegmentInfo(contextRef: string, context: [Context]) {\r\n        context = Array.isArray(context) ? context : [context];\r\n        const factContext = context?.find((element) => {\r\n            return element._attributes.id === contextRef;\r\n        });\r\n        if (factContext && factContext.entity && factContext.entity.segment) {\r\n            return factContext.entity.segment.data;\r\n        }\r\n    }\r\n\r\n    setMeasureText(unit: Units[] | undefined) {\r\n        unit = Array.isArray(unit) ? unit : [unit];\r\n        unit.forEach((current: { measure: { _text: string; }; _text: string; divide: { unitNumerator: { measure: { _text: string; }; }; unitDenominator: { measure: { _text: string; }; }; }; }) => {\r\n            if (current && current.measure) {\r\n                const measure = current.measure._text.includes(':') ?\r\n                    current.measure._text.split(':')[1].toUpperCase() :\r\n                    current.measure._text.toUpperCase();\r\n                current._text = measure;\r\n\r\n            } else if (current && current.divide) {\r\n                const numerator = current.divide.unitNumerator.measure._text.includes(':') ?\r\n                    current.divide.unitNumerator.measure._text.split(':')[1].toUpperCase() :\r\n                    current.divide.unitNumerator.measure._text.toUpperCase();\r\n\r\n                const denominator = current.divide.unitDenominator.measure._text.includes(':') ?\r\n                    current.divide.unitDenominator.measure._text.split(':')[1].toUpperCase() :\r\n                    current.divide.unitDenominator.measure._text.toUpperCase();\r\n\r\n                current._text = `${numerator} / ${denominator}`;\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    setMeasureInfo(unitRef: string, unit: Units) {\r\n        if (unit) {\r\n            const factUnit = Array.isArray(unit) ? unit.find((element: { _attributes: { id: string; }; }) => {\r\n                return element._attributes.id === unitRef;\r\n            }) : [unit].find((element: { _attributes: { id: string; }; }) => {\r\n                return element._attributes.id === unitRef;\r\n            });\r\n\r\n            if (\r\n                factUnit &&\r\n                (Object.prototype.hasOwnProperty.call(factUnit, 'measure') || Object.prototype.hasOwnProperty.call(factUnit, 'divide'))\r\n            ) {\r\n                return factUnit._text;\r\n            }\r\n        }\r\n    }\r\n\r\n    setScaleInfo(scale: number) {\r\n        if (scale) {\r\n            const scaleOptions = {\r\n                0: \"Zero\",\r\n                1: \"Tens\",\r\n                2: \"Hundreds\",\r\n                3: \"Thousands\",\r\n                4: \"Ten thousands\",\r\n                5: \"Hundred thousands\",\r\n                6: \"Millions\",\r\n                7: \"Ten Millions\",\r\n                8: \"Hundred Millions\",\r\n                9: \"Billions\",\r\n                10: \"Ten Billions\",\r\n                11: \"Hundred Billions\",\r\n                12: \"Trillions\",\r\n                \"-1\": \"Tenths\",\r\n                \"-2\": \"Hundredths\",\r\n                \"-3\": \"Thousandths\",\r\n                \"-4\": \"Ten Thousandths\",\r\n                \"-5\": \"Hundred Thousandths\",\r\n                \"-6\": \"Millionths\"\r\n            };\r\n            return scaleOptions[scale];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setDecimalsInfo(decimals: string) {\r\n        if (decimals) {\r\n            const decimalsOptions = {\r\n                \"-1\": \"Tens\",\r\n                \"-2\": \"Hundreds\",\r\n                \"-3\": \"Thousands\",\r\n                \"-4\": \"Ten thousands\",\r\n                \"-5\": \"Hundred thousands\",\r\n                \"-6\": \"Millions\",\r\n                \"-7\": \"Ten Millions\",\r\n                \"-8\": \"Hundred Millions\",\r\n                \"-9\": \"Billions\",\r\n                \"-10\": \"Ten Billions\",\r\n                \"-11\": \"Hundred Billions\",\r\n                \"-12\": \"Trillions\",\r\n                1: \"Tenths\",\r\n                2: \"Hundredths\",\r\n                3: \"Thousandths\",\r\n                4: \"Ten Thousandths\",\r\n                5: \"Hundred Thousandths\",\r\n                6: \"Millionths\"\r\n            };\r\n            return decimalsOptions[decimals];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setSignInfo(sign: string) {\r\n        if (sign) {\r\n            const signOptions = {\r\n                '-': 'Negative',\r\n                '+': 'Positive'\r\n            };\r\n            return signOptions[sign];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setFootnoteInfo(id: string, footnotes: {\r\n        \"link:loc\": LinkLOC[],\r\n        \"link:footnote\": LinkFootnote[];\r\n        \"link:footnoteArc\": LinkFootnoteArc[];\r\n    }) {\r\n        if (footnotes && footnotes['link:footnoteArc']) {\r\n            const factFootnote = Array.isArray(footnotes['link:footnoteArc']) ? footnotes['link:footnoteArc'].find((element) => {\r\n                return element._attributes['xlink:from'] === id;\r\n            }) : [footnotes['link:footnoteArc']].find((element) => {\r\n                return element._attributes['xlink:from'] === id;\r\n            });\r\n            if (factFootnote) {\r\n                if (footnotes['link:footnote']) {\r\n                    if (Array.isArray(footnotes['link:footnote'])) {\r\n\r\n                        const actualFootnote = footnotes['link:footnote']?.find((element) => {\r\n                            return element._attributes.id === factFootnote._attributes['xlink:to'];\r\n                        });\r\n                        return actualFootnote?._text;\r\n                    } else {\r\n                        // TODO we need way more cases\r\n                        return footnotes['link:footnote']._text.join('');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getCalculationWeight(weight: number) {\r\n        if (weight) {\r\n            return weight > 0 ?\r\n                `Added to parent(${weight.toFixed(2)})` :\r\n                `Substracted from parent(${weight.toFixed(2)})`\r\n        }\r\n        return 'Not Available.';\r\n    }\r\n\r\n    getCalculationParent(parent: string) {\r\n        if (parent) {\r\n            return parent.replace('_', ':');\r\n        }\r\n        return 'Not Available.';\r\n    }\r\n}","/* Created by staff of the U.S. Securities and Exchange Commission.\r\n * Data and content created by government employees within the scope of their employment\r\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\r\n */\r\n\r\nimport { FetchAndMerge } from '../fetch-merge';\r\n\r\nself.onmessage = ({ data }) => {\r\n    const fetchAndMerge = new FetchAndMerge(data);\r\n    fetchAndMerge.init().then(data => {\r\n        self.postMessage(data);\r\n    });\r\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [783], () => (__webpack_require__(7588)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.\" + \"0324a6e294b9fe34ba88\" + \".min.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t549: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkixviewer_2\"] = self[\"webpackChunkixviewer_2\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","input","this","absolute","partial","map","params","customPrefix","instance","std_ref","init","XHTMLandInstance","addInstance","Promise","all","fetchXHTML","fetchInstance","then","allResponses","errors","filter","element","Object","prototype","hasOwnProperty","call","length","error","message","current","forEach","index","currentInstance","xhtmls","loaded","xhtml","xml","mergeAllResponses","sections","fetchMeta","fetchSummary","metaVersion","version","options","values","MyReports","Report","reduce","accumulator","MenuCategory","Position","ShortName","_attributes","fact","name","contextRef","additional","find","shortName","_text","uniqueAnchor","firstAnchors","firstAnchor","findIndex","children","push","sort","file","first","second","data","promises","resolve","fetch","url","headers","response","status","text","Error","toString","doc","catch","allXHTML","metalinks","json","XHTMLSlug","substr","lastIndexOf","instanceKeys","keys","join","split","includes","instanceObjects","report","assign","slug","replace","xmlSlugs","xmlUrls","xmlSlug","metaInstance","Map","summary","JSON","parse","compact","FilingSummary","xmlInstances","includeSections","buildInitialMap","extractSections","formInformation","extractFormInformation","mergeMapandMeta","nsprefix","prepareXHTML","context","xbrl","unit","footnote","setPeriodText","setSegmentData","setMeasureText","factCounter","key","Array","isArray","attributes","id","set","ix","value","isFactHTML","updateValueToRemoveIDs","isAmountsOnly","isFactAmountsOnly","isTextOnly","isNegativeOnly","isFactNegativeOnly","isHTML","period","setPeriodInfo","segment","setSegmentInfo","measure","setMeasureInfo","unitRef","scale","setScaleInfo","decimals","setDecimalsInfo","sign","setSignInfo","setFootnoteInfo","isEnabled","isHighlight","isSelected","content","getTextFromHTML","menuCat","groupType","meta","metaCopy","tag","currentValue","auth_ref","references","dimensions","dimension","Boolean","axis","concat","Set","calculation","calculations","property","result","role","label","longName","getCalculationWeight","weight","getCalculationParent","parentTag","lang","labels","oldObject","newObject","finalResult","charAt","toUpperCase","slice","tempCurrent","documentation","definitions","Documentation","crdr","balance","xbrltype","localname","nsuri","presentation","$","fixImages","hiddenFacts","redLineFacts","excludeFacts","updates","attributeFacts","performance","now","from","attr","startsWith","imageSlug","updatedStyle","css","hiddenElement","cheerioElement","prop","toLowerCase","html","removeAttr","foundElements","redline","addClass","currentSlug","closest","updateMap","endsWith","mapKey","searchContextref","searchName","entries","getByNameAndContextRef","wrap","get","raw","format","isAdditional","parents","isCustom","continuedIDs","each","wrapInner","test","instant","date","Date","getMonth","getDate","getFullYear","startDate","endDate","yearDiff","monthDiff","factContext","entity","type","divide","numerator","unitNumerator","denominator","unitDenominator","factUnit","footnotes","actualFootnote","toFixed","parent","self","onmessage","FetchAndMerge","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","r","d","definition","o","defineProperty","enumerable","f","e","chunkId","u","miniCssF","g","globalThis","Function","window","obj","Symbol","toStringTag","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","p","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop"],"sourceRoot":""}