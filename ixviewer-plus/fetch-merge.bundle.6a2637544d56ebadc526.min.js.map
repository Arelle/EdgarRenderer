{"version":3,"file":"fetch-merge.bundle.6a2637544d56ebadc526.min.js","mappings":"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","sources":["webpack://ixviewer-2/webpack/runtime/chunk loaded","webpack://ixviewer-2/webpack/runtime/startup chunk dependencies","webpack://ixviewer-2/./src/ts/constants/constants.ts","webpack://ixviewer-2/./src/ts/fetch-merge/merge-data-utils.ts","webpack://ixviewer-2/./src/ts/fetch-merge/fetch-merge.ts","webpack://ixviewer-2/./src/ts/helpers/utils.ts","webpack://ixviewer-2/./src/ts/workers/workers.ts","webpack://ixviewer-2/webpack/bootstrap","webpack://ixviewer-2/webpack/runtime/compat get default export","webpack://ixviewer-2/webpack/runtime/define property getters","webpack://ixviewer-2/webpack/runtime/ensure chunk","webpack://ixviewer-2/webpack/runtime/get javascript chunk filename","webpack://ixviewer-2/webpack/runtime/get mini-css chunk filename","webpack://ixviewer-2/webpack/runtime/hasOwnProperty shorthand","webpack://ixviewer-2/webpack/runtime/make namespace object","webpack://ixviewer-2/webpack/runtime/publicPath","webpack://ixviewer-2/webpack/runtime/importScripts chunk loading","webpack://ixviewer-2/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(397).then(next);\n};","/* Created by staff of the U.S. Securities and Exchange Commission.\n * Data and content created by government employees within the scope of their employment\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\n */\n\nimport { Reference, SingleFact } from \"../interface/fact\";\nimport { FormInformation } from \"../interface/form-information\";\nimport { InlineFileMeta, InstanceFile } from \"../interface/instance-file\";\nimport { Meta } from \"../interface/meta\";\nimport { Section } from \"../interface/meta\";\n\n\n//Not really used (see comment below)\ntype MetaDocument = any;\n\n\n\nexport const Constants =\n{\n\tversion: \"24.2\",\n\tfeatureSet: \"plus\",\n\n\tscrollPosition: typeof window !== 'undefined' && window.localStorage.getItem(\"scrollPosition\") || \"start\",\n\n\thoverOption: typeof window !== 'undefined' && window.localStorage.getItem(\"hoverOption\") === \"true\" || false,\n\n\tgetHTMLAttributes: {} as Record<any, unknown>,\n\n\tgetPaginationPerPage: 10,\n\n\tgetHtmlOverallFactsCount: null as string | null,\n\n\tgetMetaSourceDocuments: [] as string[],\n\n\tgetMetaTags: [] as unknown[],\n\n\tgetInstanceFiles: [] as InstanceFile[],\n\n\tgetInlineFiles: [] as InlineFileMeta[],\n\n\tsections: [] as Section[],\n\n\tsetSections: (sections: Array<Section>): void => {\n\t\tif (sections) {\n\t\t\tConstants.sections = sections;\n\t\t\tsessionStorage.setItem('sections', JSON.stringify(sections));\n\t\t}\n\t},\n\n\tgetSectionsFromSessionStorage: (): Section[] => {\n\t\tconst sectionsFromLocal = sessionStorage.getItem('sections');\n\t\treturn JSON.parse(sectionsFromLocal || '[]') as Section[];\n\t},\n\n\tgetStdRef: {} as Record<string, Reference>,\n\n\tgetFormInformation: {} as FormInformation,\n\n\tgetMetaCustomPrefix: null as string | null,\n\n\t//These are never accessed outside of old unit tests\n\tgetMetaDts: null as MetaDocument | null,\n\tgetMetaDocuments: (input: string): MetaDocument | null => {\n\t\tif (input && typeof input === \"string\") {\n\t\t\treturn Constants.getMetaDts && Constants.getMetaDts[input]\n\t\t\t\t? Constants.getMetaDts[input]\n\t\t\t\t: null;\n\t\t}\n\n\t\treturn null;\n\t},\n\n\tgetScrollPosition: (): number => {\n\t\tconst currentScrollPosition = document.getElementById('dynamic-xbrl-form')!.scrollTop as number;\n\t\treturn currentScrollPosition;\n\t},\n\n\tgetNavBarsHeight: (): number => {\n\t\treturn document.querySelector<HTMLElement>('div[id=\"topNavs\"]')?.offsetHeight || 0;\n\t}\n};\n","import { Report, Section, SectionFact } from '../interface/meta';\nimport { convertToSelector } from \"../helpers/utils\";\nimport { ErrorsMajor } from \"../errors/major\";\n\n/**\n * Description\n * @param {any} filingSummary:any\n * @param {any} metaLinksReports:any\n * @returns {any} => Flatter array of metalinks reports (section items).\n */\nexport const buildSectionsArrayFlatter = (filingSummary, metaLinksReports, metaVersion: string) => {\n    // 'sections' and 'reports' are synonymous here\n    const filingSummaryReports = filingSummary.MyReports.Report;\n    let filingSummaryInputFiles = filingSummary.InputFiles.File;\n    if (!Array.isArray(filingSummaryInputFiles)) filingSummaryInputFiles = [filingSummaryInputFiles];\n    \n    const reportsContainStatements = filingSummaryReports\n        .filter(r => r.MenuCategory)\n        .map(r => r.MenuCategory && r.MenuCategory._text.toLowerCase())\n        .some((menuCategory: string) => {\n            return menuCategory == 'statement' || 'statements';\n        })\n\n    const addInstanceProps = (section: Section) => {\n        // Get Doc Name for instance header for sections\n        const isHtmIsh = (fileName: string) => {\n            return fileName.includes('.htm') || fileName.includes('.html') || fileName.includes('.xhtml');\n        }\n        const reportFileInfo = filingSummaryInputFiles.filter(file => {\n            // if (file._attributes && file._attributes?.original && file._text && isHtmIsh(file._text)) {\n            if (file._attributes && file._attributes?.original && isHtmIsh(file._text)) {\n                return section.instanceHtm.includes(file._attributes.original)\n            }\n        });\n        if (reportFileInfo.length) {\n            section.instanceDocName = reportFileInfo[0]._attributes.doctype;\n        } else {\n            console.error(`Cannot find instance file in FilingsSummary inputfiles`);\n        }\n        return section;\n    }\n\n    const addFactProps = (section: Section) => {\n        section.fact = getFactAttrsFromAnchorProps(section);\n        const mrFact = section.fact;\n        if (mrFact?.file  && mrFact?.ancestors && mrFact?.name) {\n            // if an ancestor is a fact name eg \"sbs:SbsefOrglStrDescTextBlock\", need to dress as name attribute\n            const handleSpecialAncestors = mrFact.ancestors.map((a: string) => {\n                if (a.includes(':')) {\n                    if (a.includes('ix:continuation')) return ''; // skip continuation ancestors\n                    return `[name=\"${a}\"]`\n                } else {\n                    return a;\n                }\n            });\n            const ancestorsRelevant = handleSpecialAncestors.reverse().filter((a:string) => a !== \"html\").join(' ');\n            section.inlineFactSelector = `section[filing-url=\"${mrFact.file}\"] > ${ancestorsRelevant} [name=\"${mrFact.name}\"][contextref=\"${mrFact.contextRef}\"]`;\n        }\n        return section;\n    }\n\n    const sectionsArray = metaLinksReports.map((metaReport: Report) => {\n        let section: Section = metaReport;\n        if (Number(metaVersion) <= 2.1 || !section.menuCat) {\n            section.menuCat = section.subGroupType || section.groupType;\n        }\n        if (metaReport.menuCat && metaReport.shortName) {\n            section = addInstanceProps(section);\n            section = addFactProps(section);\n            section.menuCatMapped = mapCategoryName(section.menuCat, reportsContainStatements);\n            section.domId = `sectionDoc-${convertToSelector(section.instanceDocName, false)}`\n\n            return section;\n        } else {\n            console.error('cannot determine section menuCat');\n        }\n    }).filter((section: Section) => section?.fact && section.menuCatMapped);\n\n    return sectionsArray;\n}\n\nconst getFactAttrsFromAnchorProps = (section: Section) => {\n    let fact: SectionFact = {};\n    fact.instance = section.instance; // number\n    // fact.menuCat = metaReport.menuCat;\n    if (section.uniqueAnchor) {\n        fact.name = section.uniqueAnchor.name;\n        fact.contextRef = section.uniqueAnchor.contextRef;\n        fact.file = section.uniqueAnchor.baseRef;\n        fact.ancestors = section.uniqueAnchor.ancestors;\n    } else if (section.firstAnchor) {\n        fact.name = section.firstAnchor.name;\n        fact.contextRef = section.firstAnchor.contextRef;\n        fact.file = section.firstAnchor.baseRef;\n        fact.ancestors = section.firstAnchor.ancestors;\n    } else {\n        /* DOC: \"As I recall, the reason for the anchors computed during rendering was that \n                some internal rendering process detail gets lost that neither filing summary.xml \n                nor metalinks.json could preserve (I think it had to do with how chrome will insert \n                elements like <tbody> if they were missing in the input…?), but since I can’t \n                remember what that might be (it’s certainly not obvious) go ahead and try.\" -WH email 4/1/2024 \n        */\n        fact = null;\n    }\n    return fact;\n}\n\n/**\n * Description\n * @param {any} input:string\n * @returns {any} => (string) mapped menu category name || 'INCOMPLETE SECTIONS DATA!'\n * @description use only when there are no 'statement' menu categories\n */\nconst mapCategoryName = (input: string, isStandard: boolean) => {\n    const lowerCaseKey = input.toLowerCase();\n    /*\n        'When the FilingSummary does not have any ‘statement’ category reports for an instance, then the following mapping should be used.  \n        “Reports” is generic and covers all the other things that don’t need their reports grouped into levels of detail.  \n        “Statements” used to be the general case (2008-2020) but now they are becoming the special case.' - WH Mar 29, 2024\n    */\n    const noStatementCatNameMap = {\n        \"cover\": \"Reports\",\n        \"document\": \"Reports\",\n        // \"statement\": n/a\n        // \"Statements\": n/a\n        \"disclosure\": \"Reports\",\n        \"notes\": \"Reports\",\n        \"policies\": \"Reports\", /* very unlikely to happen */\n        \"tables\": \"Reports\", /* very unlikely to happen */\n        \"details\": \"Details\", /* example here http://172.18.85.157:8082/ix-wh/oef24/oef05/out/FilingSummary.htm# */\n        \"prospectus\": \"Prospectus\",\n        \"rr_summaries\": \"RR Summaries\", /* example here http://172.18.85.157:8082/ix-wh/oef24/oef13/out/FilingSummary.htm we no longer make fancy menus for these */\n        \"fee_exhibit\": \"RR Summaries\",\n        \"risk/return\": \"RR Summaries\"\n    };\n    const standardCatNameMap = {\n        \"cover\": \"Cover\",\n        \"document\": \"Document & Entity Information\",\n        \"statement\": \"Financial Statements\",\n        \"statements\": \"Financial Statements\",\n        \"disclosure\": \"Notes to the Financial Statements\",\n        \"notes\": \"Notes to Financial Statements\",\n        \"policies\": \"Accounting Policies\",\n        \"tables\": \"Notes Tables\",\n        \"details\": \"Notes Details\",\n        \"prospectus\": \"Prospectus\",\n        \"rr_summaries\": \"RR Summaries\",\n        \"fee_exhibit\": \"RR Summaries\",\n        \"risk/return\": \"RR Summaries\"\n    };\n    if (isStandard) {\n        if (Object.prototype.hasOwnProperty.call(standardCatNameMap, lowerCaseKey)) {\n            return standardCatNameMap[lowerCaseKey];\n        } else {\n            console.info(`standardCatNameMap doesn't contain key: %c${lowerCaseKey}`, \"color: deepskyblue\")\n        }\n        } else {\n        if (Object.prototype.hasOwnProperty.call(noStatementCatNameMap, lowerCaseKey)) {\n            return noStatementCatNameMap[lowerCaseKey];\n        } else {\n            console.info(`noStatementCatNameMap doesn't contain key: %c${lowerCaseKey}`, \"color: deepskyblue\")\n        }\n    }\n};\n","import * as cheerio from 'cheerio';\nimport * as convert from 'xml-js';\nimport { Meta, Xbrltype, reference } from '../interface/meta';\nimport { FetchedInstance, UnitsAdditional } from '../interface/instance';\nimport { Context, DeiAmendmentFlagAttributes, Instance, LinkFootnote, LinkFootnoteArc, LinkLOC, Units } from '../interface/instance';\nimport { Section } from '../interface/meta';\nimport { Reference, SingleFact } from '../interface/fact';\nimport { Logger, ILogObj } from 'tslog';\nimport { cleanSubstring } from '../helpers/utils';\nimport { buildSectionsArrayFlatter } from './merge-data-utils';\nimport { InstanceFile, MetaLinks, MetaLinksResponse } from '../interface/instance-file';\nimport { FilingSummary, Report } from '../interface/filing-summary';\nimport { UrlParams } from '../interface/url-params';\n\n/* Created by staff of the U.S. Securities and Exchange Commission.\n * Data and content created by government employees within the scope of their employment\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\n */\n\n/* eslint-disable @typescript-eslint/ban-types */\n\ntype ErrorResponse = { error: true, message: string };\n\nexport class FetchAndMerge {\n    private absolute: string;\n    private params: UrlParams;\n    private customPrefix: undefined | string;\n    private activeInstance: InstanceFile = {} as any;\n    private std_ref;\n    private sections: Array<Section> = [];\n    private metaVersion: string | null = null;\n    private instances;\n    // private partial: unknown | null;\n    // private map: unknown | null;\n\n\n    constructor(input: {\n        absolute: string,\n        params: UrlParams,\n        instance: number | null,\n        // partial?: unknown,\n        // map?: unknown,\n        customPrefix?: string,\n        std_ref: { [key: string]: Reference },\n    }) {\n        this.absolute = input.absolute;\n        // this.partial = input.partial || null;\n        // this.map = input.map || null;\n        this.params = input.params;\n        this.customPrefix = input.customPrefix;\n        this.instances = input.instance;\n        this.std_ref = input.std_ref;\n    }\n\n    init() {\n        /**\n         * Description\n         * @param {any} instances\n         * @param Boolean initialLoad=false\n         * @returns {\n         *  instance: {},\n         *  sections: {},\n         *  std_ref: string\n         * }\n         */\n        const XHTMLandInstance = (instances: { instance: unknown }, initialLoad = false) => {\n            return Promise.all([\n                this.fetchXHTML(),\n                this.fetchInstancesXml()\n            ]).then(([xhtml, instXml]) => {\n                const errors = [...xhtml, instXml].filter((element): element is ErrorResponse =>\n                    element ? Object.prototype.hasOwnProperty.call(element, 'error') : false);\n\n                if (errors.length) {\n                    const errorMessages = errors.map(current => current.message);\n                    return { all: { error: true, message: errorMessages } };\n                }\n\n                //At this point, neither of the responses had errors, so we can safely cast them\n                xhtml = xhtml as Array<{ xhtml: string }>;\n                instXml = instXml as Instance;\n\n                xhtml.forEach((current: { xhtml: string }, index) => {\n                    this.activeInstance.xhtmls[index].loaded = true;\n                    this.activeInstance.xhtmls[index].xhtml = current.xhtml;\n                });\n                this.activeInstance.xml = instXml;\n                this.mergeAllResponses(initialLoad);\n                const all = {\n                    instance: (initialLoad ? instances.instance : instances),\n                    sections: this.sections || [],\n                    std_ref: this.std_ref\n                }\n\n                return { all };\n            });\n        };\n\n        //TODO: Make this camelCase?\n        const MetaandSummary = () => {\n            return Promise.all([this.fetchMeta(), this.fetchSummary()])\n                .then(([metalinks, filingSummary]) => {\n                    // const metalinks = allResponses[0];\n                    // const filingSummary = allResponses[1];\n                    \n                    // if (allResponses.some((element) => element.error)) {\n                    //     const messageIndex = allResponses.find((element) => element.error);\n                    //     return {\n                    //         all: { error: true, message: [messageIndex.message] }\n                    //     }\n                    // }\n\n                    let error = false;\n                    let message = [];\n                    for(let response of [metalinks, filingSummary])\n                    {\n                        if(\"error\" in response && response.error)\n                        {\n                            message.push(response.message);\n                            error = true;\n                        }\n                    }\n                    if(error)\n                    {\n                        return { all: { error, message } };\n                    }\n\n                    //At this point, neither of the responses had errors, so we can safely cast them\n                    metalinks = metalinks as MetaLinks;\n                    filingSummary = filingSummary as FilingSummary;\n                    \n                    this.metaVersion = metalinks.version || null;\n                    this.std_ref = metalinks.std_ref || {} as any;\n                    \n                    this.activeInstance = metalinks.instance?.filter(element => element.current)[0];\n\n                    const metaLinksSections = Object.values(metalinks.sections); // ignoring keys R1, R2, ...\n\n                    const getInstancesInfoFromFilingSummary = (filingSummary: FilingSummary) => {\n                        const filingSummaryReports = filingSummary.MyReports.Report;\n                        const instanceHtmSlugs: string[] = []; // stored in filing summ as foo.htm\n                        filingSummaryReports.map((r) => {\n                            if (r._attributes && r._attributes.instance) {\n                                const reportInstanceHtmSlug = r._attributes.instance;\n                                if (!instanceHtmSlugs.includes(reportInstanceHtmSlug)) {\n                                    instanceHtmSlugs.push(reportInstanceHtmSlug);\n\n                                    // add xmlUrls to instances\n                                    const metaInstanceModel = metalinks.instance?.filter(inst => inst.instanceHtm.includes(reportInstanceHtmSlug))[0];\n                                    metaInstanceModel.xmlUrl = this.params.metalinks.replace('MetaLinks.json', reportInstanceHtmSlug.replace('.htm', '_htm.xml'));\n                                }\n                            }\n                        });\n                        if (!this.activeInstance?.xmlUrl) {\n                            console.error('Could not determine instance url of active instance.');\n                        }\n                    }\n                    getInstancesInfoFromFilingSummary(filingSummary);\n                    \n                    // iterate over FilingSummary.xml Reports to build sections, adding data from metalinks\n                    this.sections = buildSectionsArrayFlatter(filingSummary, metaLinksSections, this.metaVersion || \"\");\n\n                    return XHTMLandInstance(metalinks, true);\n                });\n        };\n\n        if (this.instances !== null) {\n            // switching instance\n            this.activeInstance = this.instances.filter(element => element.current)[0];\n            return XHTMLandInstance(this.instances);\n        } else {\n            // initial load\n            return MetaandSummary();\n        }\n    }\n\n    decodeWorkstationXmlInHtml(isWorkstation: boolean, html: string, closingXml: string) {\n        if (!isWorkstation) return html; // not running on SEC EDGAR workstation which encodes xml in HTML\n        if (!html.substring(0,100).toLowerCase().includes(\"<html><head>\")) {\n             if (html.includes(\"<title>EDGAR SEC Workstation Login</title>\")) {\n                  console.error(\"Workstation requires logging in\");\n                  window.alert(\"Workstation requires logging in\");\n                  return \"\";\n             }\n             return html; // it's xml, not html\n        }\n        // snip extraneous html from beginning and end of resopnse which is present in versions of files on workstation\n        // only 5 encodings are used in xml\n        html = html.replaceAll('&lt;', '<');\n        html = html.replaceAll('&gt;', '>');\n        html = html.replaceAll('&quot;', '\"');\n        html = html.replaceAll('&apos;', '\\'');\n        html = html.replaceAll('&amp;', '&');\n        return html.substring(html.indexOf(\"<?xml version=\"), html.indexOf(closingXml) + closingXml.length)\n    }\n\n    /**\n     * Description\n     * @returns {any} => current .htm file (xhtml file)\n     */\n    fetchXHTML(): Promise<Array<{ xhtml: string } | ErrorResponse>> {\n        const promises = this.activeInstance?.xhtmls.map((current: { url: string }) => {\n            return new Promise<{ xhtml: string } | ErrorResponse>((resolve) => {\n                //TODO: use `HelpersUrl.isWorkstation` instead\n                const isWorkstation = current.url.includes(\"DisplayDocument.do?\");\n                let ixvUrl = current.url;\n                if (isWorkstation) {\n                    if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\n                        ixvUrl = ixvUrl.replace('.htm', '_ix2.htm');\n                    } else {\n                        ixvUrl = ixvUrl.replace('.htm', '_ix1.htm');\n                    }\n                }\n                fetch(ixvUrl, {\n                    headers: { \"Content-Type\": \"application/xhtml+xml\" },\n                    mode: 'no-cors',\n                    credentials: 'include',\n                }).then((response) => {\n                    if (response.status >= 200 && response.status <= 299) {\n                        return response.text();\n                    } else {\n                        throw Error(`${response.status.toString()}; could not find \"${this.params.doc}\"`);\n                    }\n                }).then((data) => {\n                    // on SEC EDGAR workstation xhtml is encoded like this: <HTML><HEAD><TITLE> ... &lt;?xml ...\n                    const xhtmlData = this.decodeWorkstationXmlInHtml(isWorkstation, data, \"</html>\");\n                    resolve({ xhtml: xhtmlData });\n                }).catch((error) => {\n                    resolve({ error: true, message: error });\n                })\n            });\n        }) || [];\n\n        return Promise.all(promises);\n    }\n\n    fetchMeta(): Promise<ErrorResponse | MetaLinks>\n    {\n        //TODO: use async/await to simplify this logic\n        return new Promise<MetaLinks | ErrorResponse>((resolve) => {\n            let jsonUrl = this.params.metalinks;\n            //TODO: use `HelpersUrl.isWorkstation` instead\n            const isWorkstation = jsonUrl.includes(\"DisplayDocument.do?\");\n            if (isWorkstation) {\n                if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\n                    jsonUrl = jsonUrl.replace('MetaLinks.json', 'PrivateMetaLinks.json');\n                }\n            }\n\n            return fetch(jsonUrl, { credentials: 'include' }).then((response) => {\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                } else {\n                    throw Error(response.status.toString());\n                }\n            }).then((data: MetaLinksResponse) => {\n                let XHTMLSlug = this.params.doc.substring(this.params.doc.lastIndexOf('/') + 1);\n                if (XHTMLSlug.startsWith(\"DisplayDocument.do\") || XHTMLSlug.startsWith(\"view.html\")) {\n                    XHTMLSlug = this.params.doc.substring(this.params.doc.lastIndexOf('filename=') + 9);\n                }\n                const instanceFileNames = Object.keys(data.instance).join().split(/[ ,]+/);\n                let sections = {};\n                if (instanceFileNames.includes(XHTMLSlug)) {\n                    const instanceObjects: InstanceFile[] = Object.entries(data.instance).map(([currentInstance, instData], instanceIndex) => {\n                        // Sections\n                        //TODO: combine these using `Object.entries`\n                        Object.keys(instData.report).forEach((report) => {\n                            instData.report[report].instanceIndex = instanceIndex; // why?\n                        });\n                        Object.values(instData.report).forEach(report => {\n                            report.instanceHtm = currentInstance;\n                        });\n\n                        //NOTE: `sections` get reassigned at every step of this loop, is unused in the rest of the logic\n                        //  per loop step, and gets returned (the last value to which it's assigned) once the loop ends\n                        sections = Object.assign(sections, instData.report);\n\n                        /* \n                            if instance key has space, e.g. \n                                \"doc1.htm doc2.htm\": {...}, \n                            it is known as multi doc.\n                        */\n                        const xhtmls = currentInstance.split(' ').map((element) => {\n                            return {\n                                slug: element,\n                                url: this.params.doc.replace(this.params['doc-file'], element),\n                                current: currentInstance.split(' ').includes(XHTMLSlug) && element === this.params['doc-file'],\n                                loaded: false\n                            };\n                        });\n\n                        return {\n                            current: currentInstance.split(' ').includes(XHTMLSlug),\n                            instance: instanceIndex, // Why?\n                            map: new Map<string, SingleFact>(),\n                            metaInstance: Object.assign(instData),\n                            instanceHtm: currentInstance,\n                            xhtmls: xhtmls,\n                        };\n                    });\n\n                    resolve({ ...data, instance: instanceObjects, sections, version: data.version });\n                } else {\n                    // this may occur when transferring a filing from one domain to another.  Not sure how to fix...\n                    if (!PRODUCTION) {\n                        console.log('instanceFileNames does not include XHTMLSlug. fetch-merge > fetchMeta())')\n                    }\n                    throw Error('Incorrect MetaLinks.json Instance');\n                }\n\n                //I'm not sure what resolving a Promise twice does...  this probably belongs in the `else` block above\n                //  but, in that case, an error is thrown so the Promise gets an error state instead of a resolution...\n                resolve(data);\n            }).catch((error) => resolve({ error: true, message: `${error}; could not find \"${this.params.metalinks}\"` }))\n        });\n    }\n\n    fetchSummary(): Promise<FilingSummary | { error: true, message: string }> {\n        return new Promise((resolve) => {\n            let filingSummXmlUrl = this.params.summary;\n\n            //TODO: use the new `isWorkstation` func in HelpersUrl instead\n            const isWorkstation = filingSummXmlUrl.includes(\"DisplayDocument.do?\");\n            if (isWorkstation) {\n                if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\n                    filingSummXmlUrl = filingSummXmlUrl.replace('FilingSummary.xml', 'PrivateFilingSummary.xml')\n                }\n            }\n\n            return fetch(filingSummXmlUrl, { credentials: 'include' }).then((response) => {\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.text();\n                } else {\n                    throw Error(response.status.toString());\n                }\n            }).then((data) => {\n                const xmlData = this.decodeWorkstationXmlInHtml(isWorkstation, data, \"</FilingSummary>\");\n                const convertedXml = convert.xml2json(xmlData, { compact: true });\n                resolve(JSON.parse(convertedXml).FilingSummary as FilingSummary);\n            }).catch((error) => {\n                resolve({ error: true, message: `${error}; could not find \"${this.params.summary}\"` })\n            });\n        });\n    }\n\n    fetchInstancesXml(): Promise<Instance | ErrorResponse> {\n        let _xmlUrl = this.activeInstance?.xmlUrl;\n        const isWorkstation = _xmlUrl.includes(\"DisplayDocument.do?\");\n        if (isWorkstation) {\n            // If methods from HelpersUrl are used here some very strange bugs occur, such as window and localStorage undefined.\n            if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\n                _xmlUrl = _xmlUrl.replace('_htm.xml', '_ht2.xml')\n            } else {\n                _xmlUrl = _xmlUrl.replace('_htm.xml', '_ht1.xml')\n            }\n        }\n\n        const xmlFetchPromise = new Promise<{ instance: string } | ErrorResponse>((resolve) =>\n            //TODO: we used to pass `{ credentials: 'include' }` to `.then()` (which is wrong);\n            //  should we be passing it to `fetch`??\n            fetch(_xmlUrl).then((response) => {\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.text();\n                } else {\n                    throw Error(`${response.status.toString()}`);\n                }\n            }).then((data) => {\n                const xmlData = this.decodeWorkstationXmlInHtml(isWorkstation, data, \"</xbrl>\");\n                resolve({ instance: xmlData });\n            }).catch((error) => {\n                resolve({ error: true, message: `${error}; could not find \"XML Instance Data\"` });\n            }\n        ));\n\n        return xmlFetchPromise.then((xmlInstance) => {\n            const instance = xmlInstance;\n            if (instance) {\n                const fetchedXMlString = instance.instance;\n                const instanceXmlAsJsonCompact: Instance = JSON.parse(convert.xml2json(fetchedXMlString, { compact: true }));\n                if (instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"] && DEBUGJS) {\n                    const footnotesNode = instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"]\n                    // grab xml data as non compact object so element order is preserved.\n                    instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"].expanded = JSON.parse(convert.xml2json(fetchedXMlString as unknown as string, { compact: false }));\n                    instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"].orderedFootnoteDivs = footnotesNode.expanded.elements[0].elements;\n                    instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"].asXmlString = cleanSubstring(fetchedXMlString, '<link:footnoteLink', '</link:footnoteLink>');\n                    // footnotesNode.asXmlString = cleanSubstring(fetchedXMlString, '<link:footnoteLink', '</link:footnoteLink>').replaceAll('\\n', '');\n                    // footnotesNode.renderableXml = this.xmlToDom(fetchedXMlString);\n                }\n                // return instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"].asXmlString\n                return instanceXmlAsJsonCompact;\n            } else {\n                return xmlInstance;\n            }\n        });\n    }\n\n    mergeAllResponses(initialLoad: boolean) {\n        this.activeInstance.map = this.buildInitialFactMap(this.activeInstance.xml, this.activeInstance.xhtmls[0].slug);\n        if (initialLoad) {\n            this.sections = this.extractSections(); // not sure what this was for, except maybe adding .groupType\n        }\n        this.activeInstance.formInformation = this.extractFormInformation(this.activeInstance.metaInstance);\n        this.enrichFactMapWithMetalinksData();\n        this.customPrefix = this.activeInstance.metaInstance.nsprefix;\n        this.prepareXHTMLForCurrentInstance();\n        return;\n    }\n\n    buildInitialFactMap(instanceXml: Instance, fileSlug: string) {\n        const getInstancePrefix = (instance: Instance) => {\n            const options = Object.keys(instance).filter(element => element.endsWith(':xbrl'))[0];\n            return options ? options.split(':')[0] : false;\n        };\n\n        const prefix = getInstancePrefix(instanceXml);\n        let instance: Record<string, any> = instanceXml;\n\n        const xbrlKey = prefix ? `${prefix}:xbrl` : 'xbrl';\n        const contextKey = prefix ? `${prefix}:context` : 'context';\n        const unitKey = prefix ? `${prefix}:unit` : 'unit';\n\n        const context = instance[xbrlKey][contextKey];\n        const unit = instance[xbrlKey][unitKey];\n        const footnote = instance[xbrlKey]['link:footnoteLink'];\n\n        delete instance[xbrlKey][contextKey];\n        delete instance[xbrlKey][unitKey];\n        delete instance[xbrlKey]._attributes;\n        delete instance[xbrlKey]['link:schemaRef'];\n        delete instance[xbrlKey]['link:footnoteLink'];\n\n        this.setPeriodText(context);\n        this.setSegmentData(context);\n        this.setMeasureText(unit);\n\n        const map = new Map();\n\n        let factCounter = 0;\n        for (let key in instance[xbrlKey]) {\n            /* example set of keys on instance.xbrl\n                _attributes\n                link:schemaRef\n                context\n                unit\n                dei:AmendmentFlag\n                dei:DocumentPeriodEndDate\n                dei:DocumentFiscalPeriodFocus\n                dei:EntityCentralIndexKey\n                dei:CurrentFiscalYearEndDate\n                dei:EntityEmergingGrowthCompany\n                dei:DocumentType\n                dei:DocumentFiscalYearFocus\n                dei:EntityRegistrantName\n                dei:EntityCommonStockSharesOutstanding\n                i09203gd:Content4\n                link:footnoteLink\n            */\n            if (Array.isArray(instance[xbrlKey][key])) { // this first block might handle multi instance filings.\n                instance[xbrlKey][key].forEach((current: { _attributes: DeiAmendmentFlagAttributes; _text: string; }) => {\n                    const attributes = { ...current._attributes };\n                    const id = attributes.id ? attributes.id : `fact-identifier-${factCounter}`;\n                    delete attributes.id;\n                    map.set(id, {\n                        ...attributes,\n                        name: key,\n                        ix: id,\n                        id: `fact-identifier-${factCounter++}`,\n                        value: this.isFactHTML(current._text) ? this.updateValueToRemoveIDs(current._text) : current._text,\n                        isAmountsOnly: this.isFactAmountsOnly(current._text),\n                        isTextOnly: !this.isFactAmountsOnly(current._text),\n                        isNegativeOnly: this.isFactNegativeOnly(current._text),\n                        isHTML: this.isFactHTML(current._text),\n                        period: this.setPeriodInfo(attributes.contextRef, context),\n                        period_dates: this.setPeriodDatesInfo(attributes.contextRef, context),\n                        segment: this.setSegmentInfo(attributes.contextRef, context),\n                        measure: this.setMeasureInfo(attributes.unitRef || \"\", unit),\n                        scale: this.setScaleInfo(attributes.scale || 0),\n                        decimals: this.setDecimalsInfo(attributes.decimals || \"\"),\n                        sign: this.setSignInfo(attributes.sign || \"\"),\n                        footnote: this.setFootnoteInfo(id, footnote),\n                        isEnabled: true,\n                        isHighlight: false,\n                        isSelected: false,\n                        filter: {\n                            content: this.getTextFromHTML(current._text),\n                        },\n                        file: fileSlug\n                    });\n                });\n            } else {\n                const attributes = { ...instance[xbrlKey][key]._attributes };\n                const id = attributes.id ? attributes.id : `fact-identifier-${factCounter}`;\n                delete attributes.id;\n\n                map.set(id, {\n                    ...attributes,\n                    name: key,\n                    ix: id,\n                    id: `fact-identifier-${factCounter++}`,\n                    value: this.isFactHTML(instance[xbrlKey][key]._text) ? this.updateValueToRemoveIDs(instance[xbrlKey][key]._text) : instance[xbrlKey][key]._text,\n                    isAmountsOnly: this.isFactAmountsOnly(instance[xbrlKey][key]._text),\n                    isTextOnly: !this.isFactAmountsOnly(instance[xbrlKey][key]._text),\n                    isNegativeOnly: this.isFactNegativeOnly(instance[xbrlKey][key]._text),\n                    isHTML: this.isFactHTML(instance[xbrlKey][key]._text),\n                    period: this.setPeriodInfo(attributes.contextRef, context),\n                    period_dates: this.setPeriodDatesInfo(attributes.contextRef, context),\n                    segment: this.setSegmentInfo(attributes.contextRef, context),\n                    measure: this.setMeasureInfo(attributes.unitRef, unit),\n                    scale: this.setScaleInfo(attributes.scale),\n                    decimals: this.setDecimalsInfo(attributes.decimals),\n                    sign: this.setSignInfo(attributes.sign),\n                    footnote: this.setFootnoteInfo(id, footnote),\n                    isEnabled: true,\n                    isHighlight: false,\n                    isSelected: false,\n                    filter: {\n                        content: this.getTextFromHTML(instance[xbrlKey][key]._text),\n                    },\n                    file: fileSlug\n                });\n            }\n            // console.log('instanceXml[xbrlKey][key]', key, instanceXml[xbrlKey][key])\n        }\n        return map;\n    }\n\n    extractSections() {\n        return this.sections.map((section) => {\n\n            // groupType is used in Metalinks v2.1 (and presumably earlier) and was replaced by menuCat in 2.2\n            if (Number(this.metaVersion) >= 2.2) {\n                if (section.menuCat) {\n                    section.groupType = section.menuCat;\n                } \n            } \n            // else {\n            //     section.menuCat = section.subGroupType;\n            // }\n            return section;\n        });\n    }\n\n    extractFormInformation(meta: Meta) {\n        const metaCopy = Object.assign({}, meta);\n        delete metaCopy.report;\n        delete metaCopy.tag;\n        return metaCopy;\n    }\n\n    /**\n     * Description\n     * @returns {any} => updates instance fact map (this.activeInstance.map) with data from meta (this.activeInstance.metaInstance)\n     */\n    enrichFactMapWithMetalinksData() {\n        this.activeInstance?.map.forEach((currentFact: SingleFact) => {\n            /* \n                @Doc: Fact 'tags' in metalinks.json vs fact 'names' in instance and xhtmls files\n                facts are stored in metalinks.json under instance[<instanceName>].tags\n                Not sure why they are called 'tags'\n                Tags in xbrl speak are 'concepts', which are also qNames.\n                Some tag names looke like: \n                    dei_AmendmentDescription\n                They have an underscore, but in the instance and xhtml files they have colons. \n                    dei:AmendmentDescription\n            */\n            const factNameTag = currentFact.name.replace(':', '_');\n            const factObjectMl = this.activeInstance.metaInstance.tag[factNameTag]; // Ml being metalinks\n\n            if (factObjectMl) {\n\n                /* add references (if any) to each individual fact\n                including references via any dimension [name]\n                including references via any member [name] */\n                if (factObjectMl.auth_ref) {\n\n                    let references = factObjectMl.auth_ref.map((authRef) => {\n                        return authRef;\n                    });\n\n                    if (currentFact.segment) {\n                        const dimensions = currentFact.segment.map((element: { dimension: string; }) => {\n                            if (element.dimension && this.activeInstance.metaInstance.tag[element.dimension.replace(':', '_')]) {\n                                return this.activeInstance.metaInstance.tag[element.dimension.replace(':', '_')].auth_ref ? this.activeInstance.metaInstance.tag[element.dimension.replace(':', '_')].auth_ref : null;\n                            }\n                        }).filter(Boolean)[0];\n\n                        const axis = currentFact.segment.map((element: { dimension: string; axis: string; }) => {\n                            if (element.dimension && this.activeInstance.metaInstance.tag[element.axis.replace(':', '_')]) {\n                                return this.activeInstance.metaInstance.tag[element.axis.replace(':', '_')].auth_ref ? this.activeInstance.metaInstance.tag[element.axis.replace(':', '_')].auth_ref : null;\n                            }\n                        }).filter(Boolean)[0];\n\n                        references = references.concat(dimensions).concat(axis);\n                    }\n\n                    currentFact.references = [...new Set(references)].map((current) => {\n                        return this.std_ref[current];\n                    }).filter(Boolean);\n                    // this order specifically for Fact References\n                    // any other key => value will be ignored and not shown to the user\n                    const requiredOrder = [\n                        `Publisher`,\n                        `Name`,\n                        `Number`,\n                        `Chapter`,\n                        `Article`,\n                        `Number`,\n                        `Exhibit`,\n                        `Section`,\n                        `Subsection`,\n                        `Paragraph`,\n                        `Subparagraph`,\n                        `Sentence`,\n                        `Clause`,\n                        `Subclause`,\n                        `Example`,\n                        `Footnote`,\n                        `URI`,\n                        `URIDate`,\n                    ];\n\n                    currentFact.references = currentFact.references.map((singleReference) => {\n                        return Object.keys(singleReference)\n                            .reduce((accumulator, current) => {\n                                const index = requiredOrder.findIndex(element => element === current);\n                                if (index !== -1) {\n                                    const returnObject = {};\n                                    returnObject[current] = singleReference[current];\n                                    accumulator[index] = returnObject;\n                                }\n                                return accumulator;\n                            }, new Array(Object.keys(singleReference).length).fill(null))\n                            .filter(Boolean);\n                    });\n                }\n\n                // add calculations (if any) to each individual fact\n                if (factObjectMl.calculation) {\n                    // console.log('this.activeInstance.metaInstance', this.activeInstance.metaInstance)\n                    const tempFactCalculation = factObjectMl.calculation;\n                    currentFact.calculations = [];\n                    for (const factCalculationProp in tempFactCalculation) {\n                        const result = this.sections?.map(sectionElement => {\n                            if (sectionElement.role === factCalculationProp) {\n                                /*\n                                    Walter comment: \"Although I traced the root cause to a problem in entry point sbsef-fex, still, \n                                    user actions can cause this.sections to be unbound when switching from one instance to another via the “instance” menu.  \n                                    So, this section should probably make sure that this.sections is at least an empty list:\"\n                                */\n                                return [\n                                    {\n                                        label: 'Section',\n                                        value: sectionElement.longName\n                                    },\n                                    {\n                                        label: 'Weight',\n                                        value: this.getCalculationWeight(tempFactCalculation[factCalculationProp].weight)\n                                    },\n                                    {\n                                        'label': 'Parent',\n                                        value: this.getCalculationParent(tempFactCalculation[factCalculationProp].parentTag)\n                                    }\n                                ];\n                            }\n                        }).filter(Boolean);\n                        currentFact.calculations = currentFact.calculations.concat(result);\n                    }\n                } else {\n                    currentFact.calculations = [];\n                }\n\n                // add labels (if any) to each individual fact\n                if (factObjectMl.lang) {\n                    currentFact.labels = Object.keys(factObjectMl.lang).map((current) => {\n                        const oldObject = factObjectMl.lang[current].role;\n                        const newObject = {};\n                        for (const property in oldObject) {\n\n                            const result = property.replace(/([A-Z])/g, ' $1');\n                            const finalResult = result.charAt(0).toUpperCase() + result.slice(1);\n                            Object.assign(newObject, { [finalResult]: oldObject[property] });\n                        }\n                        return newObject\n                    });\n\n                    currentFact.filter.labels = currentFact.labels.reduce((accumulator: string, current) => {\n                        const tempCurrent = { ...current };\n                        delete tempCurrent.documentation;\n                        return `${accumulator} ${Object.values(tempCurrent).join(' ')}`;\n\n                    }, '');\n\n                    currentFact.filter.definitions = currentFact.labels.reduce((accumulator, current: { Documentation: string; }) => {\n                        return `${accumulator} ${current.Documentation}`;\n                    }, '');\n                }\n\n                // add credit / debit\n                if (factObjectMl.crdr) {\n                    const balance = factObjectMl.crdr;\n                    currentFact.balance = `${balance.charAt(0).toUpperCase()}${balance.slice(1)}`;\n                }\n\n                // add xbrltype\n                if (factObjectMl.xbrltype) {\n                    currentFact.xbrltype = factObjectMl.xbrltype;\n                }\n\n                // add additional info to each individual fact\n                currentFact.localname = factObjectMl.localname ? factObjectMl.localname : null;\n                currentFact.nsuri = factObjectMl.nsuri ? factObjectMl.nsuri : null;\n                currentFact.presentation = factObjectMl.presentation ? factObjectMl.presentation : null;\n                currentFact.xbrltype = factObjectMl.xbrltype ? factObjectMl.xbrltype : null;\n            }\n        });\n    }\n\n    prepareXHTMLForCurrentInstance() {\n        const isWorkstation = this.params.doc.includes(\"DisplayDocument.do?\");\n        this.activeInstance.xhtmls.forEach((current) => {\n            if (current.xhtml) {\n                let $ = cheerio.load(current.xhtml, {});\n                $ = this.hiddenFacts($);\n                $ = this.fixImages($, isWorkstation);\n                $ = this.fixLinks($);\n                $ = this.redLineFacts($);\n                $ = this.excludeFacts($);\n                const updates = this.attributeFacts($, this.activeInstance.map, current.slug);\n                current.xhtml = updates.xhtml;\n            }\n        });\n    }\n\n    fixImages($: cheerio.CheerioAPI, isWorkstation: boolean) {\n        const startPerformance = performance.now();\n        const foundImagesArray = Array.from($('img'));\n        if (isWorkstation) {\n            // uncomment next 3 lines and force isWorkstation to true to test on local\n            // const exampleMlPath = '../DisplayDocument.do?step=docOnly&accessionNumber=0001314610-24-800735&interpretedFormat=false&redline=true&filename=MetaLinks.json'\n            \n            const [docName, searchParams] = this.params.doc.split('?');\n            let imgParams = new URLSearchParams(searchParams);\n\n            imgParams.set(\"step\", \"docOnly\");\n            imgParams.set(\"interpretedFormat\", \"false\");\n            imgParams.delete(\"redline\");\n            imgParams.delete(\"status\");\n            imgParams.delete(\"sequenceNumber\");\n\n            foundImagesArray.forEach((imgElem) => {\n                // Not sure how to handle Herm's suggestion: 'And if src is a local file (foo.jpg, not /include or http://archives.sec.xxx)'\n                // const imgIsLocal = !$(imgElem).attr('src')?.startsWith('/include');\n                // const imgIsFileNameOnly = $(imgElem).attr('src') && (!$(imgElem).attr('src')?.startsWith('/') || !$(imgElem).attr('src')?.includes('/', 1));\n                           \n                const imgSrc = $(imgElem).attr('src');\n                if(!imgSrc) return;\n\n                const imgFileName = imgSrc.includes('/') ? imgSrc.substring(imgSrc.lastIndexOf('/') + 1) : imgSrc;\n                imgParams.set(\"filename\", imgFileName);\n\n                console.log('params', imgParams.toString());\n\n                $(imgElem).attr('src', `${docName}?${imgParams.toString()}`);\n                $(imgElem).attr('loading', 'lazy');\n            });\n        }\n        else \n        {\n            foundImagesArray.forEach((imgElem) => {\n                const imgSrc = $(imgElem).attr('src');\n                if (!imgSrc?.startsWith('data:')) {\n                    const imageSlug = imgSrc?.substring(imgSrc!.lastIndexOf('/') + 1);\n                    $(imgElem).attr('src', `${this.absolute}${imageSlug}`);\n                    $(imgElem).attr('loading', 'lazy');\n                }\n            })\n        }\n\n        const endPerformance = performance.now();\n        if (LOGPERFORMANCE) {\n            const items = foundImagesArray.length;\n            const log: Logger<ILogObj> = new Logger();\n            log.debug(`FetchAndMerge.fixImages() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\n        }\n        return $;\n    }\n\n    fixLinks($: cheerio.CheerioAPI) {\n        const startPerformance = performance.now();\n        const foundLinksArray = Array.from($('[data-link],[href]'));\n        foundLinksArray.forEach((current) => {\n            if (Object.prototype.hasOwnProperty.call(current.attribs, 'href')) {\n                if (current.attribs.href.startsWith('http://') ||\n                    current.attribs.href.startsWith('https://') ||\n                    current.attribs.href.startsWith('#')) {\n                    // already an absolute url, just add tabindex=18\n                    $(current).attr('tabindex', '18');\n\n                    // this anchor tag does not exsist in the current XHTML file\n                    if (current.attribs.href.startsWith('#') \n                        && current.attribs.href.slice(1) \n                        && $(`[id='${current.attribs.href.slice(1)}']`).length === 0\n                    ) {\n                        $(current).attr('xhtml-change', 'true');\n                    }\n                } else {\n                    // create an absolute url, add tabindex=18\n                    $(current).attr('tabindex', '18');\n                    $(current).attr('href', `${this.absolute}${current.attribs.href}`);\n                }\n            }\n            if (Object.prototype.hasOwnProperty.call(current.attribs, 'data-link')) {\n                $(current).attr('tabindex', '18');\n            }\n        });\n        const endPerformance = performance.now();\n        if (LOGPERFORMANCE) {\n            const items = foundLinksArray.length;\n            const log: Logger<ILogObj> = new Logger();\n            log.debug(`FetchAndMerge.fixLinks() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\n        }\n        return $;\n    }\n\n    hiddenFacts($: cheerio.CheerioAPI) {\n        const startPerformance = performance.now();\n        const foundElements = Array.from($('[style*=\"-ix-hidden\"]')).slice(0, 1000);\n\n        foundElements.forEach((current) => {\n            const updatedStyle = Object.values($(current).css([\"-sec-ix-hidden\", \"-esef-ix-hidden\"]) as {}).filter(Boolean)[0];\n            const hiddenElement = $(`#${updatedStyle}`);\n            if ($(hiddenElement).length) {\n                // console.log($(hiddenElement));\n                // we now create an entirely new element based on the innerHTML\n                // of current, and the attributes of hiddenElement\n                const cheerioElement = $(`<${$(hiddenElement).prop('tagName')?.toLowerCase().replace(`:`, `\\\\:`)}>`);\n                //const id = $(hiddenElement).attr('id');\n\n                for (const key in $(hiddenElement).attr()) {\n\n                    $(cheerioElement).attr(key, $(hiddenElement).attr(key));\n                }\n                $(cheerioElement).attr('isadditionalitemsonly', 'true');\n                $(cheerioElement).attr('ishiddenelement', 'true');\n                $(cheerioElement).html($(current).text());\n                $(hiddenElement).removeAttr('id');\n                $(hiddenElement).removeAttr('contextref');\n                $(hiddenElement).removeAttr('name');\n\n                //console.log($(cheerioElement).attr('id'));\n                $(current).html($(cheerioElement));\n                if ($(cheerioElement).attr('id') === 'id3VybDovL2RvY3MudjEvZG9jOjU1M2Q3M2I4N2RhYjQ2MzQ5ZjlmNTI3Y2YwNzZjMzlhL3NlYzo1NTNkNzNiODdkYWI0NjM0OWY5ZjUyN2NmMDc2YzM5YV82MS9mcmFnOmI0ZGUyZDM0ZWE4NTRjMTc4NmFjYWIyYzRjZWRiMmQ2L3RleHRyZWdpb246YjRkZTJkMzRlYTg1NGMxNzg2YWNhYjJjNGNlZGIyZDZfNDAwNTE_70ac34fc-cc35-4fb1-ad12-4d0f52202d63') {\n                    const log: Logger<ILogObj> = new Logger();\n                    log.debug($(current).html());\n                }\n            } else {\n                const log: Logger<ILogObj> = new Logger();\n                log.debug('empty!');\n            }\n        });\n        const endPerformance = performance.now();\n        if (LOGPERFORMANCE) {\n            const items = foundElements.length\n            const log: Logger<ILogObj> = new Logger();\n            log.debug(`FetchAndMerge.hiddenFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\n        }\n        return $;\n    }\n\n    /**\n     * Description\n     * @param {any} $:cheerio.CheerioAPI\n     * @returns {any}\n     */\n    redLineFacts($: cheerio.CheerioAPI) {\n        const startPerformance = performance.now();\n        let foundElements = [];\n        \n        ['redline', 'redact'].forEach((r) => {\n            foundElements = Array.from($('[style*=\"-ix-' + r + '\"]'));\n            \n            if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\n                if (!PRODUCTION) {\n                    const log: Logger<ILogObj> = new Logger();\n                    log.debug(`ix-${r} styles Found: ${foundElements.length}`);\n                }\n                foundElements.forEach((current) => {\n                    const updatedStyle = Object.values($(current).css([\"-sec-ix-\" + r, \"-esef-ix-\" + r]) as {}).filter(Boolean)[0];\n                    if (updatedStyle === \"true\") {\n                        $(current).attr(r, 'true');\n                    }\n                });\n            }\n        });\n        const endPerformance = performance.now();\n        if (LOGPERFORMANCE) {\n            const items = foundElements?.length;\n            const log: Logger<ILogObj> = new Logger();\n            log.debug(`FetchAndMerge.redLineFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\n        }\n        return $;\n    }\n\n    excludeFacts($: cheerio.CheerioAPI) {\n        const startPerformance = performance.now();\n        const foundElements = Array.from($('[style*=\":exclude\"]'));\n        foundElements.forEach((current) => {\n            $(current).addClass('no-hover');\n        });\n        const endPerformance = performance.now();\n        if (LOGPERFORMANCE) {\n            const items = foundElements.length;\n            const log: Logger<ILogObj> = new Logger();\n            log.debug(`FetchAndMerge.excludeFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\n        }\n        return $;\n    }\n\n    attributeFacts($: cheerio.CheerioAPI, map: Map<string, SingleFact>, currentSlug: string) {\n        const startPerformance = performance.now();\n\n        const foundElements = Array.from($(`[contextRef]`));\n\n        foundElements.forEach((current) => {\n            $(current).attr(\"selected-fact\", 'false');\n            $(current).attr(\"hover-fact\", 'false');\n            $(current).attr(\"continued-fact\", 'false');\n            $(current).closest('table').length ? $(current).attr(\"inside-table\", 'true') : $(current).attr(\"inside-table\", 'false');\n\n            if ($(current).attr('contextref') && $(current).attr('id')) {\n\n                $(current).attr('ix', $(current).attr('id'));\n                $(current).attr('id', this.updateMap($(current)?.attr('ix') as string, $(current), currentSlug));\n            }\n            if (!$(current).prop('tagName').toLowerCase().endsWith(\"continuation\") &&\n                $(current).attr(\"continuedat\")\n            ) {\n                $(current).attr(\"continued-main-fact\", 'true');\n            }\n\n            if ($(current).attr('contextref') && !$(current).attr('id')) {\n                // for the facts in the html that have no ids...\n                const getByNameAndContextRef = (searchContextref: string | undefined, searchName: string | undefined) => {\n                    for (const [key, value] of map.entries()) {\n                        if (value.contextRef === searchContextref && value.name === searchName) {\n                            return key;\n                        }\n                    }\n                };\n                const mapKey = getByNameAndContextRef($(current).attr('contextref'), $(current).attr('name'));\n                if (mapKey) {\n\n                    $(current).attr('ix', mapKey);\n                    $(current).attr('id', mapKey);\n                    this.updateMap($(current)?.attr('ix') as string, $(current), currentSlug);\n                } else {\n                    const log: Logger<ILogObj> = new Logger();\n                    log.error(`Fact [name] && [contextRef] could not be located in the Map Object.`);\n                }\n            }\n            $(current).wrap(`<span></span>`);\n        });\n        // TODO is this a good idea?\n        // $(`${namespace}\\\\:header`).remove();\n        const endPerformance = performance.now();\n        if (LOGPERFORMANCE) {\n            const items = foundElements.length;\n            const log: Logger<ILogObj> = new Logger();\n            log.debug(`FetchAndMerge.attributeFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\n        }\n\n        return { xhtml: $.html(), map };\n    }\n\n    //WTF is `ix`??  Should this be `id`?\n    updateMap(ix: string, element: cheerio.Cheerio<cheerio.Element>, currentSlug: string): string {\n        if(!this.activeInstance.map.has(ix))\n        {\n            console.error(\"Cannot update map -- missing key:\", ix);\n            return \"\";\n        }\n\n        this.activeInstance.map.set(\n            ix,\n            {\n                ...this.activeInstance.map.get(ix) as SingleFact,\n                raw: element.text(),\n                format: element.attr('format') ? element.attr('format') : null,\n                isAdditional: element.parents().prop('tagName').toLowerCase().endsWith(':hidden'),\n                isCustom: element.attr('name')?.split(':')[0].toLowerCase() === this.customPrefix,\n                isAmountsOnly: element.prop('tagName')?.split(':')[1].toLowerCase() === 'nonfraction',\n                isTextOnly: element.prop('tagName')?.split(':')[1].toLowerCase() === 'nonnumeric',\n                isNegativeOnly: element.attr('sign') === '-',\n                file: currentSlug,\n                scale: (element.attr('scale') ? this.setScaleInfo(element.attr('scale') as unknown as number) : null) || \"\",\n                continuedIDs: [],\n            });\n\n        return this.activeInstance.map.get(ix)!.id;\n    }\n\n    updateValueToRemoveIDs(input: string) {\n        const $ = cheerio.load(input, { xml: false });\n        $('[id]').each(function () {\n            $(this).removeAttr('id');\n        });\n        // we also wrap the entirity of the html in a simple div\n        $('body ').wrapInner('<div></div>');\n        return $.html('body');\n    }\n\n    isFactAmountsOnly(input: string) {\n        return /^-?\\d+\\d*$/.test(input);\n    }\n\n    isFactNegativeOnly(input: string) {\n        return this.isFactAmountsOnly(input) && input.startsWith('-');\n    }\n\n    isFactHTML(input: string) {\n        return /<\\/?[a-z][\\s\\S]*>/i.test(input);\n    }\n\n    getTextFromHTML(input: string) {\n        if (this.isFactHTML(input)) {\n            const $ = cheerio.load(input);\n            return $.text();\n        }\n        return input;\n    }\n\n    setPeriodText(context: Context[]) {\n        context = Array.isArray(context) ? context : [context];\n        context?.forEach((current) => {\n            if (current.period) {\n                if (current.period.instant) {\n                    const date = new Date(current.period.instant._text);\n                    current.period._array = [`${date.getUTCMonth() + 1}/${date.getUTCDate()}/${date.getUTCFullYear()}`];\n                    current.period._text = `As of ${date.getUTCMonth() + 1}/${date.getUTCDate()}/${date.getUTCFullYear()}`;\n\n                } else if (current.period.startDate && current.period.endDate) {\n                    const startDate = new Date(current.period.startDate._text);\n                    const endDate = new Date(current.period.endDate._text);\n\n                    const yearDiff = endDate.getUTCFullYear() - startDate.getUTCFullYear();\n                    const monthDiff = endDate.getUTCMonth() - startDate.getUTCMonth() + (yearDiff * 12);\n                    current.period._array = [\n                        `${startDate.getUTCMonth() + 1}/${startDate.getUTCDate()}/${startDate.getUTCFullYear()}`,\n                        `${endDate.getUTCMonth() + 1}/${endDate.getUTCDate()}/${endDate.getUTCFullYear()}`\n                    ];\n                    if (monthDiff <= 0) {\n                        current.period._text = `${startDate.getUTCMonth() + 1}/${startDate.getUTCDate()}/${startDate.getUTCFullYear()} - ${endDate.getUTCMonth() + 1}/${endDate.getUTCDate()}/${endDate.getUTCFullYear()}`;\n                    } else {\n                        current.period._text = `${monthDiff} months ending ${endDate.getUTCMonth() + 1}/${endDate.getUTCDate()}/${endDate.getUTCFullYear()}`;\n                    }\n                } else {\n                    const log: Logger<ILogObj> = new Logger();\n                    log.error(`\\nFact Period is NEITHER Instant nor Start / End`);\n                }\n            }\n        });\n    }\n\n    setPeriodInfo(contextRef: string, context: [Context]) {\n        // we go through and find the 'id' in context that equals contextRef\n        context = Array.isArray(context) ? context : [context];\n        const factContext = context?.find((element) => {\n            return element._attributes.id === contextRef;\n        });\n        if (factContext && factContext.period) {\n            return factContext.period._text;\n        }\n    }\n\n    setPeriodDatesInfo(contextRef: string, context: [Context]) {\n        // we go through and find the 'id' in context that equals contextRef\n        context = Array.isArray(context) ? context : [context];\n        const factContext = context?.find((element) => {\n            return element._attributes.id === contextRef;\n        });\n        if (factContext && factContext.period) {\n            return factContext.period._array;\n        }\n    }\n\n    setSegmentData(context: Context | undefined) {\n        let context2 = Array.isArray(context) ? context : [context];\n        context2.forEach((current) => {\n            if (current.entity && current.entity.segment) {\n                current.entity.segment.data = Object.keys(current.entity.segment).map((key) => {\n                    if (Array.isArray(current.entity.segment[key])) {\n                        return current.entity.segment[key].map((segment: { _attributes: { dimension: string; }; _text: string; }) => {\n                            return {\n                                axis: segment._attributes.dimension,\n                                dimension: segment._text,\n                                type: key.endsWith('explicitMember') ? 'explicit' : 'implicit'\n                            }\n                        });\n                    } else {\n                        return {\n                            axis: current.entity.segment[key]._attributes.dimension,\n                            dimension: current.entity.segment[key]._text ?\n                                current.entity.segment[key]._text :\n                                current.entity.segment[key][Object.keys(current.entity.segment[key]).filter(element => !element.startsWith('_'))[0]]?._text,\n                            type: key.endsWith('explicitMember') ?\n                                'explicit' :\n                                'implicit',\n                            value: !key.endsWith('explicitMember') ?\n                                current.entity.segment[key][Object.keys(current.entity.segment[key])[1]]._text :\n                                null\n                        };\n                    }\n                });\n            }\n        });\n    }\n\n    setSegmentInfo(contextRef: string, context: [Context]) {\n        context = Array.isArray(context) ? context : [context];\n        const factContext = context?.find((element) => {\n            return element._attributes.id === contextRef;\n        });\n        if (factContext?.entity?.segment) {\n            return factContext.entity.segment.data;\n        }\n    }\n\n    setMeasureText(unit: Units[] = []) {\n        if (!Array.isArray(unit)) {\n            unit = [unit]\n        }\n\n        //Note: we need to first trick TS into believing a Units is really a UnitsAdditional\n        //TODO: have `setMeasureText` take UnitsAdditional instead\n        unit.map(u => u as UnitsAdditional)\n            .forEach((current: UnitsAdditional) => {\n                if (current && current.measure) {\n                    const measure = current.measure._text.includes(':') ?\n                        current.measure._text.split(':')[1].toUpperCase() :\n                        current.measure._text.toUpperCase();\n                    current._text = measure;\n                } else if (current && current.divide) {\n                    const numerator = current.divide.unitNumerator.measure._text.includes(':') ?\n                        current.divide.unitNumerator.measure._text.split(':')[1].toUpperCase() :\n                        current.divide.unitNumerator.measure._text.toUpperCase();\n\n                    const denominator = current.divide.unitDenominator.measure._text.includes(':') ?\n                        current.divide.unitDenominator.measure._text.split(':')[1].toUpperCase() :\n                        current.divide.unitDenominator.measure._text.toUpperCase();\n\n                    current._text = `${numerator} / ${denominator}`;\n                }\n            });\n    }\n\n    setMeasureInfo(unitRef: string, unit: Units) {\n        if (unit) {\n            const factUnit = Array.isArray(unit) ? unit.find((element: { _attributes: { id: string; }; }) => {\n                return element._attributes.id === unitRef;\n            }) : [unit].find((element: { _attributes: { id: string; }; }) => {\n                return element._attributes.id === unitRef;\n            });\n\n            if (\n                factUnit &&\n                (Object.prototype.hasOwnProperty.call(factUnit, 'measure') || Object.prototype.hasOwnProperty.call(factUnit, 'divide'))\n            ) {\n                return factUnit._text;\n            }\n        }\n    }\n\n    setScaleInfo(scale: number) {\n        const scaleOptions: Record<string, string> = {\n            0: \"Zero\",\n            1: \"Tens\",\n            2: \"Hundreds\",\n            3: \"Thousands\",\n            4: \"Ten thousands\",\n            5: \"Hundred thousands\",\n            6: \"Millions\",\n            7: \"Ten Millions\",\n            8: \"Hundred Millions\",\n            9: \"Billions\",\n            10: \"Ten Billions\",\n            11: \"Hundred Billions\",\n            12: \"Trillions\",\n            \"-1\": \"Tenths\",\n            \"-2\": \"Hundredths\",\n            \"-3\": \"Thousandths\",\n            \"-4\": \"Ten Thousandths\",\n            \"-5\": \"Hundred Thousandths\",\n            \"-6\": \"Millionths\"\n        };\n        \n        return scaleOptions[scale] || null;\n    }\n\n    setDecimalsInfo(decimals: string): string | null {\n        const decimalsOptions: Record<string, string> = {\n            \"-1\": \"Tens\",\n            \"-2\": \"Hundreds\",\n            \"-3\": \"Thousands\",\n            \"-4\": \"Ten thousands\",\n            \"-5\": \"Hundred thousands\",\n            \"-6\": \"Millions\",\n            \"-7\": \"Ten Millions\",\n            \"-8\": \"Hundred Millions\",\n            \"-9\": \"Billions\",\n            \"-10\": \"Ten Billions\",\n            \"-11\": \"Hundred Billions\",\n            \"-12\": \"Trillions\",\n            1: \"Tenths\",\n            2: \"Hundredths\",\n            3: \"Thousandths\",\n            4: \"Ten Thousandths\",\n            5: \"Hundred Thousandths\",\n            6: \"Millionths\",\n        };\n\n        return decimalsOptions[decimals] || null;\n    }\n\n    setSignInfo(sign: string): string | null {\n        const signOptions: Record<string, string> = {\n            '-': 'Negative',\n            '+': 'Positive',\n        };\n        \n        return signOptions[sign];\n    }\n\n    /**\n     * Description\n     * @param {any} ftObj:object\n     * @param {any} result?:string|undefined\n     * @returns {any} concatenated text from all footnote nodes, joined by a ' '\n     */\n    accumulateFootnote(ftObj: LinkFootnote | Record<string, unknown>, result = \"\") {\n        const truncateFootnoteTo = 100;\n\n        if (result?.length > truncateFootnoteTo) {\n            result = result.substring(0, truncateFootnoteTo).substring(0, result.lastIndexOf(\" \") + 1);\n            return result += ' ...';\n        }\n\n        // let text = ''; //accumulate \"mixed-content\" text to apply after depth first descent\n        // Object.keys(ftObj).forEach(node => {\n        Object.entries(ftObj).forEach(([key, value]) =>\n        {\n            if (key == \"_text\") {\n                result += String(value);\n            }\n            else if (Array.isArray(value)) {\n                value.forEach(childNode => {\n                    result = this.accumulateFootnote(childNode, result);\n                })\n            }\n            else if(key.substring(0,6) == \"xhtml:\") {\n                result = this.accumulateFootnote(value, result);\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Description\n     * @param {any} id:string\n     * @param {any} footnotes:{\"link:loc\":LinkLOC[]\n     * @param {any} \"link:footnote\":LinkFootnote[];\"link:footnoteArc\":LinkFootnoteArc[];}\n     * @param {string} asXmlString footnotes part of fetched xml text\n     * @returns {any} renderable footnote text (or xml string) to be displayed in fact modal\n     * todo: handle incoming footnotes.asXmlString or footnotes.xmlExpanded to show all content (in order) instead of just text\n     * todo: handle images, tables, ...other html elements (currently just concatenating text content)\n     * the above todos are WIP and are handled when useFetchedFootnoteXmlStrings is set to true.\n     */\n    setFootnoteInfo(id: string, footnotes: {\n        \"link:loc\": LinkLOC[],\n        \"link:footnote\": LinkFootnote[],\n        \"link:footnoteArc\": LinkFootnoteArc[],\n        \"asXmlString\": string,\n    }) {\n        if (footnotes && footnotes['link:footnoteArc']) {\n            const factFootnote = Array.isArray(footnotes['link:footnoteArc']) \n                ? footnotes['link:footnoteArc'].find((element) => element._attributes['xlink:from'] === id ) \n                : [footnotes['link:footnoteArc']].find((element) => element._attributes['xlink:from'] === id )\n            if (factFootnote) {\n                if (footnotes['link:footnote']) {\n                    if (Array.isArray(footnotes['link:footnote'])) {\n                        const actualFootnote = footnotes['link:footnote']?.find((element) => {\n                            return element._attributes.id === factFootnote._attributes['xlink:to'];\n                        });\n\n                        const useFetchedFootnoteXmlStrings = false;\n                        const useParsedFootnote = !useFetchedFootnoteXmlStrings;\n\n                        if (useParsedFootnote) {\n                            return this.accumulateFootnote(actualFootnote || {} as Record<string, unknown>);\n                        }\n\n                        // Rest of this if block is WIP for rendering all div types in footnote cell\n\n                        // GO FIND PART OF footnotes.xmlString that corresponds to actual footnote\n                        // return that substring ... so you can render it in fact-pages.ts\n                        // we only need '<link:footnote ... > string for each footnote to render\n                        // find all <link:footnote ... > xml strings and put in array\n                        // then find the one that matches the xlink:to value with its id\n\n                        const startTagRegex = /<link:footnote /gi; \n                        let startTagResults: RegExpExecArray | null = null;\n                        const footnoteStartIndices:number[] = [];\n                        while(!!(startTagResults = startTagRegex.exec(footnotes.asXmlString))) {\n                            footnoteStartIndices.push(startTagResults.index);\n                        }\n\n                        const endTagRegex = /<\\/link:footnote>/gi; \n                        let endTagResults: RegExpExecArray | null = null;\n                        const footnoteEndIndices:number[] = [];\n                        while(!!(endTagResults = endTagRegex.exec(footnotes.asXmlString))) {\n                            footnoteEndIndices.push(endTagResults.index + ('</link:footnote>').length);\n                        }\n\n                        const footnotesAsXmlStrings: string[] = [];\n\n                        footnoteStartIndices.forEach((start, indexInArrayOfStarts) => {\n                            const pluckedFootnote = footnotes.asXmlString.substring(start, footnoteEndIndices[indexInArrayOfStarts]);\n                            footnotesAsXmlStrings.push(pluckedFootnote);\n                        })\n\n                        const relevantFootnoteAsXmlString = footnotesAsXmlStrings.find(fn => {\n                            return fn.indexOf(factFootnote._attributes['xlink:to']) != -1;\n                        })\n\n                        return relevantFootnoteAsXmlString;\n                    } else {\n                        // TODO we need way more cases\n                        //uhh, no we don't, because the first 2 cases cover EVERYTHING\n                        if (!Array.isArray(footnotes['link:footnote']._text)) {\n                            return footnotes;\n                            // return footnotes['link:footnote']._text;\n                        } else if (Array.isArray(footnotes['link:footnote']._text)) {\n                            return footnotes['link:footnote']._text.join('');\n                        } else if (footnotes['link:footnote']['xhtml:span']) {\n                            return footnotes['link:footnote']['xhtml:span']._text;\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    getCalculationWeight(weight: number) {\n        if (weight) {\n            return weight > 0 ?\n                `Added to parent(${weight.toFixed(2)})` :\n                `Substracted from parent(${weight.toFixed(2)})`\n        }\n        return 'Not Available.';\n    }\n\n    getCalculationParent(parent: string) {\n        if (parent) {\n            return parent.replace('_', ':');\n        }\n        return 'Not Available.';\n    }\n}","/* Created by staff of the U.S. Securities and Exchange Commission.\n * Data and content created by government employees within the scope of their employment \n * are not subject to domestic copyright protection. 17 U.S.C. 105.\n */\n\nimport DOMPurify from \"dompurify\";\nimport { Constants } from \"../constants/constants\";\nimport { toBottomOfInlineDoc } from \"../pagination/inlineDocPagination\";\n\nexport const cleanSubstring = (orig: string, from: string, to: string) => {\n    return orig.substring(orig.search(from), orig.search(to) + to.length);\n}\n\nexport const convertToSelector = (input: string, sanitize=true) => {\n    const normalizedSelector = input.replaceAll('/', '-')\n        .replaceAll(' ', '-')\n        .replaceAll('#', '-')\n        .replaceAll('.', '-')\n    if (sanitize)\n        return DOMPurify.sanitize(normalizedSelector);\n    else {\n        return normalizedSelector;\n    }\n}\n\n// WIP\nexport const xmlToDom = (xmlNode: Node): Node | null => {\n    \n    if (!PRODUCTION) {\n        console.log('node.nodeType', xmlNode.nodeType)\n        console.log('node', xmlNode)\n    }\n    if (xmlNode.nodeType === 1) { // Element node\n        const element = document.createElement(xmlNode.nodeName)\n\n        // add attributes\n        if(xmlNode instanceof Element)\n        {\n            for(let attr of xmlNode.attributes)\n            {\n                element.setAttributeNS(attr.namespaceURI, attr.nodeName, attr.nodeValue || \"\");\n            }\n        }\n        \n        // recursively process child nodes\n        for(let child of xmlNode.childNodes)\n        {\n            const childNode = xmlToDom(child);\n            if (childNode) {\n                element.appendChild(childNode);\n            }\n        }\n\n        return element;\n    } else if (xmlNode.nodeType === 3) { // Text node\n        return document.createTextNode(xmlNode.nodeValue || \"\");\n    }\n    return null;\n}\n\n// WIP\nexport const findAllTagTypeInMarkupString = (markup: string, openTag: string, closeTag: string) => {\n    const allTags: string[] = [];\n\n    const startTagRegex = RegExp(openTag, 'gi') \n    let startTagResults = startTagRegex.exec(markup);\n    const footnoteStartIndices: number[] = [];\n    while(startTagResults) {\n        footnoteStartIndices.push(startTagResults.index);\n        startTagResults = startTagRegex.exec(markup);\n    }\n\n    const endTagRegex = RegExp(closeTag, 'gi');\n    let endTagResults = endTagRegex.exec(markup);\n    const footnoteEndIndices: number[] = [];\n    while(endTagResults) {\n        footnoteEndIndices.push(endTagResults.index + closeTag.length);\n        endTagResults = endTagRegex.exec(markup);\n    }\n\n    footnoteStartIndices.forEach((start, indexInArrayOfStarts) => {\n        const pluckedFootnote = markup.substring(start, footnoteEndIndices[indexInArrayOfStarts]);\n        allTags.push(pluckedFootnote);\n    });\n\n    return allTags;\n}\n\n\nexport function ixScrollTo(sectionElem: HTMLElement): void\n{\n    if(elemNearBottom(sectionElem))\n    {\n        toBottomOfInlineDoc();\n    }\n    else\n    {\n        sectionElem?.scrollIntoView({ behavior: \"smooth\", block: \"start\", inline: \"nearest\" });\n    }\n}\n\n/**\n * Determine if the provided element is within 1vh of the bottom of the screen.\n * @param target The Element to which we should scroll.\n * @param parentElem Not the scrollable parent. Probably the first descendent thereof.  Needs to be full-height, non-scrollable.\n * @param scrollableParent An ancestor of `target` that scrolls.\n * @returns boolean\n */\nfunction elemNearBottom(target: HTMLElement, parentElem?: HTMLElement, scrollableParent?: HTMLElement): boolean {\n    if (!parentElem) {\n        const currentInstance = Constants.getInstanceFiles.find(element => element.current);\n        const currentXHTML = currentInstance?.xhtmls.find(element => element.current);\n        if (currentXHTML?.slug) {\n            parentElem = document.querySelector<HTMLElement>(`section[filing-url=\"${currentXHTML?.slug}\"]`) || undefined;\n        }\n    }\n    if (!scrollableParent) {\n        const currentInstance = Constants.getInstanceFiles.find(element => element.current);\n        const currentXHTML = currentInstance?.xhtmls.find(element => element.current);\n        if (currentXHTML?.slug) {\n            scrollableParent = document.getElementById('dynamic-xbrl-form') || undefined;\n        }\n    }\n\n    const viewHeight = scrollableParent?.offsetHeight || 0;\n    const parentHt = parentElem?.offsetHeight || 0;\n\n    let distTopOfTargetToTopOfScrollableParent = 0;\n    let currentElement = target;\n\n    while (currentElement && currentElement !== parentElem) {\n        distTopOfTargetToTopOfScrollableParent += currentElement.offsetTop || 0;\n        currentElement = currentElement.offsetParent as HTMLElement;\n    }\n\n    if (scrollableParent == document.getElementById('dynamic-xbrl-form')) {\n        distTopOfTargetToTopOfScrollableParent -= Constants.getNavBarsHeight();\n    }\n\n    return distTopOfTargetToTopOfScrollableParent > parentHt - viewHeight;\n}\n","/* Created by staff of the U.S. Securities and Exchange Commission.\n * Data and content created by government employees within the scope of their employment\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\n */\n\nimport { FetchAndMerge } from '../fetch-merge/fetch-merge';\n\nself.onmessage = ({ data }) => {\n    const fetchAndMerge = new FetchAndMerge(data);\n    fetchAndMerge.init().then(data => {\n        self.postMessage(data);\n    });\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [397], () => (__webpack_require__(4477)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.\" + \"763d759075c903583111\" + \".min.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/ixviewer-plus/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t549: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkixviewer_2\"] = self[\"webpackChunkixviewer_2\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","version","featureSet","scrollPosition","window","localStorage","getItem","hoverOption","getHTMLAttributes","getPaginationPerPage","getHtmlOverallFactsCount","getMetaSourceDocuments","getMetaTags","getInstanceFiles","getInlineFiles","sections","setSections","sessionStorage","setItem","JSON","stringify","getSectionsFromSessionStorage","sectionsFromLocal","parse","getStdRef","getFormInformation","getMetaCustomPrefix","getMetaDts","getMetaDocuments","input","getScrollPosition","document","getElementById","scrollTop","getNavBarsHeight","querySelector","offsetHeight","getFactAttrsFromAnchorProps","section","fact","instance","uniqueAnchor","name","contextRef","file","baseRef","ancestors","firstAnchor","mapCategoryName","isStandard","lowerCaseKey","toLowerCase","noStatementCatNameMap","standardCatNameMap","Object","prototype","hasOwnProperty","call","console","info","activeInstance","metaVersion","this","absolute","params","customPrefix","instances","std_ref","init","XHTMLandInstance","initialLoad","Promise","all","fetchXHTML","fetchInstancesXml","then","xhtml","instXml","errors","filter","element","length","error","message","map","current","forEach","index","xhtmls","loaded","xml","mergeAllResponses","fetchMeta","fetchSummary","metalinks","filingSummary","response","push","metaLinksSections","values","filingSummaryReports","MyReports","Report","instanceHtmSlugs","r","_attributes","includes","inst","instanceHtm","xmlUrl","replace","getInstancesInfoFromFilingSummary","metaLinksReports","filingSummaryInputFiles","InputFiles","File","Array","isArray","reportsContainStatements","MenuCategory","_text","some","menuCategory","metaReport","Number","menuCat","subGroupType","groupType","shortName","mrFact","ancestorsRelevant","a","reverse","join","inlineFactSelector","addFactProps","reportFileInfo","fileName","original","instanceDocName","doctype","addInstanceProps","menuCatMapped","domId","sanitize","normalizedSelector","replaceAll","convertToSelector","buildSectionsArrayFlatter","decodeWorkstationXmlInHtml","isWorkstation","html","closingXml","substring","indexOf","alert","promises","resolve","url","ixvUrl","redline","fetch","headers","mode","credentials","status","text","Error","toString","doc","data","xhtmlData","catch","jsonUrl","json","XHTMLSlug","lastIndexOf","startsWith","instanceFileNames","keys","split","instanceObjects","entries","instanceIndex","currentInstance","instData","report","assign","slug","Map","metaInstance","filingSummXmlUrl","summary","xmlData","convertedXml","compact","FilingSummary","_xmlUrl","xmlInstance","fetchedXMlString","instanceXmlAsJsonCompact","xbrl","buildInitialFactMap","extractSections","formInformation","extractFormInformation","enrichFactMapWithMetalinksData","nsprefix","prepareXHTMLForCurrentInstance","instanceXml","fileSlug","prefix","options","endsWith","getInstancePrefix","xbrlKey","contextKey","unitKey","context","unit","footnote","setPeriodText","setSegmentData","setMeasureText","factCounter","key","attributes","id","set","ix","value","isFactHTML","updateValueToRemoveIDs","isAmountsOnly","isFactAmountsOnly","isTextOnly","isNegativeOnly","isFactNegativeOnly","isHTML","period","setPeriodInfo","period_dates","setPeriodDatesInfo","segment","setSegmentInfo","measure","setMeasureInfo","unitRef","scale","setScaleInfo","decimals","setDecimalsInfo","sign","setSignInfo","setFootnoteInfo","isEnabled","isHighlight","isSelected","content","getTextFromHTML","meta","metaCopy","tag","currentFact","factNameTag","factObjectMl","auth_ref","references","authRef","dimensions","dimension","Boolean","axis","concat","Set","singleReference","reduce","accumulator","findIndex","returnObject","fill","calculation","calculations","factCalculationProp","result","sectionElement","role","label","longName","getCalculationWeight","weight","getCalculationParent","parentTag","lang","labels","oldObject","newObject","property","finalResult","charAt","toUpperCase","slice","tempCurrent","documentation","definitions","Documentation","crdr","balance","xbrltype","localname","nsuri","presentation","$","hiddenFacts","fixImages","fixLinks","redLineFacts","excludeFacts","updates","attributeFacts","foundImagesArray","performance","now","from","searchParams","URLSearchParams","delete","imgElem","imgSrc","attr","imgFileName","log","imageSlug","attribs","href","updatedStyle","css","hiddenElement","cheerioElement","prop","removeAttr","debug","foundElements","addClass","currentSlug","closest","updateMap","mapKey","searchContextref","searchName","getByNameAndContextRef","wrap","has","get","raw","format","isAdditional","parents","isCustom","continuedIDs","each","wrapInner","test","instant","date","Date","_array","getUTCMonth","getUTCDate","getUTCFullYear","startDate","endDate","yearDiff","monthDiff","factContext","find","entity","type","u","divide","numerator","unitNumerator","denominator","unitDenominator","factUnit","accumulateFootnote","ftObj","String","childNode","footnotes","actualFootnote","toFixed","parent","self","onmessage","FetchAndMerge","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","n","getter","__esModule","d","definition","o","defineProperty","enumerable","f","e","chunkId","miniCssF","obj","Symbol","toStringTag","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop"],"sourceRoot":""}