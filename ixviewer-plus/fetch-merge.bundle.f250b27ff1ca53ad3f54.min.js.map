{"version":3,"file":"fetch-merge.bundle.f250b27ff1ca53ad3f54.min.js","mappings":";uBAAIA,ECAAC,+hBCYJ,aAkDI,WAAYC,GAcRC,KAAKC,SAAWF,EAAME,SACtBD,KAAKE,QAAUH,EAAMG,QACrBF,KAAKG,IAAMJ,EAAMI,IACjBH,KAAKI,OAASL,EAAMK,OACpBJ,KAAKK,aAAeN,EAAMM,aAC1BL,KAAKM,SAAWP,EAAMO,SACtBN,KAAKO,QAAUR,EAAMQ,OACzB,CA8pCJ,OA5pCI,YAAAC,KAAA,sBAEUC,EAAmB,SAACH,EAAUI,GAChC,YADgC,IAAAA,IAAAA,GAAA,GACzBC,QAAQC,IAAI,CACf,EAAKC,aACL,EAAKC,kBACNC,MAAK,SAACC,GACL,IAAMC,EAASD,EAAaE,QAAO,SAAAC,GAAW,QAAAA,GAAUC,OAAOC,UAAUC,eAAeC,KAAKJ,EAAS,QAAxD,IAC9C,OAAIF,EAAOO,OAEA,CACHZ,IAAK,CAAEa,OAAO,EAAMC,QAFFT,EAAOd,KAAI,SAAAwB,GAAW,OAAAA,EAAQD,OAAR,OAKhDV,EAAa,GAAGY,SAAQ,SAACD,EAASE,GAC9B,EAAKC,gBAAgBC,OAAOF,GAAOG,QAAS,EAC5C,EAAKF,gBAAgBC,OAAOF,GAAOI,MAAQN,EAAQM,KACvD,IACA,EAAKH,gBAAgBI,IAAOlB,EAAa,GACzC,EAAKmB,kBAAkBzB,GAChB,CACHE,IAAK,CAAEN,SAAWI,EAAcJ,EAASA,SAAWA,EAAW8B,SAAU,EAAKA,SAAU7B,QAAS,EAAKA,UAE9G,GACJ,EAwGA,OAAsB,OAAlBP,KAAKM,UACLN,KAAK8B,gBAAkB9B,KAAKM,SAASY,QAAO,SAAAC,GAAW,OAAAA,EAAQQ,OAAR,IAAiB,GACjElB,EAAiBT,KAAKM,WAvGtBK,QAAQC,IAAI,CACf,EAAKyB,YACL,EAAKC,iBACNvB,MAAK,SAACC,SAGL,GAFA,EAAKuB,YAAcvB,EAAa,GAAGwB,QACnC,EAAKjC,QAAUS,EAAa,GAAGT,QAC3BS,EAAayB,MAAK,SAACtB,GAAY,OAAAA,EAAQM,KAAR,IAE/B,MAAO,CACHb,IAAK,CAAEa,OAAO,EAAMC,QAAS,CAFZV,EAAa0B,MAAK,SAACvB,GAAY,OAAAA,EAAQM,KAAR,IAELC,WAG/C,EAAKI,gBAA0C,QAAxB,EAAAd,EAAa,GAAGV,gBAAQ,eAAEY,QAAO,SAAAC,GAAW,OAAAA,EAAQQ,OAAR,IAAiB,GAEpF,IAAM,EAAkB,SAAC5B,GACrB,IAAM4C,EAAU,CACZ,MAAS,QACT,SAAY,gCACZ,UAAa,uBACb,WAAc,uBACd,WAAc,oCACd,MAAS,gCACT,SAAY,sBACZ,OAAU,eACV,QAAW,gBACX,WAAc,aACd,aAAgB,eAChB,YAAe,eACf,cAAe,gBAEnB,OAAIA,EAAQ5C,GACD4C,EAAQ5C,GAEZ,2BACX,EACM,EAAoBqB,OAAOwB,OAAO5B,EAAa,GAAGoB,UA0D5D,OAzDI,EAAKA,SAAWpB,EAAa,GAAG6B,UAAUC,OAAOC,QAAO,SAACC,EAAarB,GAClE,GAAIA,GAAWA,EAAQsB,cAAgBtB,EAAQuB,UAAYvB,EAAQwB,WAAaxB,EAAQyB,YAAa,CACjG,IAAIC,EAAO,CAAEC,KAAM,GAAIC,WAAY,GAAIjD,SAAU,MAC3CkD,EAAa,EAAkBd,MAAK,SAAAvB,GAAW,OAAAA,EAAQsC,YAAc9B,EAAQwB,UAAUO,KAAxC,IACjDF,IACAH,EAAK/C,SAAWkD,EAAWlD,SACvBkD,EAAWG,cACXN,EAAKC,KAAOE,EAAWG,aAAaL,KACpCD,EAAKE,WAAaC,EAAWG,aAAaJ,WAC1CF,EAAKO,KAAOJ,EAAWG,aAAaE,SAC7BL,EAAWM,aAClBT,EAAKC,KAAOE,EAAWM,YAAYR,KACnCD,EAAKE,WAAaC,EAAWM,YAAYP,WACzCF,EAAKO,KAAOJ,EAAWM,YAAYD,SAInCR,EAAO,MAGf,IAAMxB,EAAQmB,EAAYe,WAAU,SAAA5C,GAAW,OAAAA,EAAQmC,OAAS,EAAgB3B,EAAQsB,aAAaS,MAAtD,KAChC,IAAX7B,GAAgBwB,GAChBL,EAAYnB,GAAOmC,SAASC,KACxB,CACIC,MAAOvC,EAAQuB,SAASQ,MACxBJ,KAAM3B,EAAQwB,UAAUO,MACxBL,KAAMA,IAIdL,EAAYnB,GAAOmC,SAASE,MAAK,SAACC,EAAOC,GACrC,OAAID,EAAMD,KAAOE,EAAOF,MACZ,EAERC,EAAMD,KAAOE,EAAOF,KACb,EAEJ,CACX,KACOb,GACPL,EAAYiB,KAAK,CACbX,KAAM,EAAgB3B,EAAQsB,aAAaS,OAC3CM,SAAU,CACN,CACIE,MAAOvC,EAAQuB,SAASQ,MACxBJ,KAAM3B,EAAQwB,UAAUO,MACxBE,KAAMjC,EAAQyB,YAAY9C,SAC1B+C,KAAMA,MAO1B,OAAOL,CACX,GAAG,IAEArC,QAAQC,IAAI,CACfH,EAAiBO,EAAa,IAAI,KACnCD,MAAK,SAAAsD,GACJ,OAAOA,EAAK,EAChB,GACJ,GASR,EAEA,YAAAC,2BAAA,SAA2BC,EAAwBC,EAAcC,GAC7D,OAAKF,EACAC,EAAKE,UAAU,EAAE,KAAKC,cAAcC,SAAS,iBAclDJ,GADAA,GADAA,GADAA,GADAA,EAAOA,EAAKK,WAAW,OAAQ,MACnBA,WAAW,OAAQ,MACnBA,WAAW,SAAU,MACrBA,WAAW,SAAU,MACrBA,WAAW,QAAS,MACpBH,UAAUF,EAAKM,QAAQ,kBAAmBN,EAAKM,QAAQL,GAAcA,EAAWjD,QAdnFgD,EAAKI,SAAS,+CACbG,QAAQtD,MAAM,mCACduD,OAAOC,MAAM,mCACN,IAELT,EAPeA,CAiB/B,EAEA,YAAA3D,WAAA,wBACUqE,EAA+B,QAApB,EAAAlF,KAAK8B,uBAAe,eAAEC,OAAO5B,KAAI,SAACwB,GAC/C,OAAO,IAAIhB,SAAQ,SAACwE,GAChB,IAAMZ,EAAgB5C,EAAQyD,IAAIR,SAAS,uBACvCS,EAAS1D,EAAQyD,IACjBb,IACAc,EAASA,EAAOC,QAAQ,OAAQ,aAEpCC,MAAMF,EAAQ,CACVG,QAAS,CACL,eAAgB,yBAEpBC,KAAM,UACNC,YAAa,YACd3E,MAAK,SAAC4E,GACL,GAAIA,EAASC,QAAU,KAAOD,EAASC,QAAU,IAC7C,OAAOD,EAASE,OAEhB,MAAMC,MAAM,UAAGH,EAASC,OAAOG,WAAU,6BAAqB,EAAK3F,OAAO4F,IAAG,KAErF,IAAGjF,MAAK,SAACsD,GAEL,IAAM4B,EAAY,EAAK3B,2BAA2BC,EAAeF,EAAM,WACvEc,EAAQ,CAAElD,MAAOgE,GACrB,IAAGC,OAAM,SAACzE,GACN0D,EAAQ,CAAE1D,OAAO,EAAMC,QAASD,GACpC,GACJ,GACJ,IACA,OAAOd,QAAQC,IAAIsE,GAAUnE,MAAK,SAACoF,GAC/B,OAAOA,CACX,GACJ,EAEA,YAAA9D,UAAA,sBAmBI,OAAO,IAAI1B,SAAQ,SAACwE,GAChB,OAAOI,MAAM,EAAKnF,OAAOgG,UAAW,CAAEV,YAAa,YAAa3E,MAAK,SAAC4E,GAClE,GAAIA,EAASC,QAAU,KAAOD,EAASC,QAAU,IAC7C,OAAOD,EAASU,OAEhB,MAAMP,MAAMH,EAASC,OAAOG,WAEpC,IAAGhF,MAAK,SAACsD,GAEL,IAAIiC,EAAY,EAAKlG,OAAO4F,IAAIO,OAAO,EAAKnG,OAAO4F,IAAIQ,YAAY,KAAO,IACtEF,EAAUG,WAAW,uBAAyBH,EAAUG,WAAW,gBACnEH,EAAY,EAAKlG,OAAO4F,IAAIO,OAAO,EAAKnG,OAAO4F,IAAIQ,YAAY,aAAe,IAElF,IAAME,EAAetF,OAAOuF,KAAKtC,EAAK/D,UAAUsG,OAAOC,MAAM,SACzDzE,EAAW,CAAC,EAChB,IAAIsE,EAAa9B,SAAS0B,GAgCtB,MAAMR,MAAM,qCA/BZ,IAAMgB,EAAkB1F,OAAOuF,KAAKtC,EAAK/D,UAAUH,KAAI,SAACwB,EAASE,GAE7DT,OAAOuF,KAAKtC,EAAK/D,SAASqB,GAASoF,QAAQnF,SAAQ,SAACmF,GAChD1C,EAAK/D,SAASqB,GAASoF,OAAOA,GAAQzG,SAAWuB,CACrD,IAEAO,EAAWhB,OAAO4F,OAAO5E,EAAUiC,EAAK/D,SAASqB,GAASoF,QAC1D,IAAMhF,EAASJ,EAAQkF,MAAM,KAAK1G,KAAI,SAACgB,GACnC,MAAO,CACH8F,KAAM9F,EACNiE,IAAK,EAAKhF,OAAO4F,IAAIV,QAAQ,EAAKlF,OAAO,YAAae,GACtDQ,QAASA,EAAQkF,MAAM,KAAKjC,SAAS0B,IAAcnF,IAAY,EAAKf,OAAO,YAC3E4B,QAAQ,EAEhB,IAEMkF,EAAWnF,EAAO5B,KAAI,SAAAgB,GAAW,OAAAA,EAAQ8F,KAAK3B,QAAQ,OAAQ,WAA7B,IACjC6B,EAAUpF,EAAO5B,KAAI,SAAAgB,GAAW,SAAKf,OAAOgG,UAAUd,QAAQ,iBAAkBnE,EAAQ8F,KAAK3B,QAAQ,OAAQ,YAA7E,IACtC,MAAO,CACHhF,SAAUuB,EACVE,OAAQA,EACRJ,QAASA,EAAQkF,MAAM,KAAKjC,SAAS0B,GACrCc,QAASF,EACTC,QAASA,EACTE,aAAcjG,OAAO4F,OAAO3C,EAAK/D,SAASqB,IAC1CxB,IAAK,IAAImH,IAEjB,WACOjD,EAAK/D,SACZ6E,EAAQ,EAAD,GAAG7E,SAAUwG,GAAoBzC,GAAI,CAAEjC,SAAQ,EAAEI,QAAS6B,EAAK7B,WAI1E2C,EAAQd,EACZ,IAAG6B,OAAM,SAACzE,GAAU,OAAA0D,EAAQ,CAAE1D,OAAO,EAAMC,QAAS,UAAGD,EAAK,6BAAqB,EAAKrB,OAAOgG,UAAS,MAAlF,GACxB,GACJ,EAEA,YAAA9D,aAAA,sBACI,OAAO,IAAI3B,SAAQ,SAACwE,GAChB,IAAMZ,EAAgB,EAAKnE,OAAOmH,QAAQ3C,SAAS,uBACnD,OAAOW,MAAM,EAAKnF,OAAOmH,QAAS,CAAE7B,YAAa,YAAa3E,MAAK,SAAC4E,GAChE,GAAIA,EAASC,QAAU,KAAOD,EAASC,QAAU,IAC7C,OAAOD,EAASE,OAEhB,MAAMC,MAAMH,EAASC,OAAOG,WAEpC,IAAGhF,MAAK,SAACsD,GACL,IAAMmD,EAAU,EAAKlD,2BAA2BC,EAAeF,EAAM,oBACrEc,EAAQsC,KAAKC,MAAM,WAAiBF,EAA8B,CAAEG,SAAS,KAASC,cAC1F,IAAG1B,OAAM,SAACzE,GACN0D,EAAQ,CAAE1D,OAAO,EAAMC,QAAS,UAAGD,EAAK,6BAAqB,EAAKrB,OAAOmH,QAAO,MACpF,GACJ,GACJ,EAEA,YAAAzG,cAAA,sBACUoE,EAAWlF,KAAK8B,gBAAgBqF,QAAQhH,KAAI,SAACwB,GAC/C,IAAM4C,EAAgB5C,EAAQiD,SAAS,uBAIvC,OAHIL,IACA5C,EAAUA,EAAQ2D,QAAQ,WAAY,aAEnC,IAAI3E,SAAQ,SAACwE,GAChB,OAAAI,MAAM5D,GAASZ,MAAK,SAAC4E,GACjB,GAAIA,EAASC,QAAU,KAAOD,EAASC,QAAU,IAC7C,OAAOD,EAASE,OAEhB,IAAMf,EAAU,EAAKhD,gBAAgBqF,QAAQrC,QAAQnD,GAIrD,MAHImD,GAAW,GACX,EAAKhD,gBAAgBqF,QAAQU,OAAO/C,EAAS,GAE3CgB,MAAM,UAAGH,EAASC,OAAOG,YAEvC,GAAG,CAAEL,YAAa,YAAa3E,MAAK,SAACsD,GACjC,IAAMmD,EAAU,EAAKlD,2BAA2BC,EAAeF,EAAM,WACrEc,EAAQ,CAAE7E,SAAUkH,GACxB,IAAGtB,OAAM,SAACzE,GACN0D,EAAQ,CAAE1D,OAAO,EAAMC,QAAS,UAAGD,EAAK,yCAC5C,GAfA,GAgBR,IACA,OAAOd,QAAQC,IAAIsE,GAAUnE,MAAK,SAAC+G,GAC/B,IAAMxH,EAAWwH,EAAa5G,QAAO,SAAAC,GAAW,OAAAA,EAAQb,QAAR,IAChD,GAAIA,GAAYA,EAAS,GAAI,CACzB,IAAMyH,EAAmBzH,EAAS,GAAGA,SAC/B0H,EAA2BP,KAAKC,MAAM,WAAiBK,EAAuC,CAAEJ,SAAS,KAS/G,OARIK,EAAyBC,KAAK,qBAQ3BD,EAEP,OAAOF,EAAa,EAE5B,GACJ,EAEA,YAAA3F,kBAAA,SACI+F,GAEAlI,KAAK8B,gBAAgB3B,IAAMH,KAAKmI,gBAAgBnI,KAAK8B,gBAAgBI,KACjEgG,IACAlI,KAAKoC,SAAWpC,KAAKoI,mBAEzBpI,KAAK8B,gBAAgBuG,gBAAkBrI,KAAKsI,uBAAuBtI,KAAK8B,gBAAgBuF,cACxFrH,KAAKuI,kBACLvI,KAAKK,aAAeL,KAAK8B,gBAAgBuF,aAAamB,SACtDxI,KAAKyI,cAGT,EAEA,YAAAN,gBAAA,SAAgB7H,GAAhB,WAMUoI,EAJoB,SAACpI,GACvB,IAAMqC,EAAUvB,OAAOuF,KAAKrG,GAAUY,QAAO,SAAAC,GAAW,OAAAA,EAAQwH,SAAS,QAAjB,IAA2B,GACnF,QAAOhG,GAAUA,EAAQkE,MAAM,KAAK,EACxC,CACe+B,CAAkBtI,GAE3BuI,EAAUH,EAAS,UAAIA,EAAiB,SAAU,OAClDI,EAAaJ,EAAS,UAAIA,EAAiB,YAAa,UACxDK,EAAUL,EAAS,UAAIA,EAAiB,SAAU,OAElDM,EAAU1I,EAASuI,GAASC,GAC5BG,EAAO3I,EAASuI,GAASE,GACzBG,EAAW5I,EAASuI,GAAS,4BAE5BvI,EAASuI,GAASC,UAClBxI,EAASuI,GAASE,UAClBzI,EAASuI,GAASzF,mBAClB9C,EAASuI,GAAS,yBAClBvI,EAASuI,GAAS,qBACzB7I,KAAKmJ,cAAcH,GACnBhJ,KAAKoJ,eAAeJ,GACpBhJ,KAAKqJ,eAAeJ,GACpB,IAAM9I,EAAM,IAAImH,IACZgC,EAAc,aACPC,GAmBP,GAAIC,MAAMC,QAAQnJ,EAASuI,GAASU,IAChCjJ,EAASuI,GAASU,GAAK3H,SAAQ,SAACD,GAC5B,IAAM+H,EAAa,EAAH,GAAQ/H,EAAQyB,aAC1BuG,EAAKD,EAAWC,GAAKD,EAAWC,GAAK,0BAAmBL,UACvDI,EAAWC,GAClBxJ,EAAIyJ,IAAID,EAAI,EAAF,KACHD,GAAU,CACbpG,KAAMiG,EACNM,GAAIF,EACJA,GAAI,0BAAmBL,KACvBQ,MAAO,EAAKC,WAAWpI,EAAQ+B,OAAS,EAAKsG,uBAAuBrI,EAAQ+B,OAAS/B,EAAQ+B,MAC7FuG,cAAe,EAAKC,kBAAkBvI,EAAQ+B,OAC9CyG,YAAa,EAAKD,kBAAkBvI,EAAQ+B,OAC5C0G,eAAgB,EAAKC,mBAAmB1I,EAAQ+B,OAChD4G,OAAQ,EAAKP,WAAWpI,EAAQ+B,OAChC6G,OAAQ,EAAKC,cAAcd,EAAWnG,WAAYyF,GAClDyB,aAAc,EAAKC,mBAAmBhB,EAAWnG,WAAYyF,GAC7D2B,QAAS,EAAKC,eAAelB,EAAWnG,WAAYyF,GACpD6B,QAAS,EAAKC,eAAepB,EAAWqB,QAAS9B,GACjD+B,MAAO,EAAKC,aAAavB,EAAWsB,OACpCE,SAAU,EAAKC,gBAAgBzB,EAAWwB,UAC1CE,KAAM,EAAKC,YAAY3B,EAAW0B,MAClClC,SAAU,EAAKoC,gBAAgB3B,EAAIT,GACnCqC,WAAW,EACXC,aAAa,EACbC,YAAY,EACZvK,OAAQ,CACJwK,QAAS,EAAKC,gBAAgBhK,EAAQ+B,UAGlD,QACG,CACH,IAAMgG,EAAa,EAAH,GAAQpJ,EAASuI,GAASU,GAAKnG,aACzCuG,EAAKD,EAAWC,GAAKD,EAAWC,GAAK,0BAAmBL,UACvDI,EAAWC,GAElBxJ,EAAIyJ,IAAID,EAAI,EAAF,KACHD,GAAU,CACbpG,KAAMiG,EACNM,GAAIF,EACJA,GAAI,0BAAmBL,KACvBQ,MAAO,EAAKC,WAAWzJ,EAASuI,GAASU,GAAK7F,OAAS,EAAKsG,uBAAuB1J,EAASuI,GAASU,GAAK7F,OAASpD,EAASuI,GAASU,GAAK7F,MAC1IuG,cAAe,EAAKC,kBAAkB5J,EAASuI,GAASU,GAAK7F,OAC7DyG,YAAa,EAAKD,kBAAkB5J,EAASuI,GAASU,GAAK7F,OAC3D0G,eAAgB,EAAKC,mBAAmB/J,EAASuI,GAASU,GAAK7F,OAC/D4G,OAAQ,EAAKP,WAAWzJ,EAASuI,GAASU,GAAK7F,OAC/C6G,OAAQ,EAAKC,cAAcd,EAAWnG,WAAYyF,GAClDyB,aAAc,EAAKC,mBAAmBhB,EAAWnG,WAAYyF,GAC7D2B,QAAS,EAAKC,eAAelB,EAAWnG,WAAYyF,GACpD6B,QAAS,EAAKC,eAAepB,EAAWqB,QAAS9B,GACjD+B,MAAO,EAAKC,aAAavB,EAAWsB,OACpCE,SAAU,EAAKC,gBAAgBzB,EAAWwB,UAC1CE,KAAM,EAAKC,YAAY3B,EAAW0B,MAClClC,SAAU,EAAKoC,gBAAgB3B,EAAIT,GACnCqC,WAAW,EACXC,aAAa,EACbC,YAAY,EACZvK,OAAQ,CACJwK,QAAS,EAAKC,gBAAgBrL,EAASuI,GAASU,GAAK7F,oBA7ErE,IAAK,IAAM6F,KAAOjJ,EAASuI,KAAhBU,GAkFX,OAAOpJ,CACX,EAEA,YAAAiI,gBAAA,sBACI,OAAOhH,OAAOuF,KAAK3G,KAAKoC,UAAUjC,KAAI,SAACwB,GACnC,OAAI,EAAKY,aAAe,OAChB,EAAKH,SAAST,GAASiK,UACvB,EAAKxJ,SAAST,GAASkK,UAAY,EAAKzJ,SAAST,GAASiK,SAEvD,EAAKxJ,SAAST,IAElB,EAAKS,SAAST,EACzB,GACJ,EAEA,YAAA2G,uBAAA,SAAuBwD,GACnB,IAAMC,EAAW3K,OAAO4F,OAAO,CAAC,EAAG8E,GAGnC,cAFOC,EAAShF,cACTgF,EAASC,IACTD,CACX,EAEA,YAAAxD,gBAAA,sBAEIvI,KAAK8B,gBAAgB3B,IAAIyB,SAAQ,SAACqK,GAa9B,GAAI,EAAKnK,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAO,CAI5E,GAAI,EAAKxD,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAM4G,SAAU,CAErF,IAAIC,EAAa,EAAKrK,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAM4G,SAAS/L,KAAI,SAACwB,GACtG,OAAOA,CACX,IAEA,GAAIsK,EAAatB,QAAS,CAEtB,IAAMyB,EAAaH,EAAatB,QAAQxK,KAAI,SAACgB,GACzC,GAAIA,EAAQkL,WAAa,EAAKvK,gBAAgBuF,aAAa2E,IAAI7K,EAAQkL,UAAU/G,QAAQ,IAAK,MAC1F,OAAO,EAAKxD,gBAAgBuF,aAAa2E,IAAI7K,EAAQkL,UAAU/G,QAAQ,IAAK,MAAM4G,SAAW,EAAKpK,gBAAgBuF,aAAa2E,IAAI7K,EAAQkL,UAAU/G,QAAQ,IAAK,MAAM4G,SAAW,IAE3L,IAAGhL,OAAOoL,SAAS,GAEbC,EAAON,EAAatB,QAAQxK,KAAI,SAACgB,GACnC,GAAIA,EAAQkL,WAAa,EAAKvK,gBAAgBuF,aAAa2E,IAAI7K,EAAQoL,KAAKjH,QAAQ,IAAK,MACrF,OAAO,EAAKxD,gBAAgBuF,aAAa2E,IAAI7K,EAAQoL,KAAKjH,QAAQ,IAAK,MAAM4G,SAAW,EAAKpK,gBAAgBuF,aAAa2E,IAAI7K,EAAQoL,KAAKjH,QAAQ,IAAK,MAAM4G,SAAW,IAEjL,IAAGhL,OAAOoL,SAAS,GAEnBH,EAAaA,EAAWK,OAAOJ,GAAYI,OAAOD,GAGtDN,EAAaE,0MAAa,MAAI,IAAIM,IAAIN,KAAW,GAAEhM,KAAI,SAACwB,GACpD,OAAO,EAAKpB,QAAQoB,EACxB,IAAGT,OAAOoL,SAGV,IAAM,EAAgB,CAClB,YACA,OACA,SACA,UACA,UACA,yBACA,aACA,YACA,eACA,WACA,SACA,YACA,UACA,WACA,MACA,WAGJL,EAAaE,WAAaF,EAAaE,WAAWhM,KAAI,SAACuM,GACnD,OAAOtL,OAAOuF,KAAK+F,GAAiB3J,QAAO,SAACC,EAAarB,GACrD,IAAME,EAAQ,EAAckC,WAAU,SAAA5C,GAAW,OAAAA,IAAYQ,CAAZ,IACjD,IAAe,IAAXE,EAAc,CACd,IAAM8K,EAAe,CAAC,EACtBA,EAAahL,GAAW+K,EAAgB/K,GACxCqB,EAAYnB,GAAS8K,EAEzB,OAAO3J,CACX,GAAG,IAAIwG,MAAMpI,OAAOuF,KAAK+F,GAAiBlL,QAAQoL,KAAK,OAAO1L,OAAOoL,QACzE,IAIJ,GAAI,EAAKxK,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMuH,YAAa,CACxF,IAAM,EAAkB,EAAK/K,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMuH,YACnGZ,EAAaa,aAAe,kBACjBC,GACP,IAAMC,EAAS,EAAK5K,SAASjC,KAAI,SAAAgB,GAC7B,GAAIA,EAAQ8L,OAASF,EACjB,MAAO,CACH,CACIG,MAAO,UACPpD,MAAO3I,EAAQgM,UAEnB,CACID,MAAO,SACPpD,MAAO,EAAKsD,qBAAqB,EAAgBL,GAAUM,SAE/D,CACI,MAAS,SACTvD,MAAO,EAAKwD,qBAAqB,EAAgBP,GAAUQ,YAI3E,IAAGrM,OAAOoL,SACVL,EAAaa,aAAeb,EAAaa,aAAaN,OAAOQ,IAnBjE,IAAK,IAAMD,KAAY,IAAZA,QAsBXd,EAAaa,aAAe,GA8BhC,GA1BI,EAAKhL,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMkI,OAC3EvB,EAAawB,OAASrM,OAAOuF,KAAK,EAAK7E,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMkI,MAAMrN,KAAI,SAACwB,SAC9G+L,EAAY,EAAK5L,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMkI,KAAK7L,GAASsL,KACrGU,EAAY,CAAC,EACnB,IAAK,IAAMZ,KAAYW,EAAW,CAE9B,IAAMV,EAASD,EAASzH,QAAQ,WAAY,OACtCsI,EAAcZ,EAAOa,OAAO,GAAGC,cAAgBd,EAAOe,MAAM,GAClE3M,OAAO4F,OAAO2G,IAAS,MAAKC,GAAcF,EAAUX,GAAS,IAEjE,OAAOY,CACX,IAEA1B,EAAa/K,OAAOuM,OAASxB,EAAawB,OAAO1K,QAAO,SAACC,EAAqBrB,GAC1E,IAAMqM,EAAc,EAAH,GAAQrM,GAEzB,cADOqM,EAAYC,cACZ,UAAGjL,EAAW,YAAI5B,OAAOwB,OAAOoL,GAAapH,KAAK,KAE7D,GAAG,IAEHqF,EAAa/K,OAAOgN,YAAcjC,EAAawB,OAAO1K,QAAO,SAACC,EAAarB,GACvE,MAAO,UAAGqB,EAAW,YAAIrB,EAAQwM,cACrC,GAAG,KAIH,EAAKrM,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAM8I,KAAM,CACjF,IAAMC,EAAU,EAAKvM,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAM8I,KAC3FnC,EAAaoC,QAAU,UAAGA,EAAQR,OAAO,GAAGC,eAAa,OAAGO,EAAQN,MAAM,IAI1E,EAAKjM,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMgJ,WAC3ErC,EAAaqC,SAAW,EAAKxM,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMgJ,UAIvGrC,EAAasC,UAAY,EAAKzM,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMiJ,UAAY,EAAKzM,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMiJ,UAAY,KACvMtC,EAAauC,MAAQ,EAAK1M,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMkJ,MAAQ,EAAK1M,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMkJ,MAAQ,KAC3LvC,EAAawC,aAAe,EAAK3M,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMmJ,aAAe,EAAK3M,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMmJ,aAAe,KAChNxC,EAAaqC,SAAW,EAAKxM,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMgJ,SAAW,EAAKxM,gBAAgBuF,aAAa2E,IAAIC,EAAa3I,KAAKgC,QAAQ,IAAK,MAAMgJ,SAAW,KAE5M,GAEJ,EAEA,YAAA7F,aAAA,sBACIzI,KAAK8B,gBAAgBC,OAAOH,SAAQ,SAACD,GACjC,GAAIA,EAAQM,MAAO,CACf,IAAIyM,EAAI,KAAa/M,EAAQM,MAAO,CAAC,GACrCyM,EAAI,EAAKC,YAAYD,GACrBA,EAAI,EAAKE,UAAUF,GACnBA,EAAI,EAAKG,SAASH,GAElBA,EAAI,EAAKI,aAAaJ,GACtBA,EAAI,EAAKK,aAAaL,GACtB,IAAMM,EAAU,EAAKC,eAAeP,EAAG,EAAK5M,gBAAgB3B,IAAKwB,EAAQsF,MACzEtF,EAAQM,MAAQ+M,EAAQ/M,MAEhC,GAEJ,EAEA,YAAA2M,UAAA,SAAUF,GAAV,WAgBI,OAfyBQ,YAAYC,MACZ3F,MAAM4F,KAAKV,EAAE,QACrB9M,SAAQ,SAACD,WACtB,KAA2B,QAAtB,EAAA+M,EAAE/M,GAAS0N,KAAK,cAAM,eAAE5I,WAAW,UAAU,CAC9C,IAAM6I,EAAkC,QAAtB,EAAAZ,EAAE/M,GAAS0N,KAAK,cAAM,eAAE9I,OAAOmI,EAAE/M,GAAS0N,KAAK,OAAQ7I,YAAY,KAAO,GAC5FkI,EAAE/M,GAAS0N,KAAK,MAAO,UAAG,EAAKpP,UAAQ,OAAGqP,IAC1CZ,EAAE/M,GAAS0N,KAAK,UAAW,QAEnC,IACuBH,YAAYC,MAM5BT,CACX,EAEA,YAAAG,SAAA,SAASH,GAAT,WA8BI,OA7ByBQ,YAAYC,MACb3F,MAAM4F,KAAKV,EAAE,uBACrB9M,SAAQ,SAACD,GACjBP,OAAOC,UAAUC,eAAeC,KAAKI,EAAQ4N,QAAS,UAClD5N,EAAQ4N,QAAQC,KAAK/I,WAAW,YAChC9E,EAAQ4N,QAAQC,KAAK/I,WAAW,aAChC9E,EAAQ4N,QAAQC,KAAK/I,WAAW,MAEhCiI,EAAE/M,GAAS0N,KAAK,WAAY,MAExB1N,EAAQ4N,QAAQC,KAAK/I,WAAW,MAAQ9E,EAAQ4N,QAAQC,KAAKzB,MAAM,IAAwD,IAAlDW,EAAE,WAAI/M,EAAQ4N,QAAQC,KAAKzB,MAAM,KAAMvM,QAChHkN,EAAE/M,GAAS0N,KAAK,eAAgB,UAIpCX,EAAE/M,GAAS0N,KAAK,WAAY,MAC5BX,EAAE/M,GAAS0N,KAAK,OAAQ,UAAG,EAAKpP,UAAQ,OAAG0B,EAAQ4N,QAAQC,SAG/DpO,OAAOC,UAAUC,eAAeC,KAAKI,EAAQ4N,QAAS,cACtDb,EAAE/M,GAAS0N,KAAK,WAAY,KAEpC,IACuBH,YAAYC,MAM5BT,CACX,EAEA,YAAAC,YAAA,SAAYD,GA0CR,OAzCyBQ,YAAYC,MACf3F,MAAM4F,KAAKV,EAAE,0BAA0BX,MAAM,EAAG,KAExDnM,SAAQ,SAACD,SACb8N,EAAerO,OAAOwB,OAAO8L,EAAE/M,GAAS+N,IAAI,CAAC,iBAAkB,qBAA2BxO,OAAOoL,SAAS,GAC1GqD,EAAgBjB,EAAE,WAAIe,IAC5B,GAAIf,EAAEiB,GAAenO,OAAQ,CAIzB,IAAMoO,EAAiBlB,EAAE,WAAoC,QAAhC,EAAAA,EAAEiB,GAAeE,KAAK,kBAAU,eAAElL,cAAcW,QAAQ,IAAK,OAAM,MAGhG,IAAK,IAAMiE,KAAOmF,EAAEiB,GAAeN,OAE/BX,EAAEkB,GAAgBP,KAAK9F,EAAKmF,EAAEiB,GAAeN,KAAK9F,IAEtDmF,EAAEkB,GAAgBP,KAAK,wBAAyB,QAChDX,EAAEkB,GAAgBP,KAAK,kBAAmB,QAC1CX,EAAEkB,GAAgBpL,KAAKkK,EAAE/M,GAASkE,QAClC6I,EAAEiB,GAAeG,WAAW,MAC5BpB,EAAEiB,GAAeG,WAAW,cAC5BpB,EAAEiB,GAAeG,WAAW,QAG5BpB,EAAE/M,GAAS6C,KAAKkK,EAAEkB,IACmB,0RAAjClB,EAAEkB,GAAgBP,KAAK,QACM,IAAI,KAC7BU,MAAMrB,EAAE/M,GAAS6C,aAGI,IAAI,KAC7BuL,MAAM,SAElB,IACuBb,YAAYC,MAM5BT,CACX,EAEA,YAAAI,aAAA,SAAaJ,GACgBQ,YAAYC,MAArC,IACMa,EAAgBxG,MAAM4F,KAAKV,EAAE,2BAmBnC,OAlBItN,OAAOC,UAAUC,eAAeC,KAAKvB,KAAKI,OAAQ,YAAcJ,KAAKI,OAAO6P,SAK5ED,EAAcpO,SAAQ,SAACD,GAEE,SADAP,OAAOwB,OAAO8L,EAAE/M,GAAS+N,IAAI,CAAC,kBAAmB,sBAA4BxO,OAAOoL,SAAS,IAE9GoC,EAAE/M,GAAS0N,KAAK,UAAW,OAEnC,IAEmBH,YAAYC,MAM5BT,CACX,EAEA,YAAAK,aAAA,SAAaL,GAYT,OAXyBQ,YAAYC,MACf3F,MAAM4F,KAAKV,EAAE,wBACrB9M,SAAQ,SAACD,GACnB+M,EAAE/M,GAASuO,SAAS,WACxB,IACuBhB,YAAYC,MAM5BT,CACX,EAEA,YAAAO,eAAA,SAAeP,EAAuBvO,EAA8BgQ,GAApE,WAqDI,OApDyBjB,YAAYC,MAEf3F,MAAM4F,KAAKV,EAAE,iBAErB9M,SAAQ,SAACD,WAiBnB,GAhBA+M,EAAE/M,GAAS0N,KAAK,gBAAiB,SACjCX,EAAE/M,GAAS0N,KAAK,aAAc,SAC9BX,EAAE/M,GAAS0N,KAAK,iBAAkB,SAClCX,EAAE/M,GAASyO,QAAQ,SAAS5O,OAASkN,EAAE/M,GAAS0N,KAAK,eAAgB,QAAUX,EAAE/M,GAAS0N,KAAK,eAAgB,SAE3GX,EAAE/M,GAAS0N,KAAK,eAAiBX,EAAE/M,GAAS0N,KAAK,QAEjDX,EAAE/M,GAAS0N,KAAK,KAAMX,EAAE/M,GAAS0N,KAAK,OACtCX,EAAE/M,GAAS0N,KAAK,KAAM,EAAKgB,UAAoB,QAAV,EAAA3B,EAAE/M,UAAQ,eAAE0N,KAAK,MAAiBX,EAAE/M,GAAUwO,MAElFzB,EAAE/M,GAASkO,KAAK,WAAWlL,cAAcgE,SAAS,iBACnD+F,EAAE/M,GAAS0N,KAAK,gBAEhBX,EAAE/M,GAAS0N,KAAK,sBAAuB,QAGvCX,EAAE/M,GAAS0N,KAAK,gBAAkBX,EAAE/M,GAAS0N,KAAK,MAAO,CAEzD,IAOMiB,EAPyB,SAACC,EAAsCC,eAClE,IAA2B,kTAAK1O,gBAAgB3B,IAAIsQ,WAAS,8BAAE,CAApD,mBAAClH,EAAG,KAAEO,EAAK,KAClB,GAAIA,EAAMvG,aAAegN,GAAoBzG,EAAMxG,OAASkN,EACxD,OAAOjH,oGAGnB,CACemH,CAAuBhC,EAAE/M,GAAS0N,KAAK,cAAeX,EAAE/M,GAAS0N,KAAK,SACjFiB,GAEA5B,EAAE/M,GAAS0N,KAAK,KAAMiB,GACtB5B,EAAE/M,GAAS0N,KAAK,KAAMiB,GACtB,EAAKD,UAAoB,QAAV,EAAA3B,EAAE/M,UAAQ,eAAE0N,KAAK,MAAiBX,EAAE/M,GAAUwO,KAEhC,IAAI,KAC7B1O,MAAM,uEAGlBiN,EAAE/M,GAASgP,KAAK,gBACpB,IAGuBzB,YAAYC,MAO5B,CAAElN,MAAOyM,EAAElK,OAAQrE,IAAG,EACjC,EAEA,YAAAkQ,UAAA,SAAUxG,EAAY1I,EAA2CgP,aAiB7D,OAhBAnQ,KAAK8B,gBAAgB3B,IAAIyJ,IACrBC,EAAE,OAEK7J,KAAK8B,gBAAgB3B,IAAIyQ,IAAI/G,IAAG,CACnCgH,IAAK1P,EAAQ0E,OACbiL,OAAQ3P,EAAQkO,KAAK,UAAYlO,EAAQkO,KAAK,UAAY,KAC1D0B,aAAc5P,EAAQ6P,UAAUnB,KAAK,WAAWlL,cAAcgE,SAAS,WACvEsI,UAA+B,QAApB,EAAA9P,EAAQkO,KAAK,eAAO,eAAExI,MAAM,KAAK,GAAGlC,iBAAkB3E,KAAKK,aACtE4J,cAAwE,iBAAlC,QAAvB,EAAA9I,EAAQ0O,KAAK,kBAAU,eAAEhJ,MAAM,KAAK,GAAGlC,eACtDwF,WAAqE,gBAAlC,QAAvB,EAAAhJ,EAAQ0O,KAAK,kBAAU,eAAEhJ,MAAM,KAAK,GAAGlC,eACnDyF,eAAyC,MAAzBjJ,EAAQkO,KAAK,QAC7BzL,KAAMuM,EACNnF,MAAO7J,EAAQkO,KAAK,SAAWrP,KAAKiL,aAAa9J,EAAQkO,KAAK,UAAiC,KAC/F6B,aAAc,MAGflR,KAAK8B,gBAAgB3B,IAAIyQ,IAAI/G,GAAIF,EAC5C,EAEA,YAAAK,uBAAA,SAAuBjK,GACnB,IAAM2O,EAAI,KAAa3O,EAAO,CAAEmC,KAAK,IAMrC,OALAwM,EAAE,QAAQyC,MAAK,WACXzC,EAAE1O,MAAM8P,WAAW,KACvB,IAEApB,EAAE,SAAS0C,UAAU,eACd1C,EAAElK,KAAK,OAClB,EAEA,YAAA0F,kBAAA,SAAkBnK,GACd,MAAO,aAAasR,KAAKtR,EAC7B,EAEA,YAAAsK,mBAAA,SAAmBtK,GACf,OAAOC,KAAKkK,kBAAkBnK,IAAUA,EAAM0G,WAAW,IAC7D,EAEA,YAAAsD,WAAA,SAAWhK,GACP,MAAO,qBAAqBsR,KAAKtR,EACrC,EAEA,YAAA4L,gBAAA,SAAgB5L,GACZ,OAAIC,KAAK+J,WAAWhK,GACN,KAAaA,GACd8F,OAEN9F,CACX,EAEA,YAAAoJ,cAAA,SAAcH,GAEVA,OADAA,EAAUQ,MAAMC,QAAQT,GAAWA,EAAU,CAACA,KAC9CA,EAASpH,SAAQ,SAACD,GACd,GAAIA,EAAQ4I,OACR,GAAI5I,EAAQ4I,OAAO+G,QAAS,CACxB,IAAMC,EAAO,IAAIC,KAAK7P,EAAQ4I,OAAO+G,QAAQ5N,OAC7C/B,EAAQ4I,OAAOkH,OAAS,CAAC,UAAGF,EAAKG,WAAa,EAAC,YAAIH,EAAKI,aAAY,YAAIJ,EAAKK,gBAC7EjQ,EAAQ4I,OAAO7G,MAAQ,gBAAS6N,EAAKG,WAAa,EAAC,YAAIH,EAAKI,aAAY,YAAIJ,EAAKK,oBAE9E,GAAIjQ,EAAQ4I,OAAOsH,WAAalQ,EAAQ4I,OAAOuH,QAAS,CAC3D,IAAMD,EAAY,IAAIL,KAAK7P,EAAQ4I,OAAOsH,UAAUnO,OAC9CoO,EAAU,IAAIN,KAAK7P,EAAQ4I,OAAOuH,QAAQpO,OAE1CqO,EAAWD,EAAQF,cAAgBC,EAAUD,cAC7CI,EAAYF,EAAQJ,WAAaG,EAAUH,WAAyB,GAAXK,EAC/DpQ,EAAQ4I,OAAOkH,OAAS,CACpB,UAAGI,EAAUH,WAAa,EAAC,YAAIG,EAAUF,aAAY,YAAIE,EAAUD,eACnE,UAAGE,EAAQJ,WAAa,EAAC,YAAII,EAAQH,aAAY,YAAIG,EAAQF,gBAG7DjQ,EAAQ4I,OAAO7G,MADfsO,GAAa,EACU,UAAGH,EAAUH,WAAa,EAAC,YAAIG,EAAUF,aAAY,YAAIE,EAAUD,cAAa,cAAME,EAAQJ,WAAa,EAAC,YAAII,EAAQH,aAAY,YAAIG,EAAQF,eAEhJ,UAAGI,EAAS,0BAAkBF,EAAQJ,WAAa,EAAC,YAAII,EAAQH,aAAY,YAAIG,EAAQF,oBAGtF,IAAI,KAC7BnQ,MAAM,kDAItB,GACJ,EAEA,YAAA+I,cAAA,SAAcjH,EAAoByF,GAG9B,IAAMiJ,EAAcjJ,OADpBA,EAAUQ,MAAMC,QAAQT,GAAWA,EAAU,CAACA,SACnB,EAAPA,EAAStG,MAAK,SAACvB,GAC/B,OAAOA,EAAQiC,YAAYuG,KAAOpG,CACtC,IACA,GAAI0O,GAAeA,EAAY1H,OAC3B,OAAO0H,EAAY1H,OAAO7G,KAElC,EAEA,YAAAgH,mBAAA,SAAmBnH,EAAoByF,GAGnC,IAAMiJ,EAAcjJ,OADpBA,EAAUQ,MAAMC,QAAQT,GAAWA,EAAU,CAACA,SACnB,EAAPA,EAAStG,MAAK,SAACvB,GAC/B,OAAOA,EAAQiC,YAAYuG,KAAOpG,CACtC,IACA,GAAI0O,GAAeA,EAAY1H,OAC3B,OAAO0H,EAAY1H,OAAOkH,MAElC,EAEA,YAAArI,eAAA,SAAeJ,IACXA,EAAUQ,MAAMC,QAAQT,GAAWA,EAAU,CAACA,IACtCpH,SAAQ,SAACD,GACTA,EAAQuQ,QAAUvQ,EAAQuQ,OAAOvH,UACjChJ,EAAQuQ,OAAOvH,QAAQtG,KAAOjD,OAAOuF,KAAKhF,EAAQuQ,OAAOvH,SAASxK,KAAI,SAACoJ,SACnE,OAAIC,MAAMC,QAAQ9H,EAAQuQ,OAAOvH,QAAQpB,IAC9B5H,EAAQuQ,OAAOvH,QAAQpB,GAAKpJ,KAAI,SAACwK,GACpC,MAAO,CACH4B,KAAM5B,EAAQvH,YAAYiJ,UAC1BA,UAAW1B,EAAQjH,MACnByO,KAAM5I,EAAIZ,SAAS,kBAAoB,WAAa,WAE5D,IAEO,CACH4D,KAAM5K,EAAQuQ,OAAOvH,QAAQpB,GAAKnG,YAAYiJ,UAC9CA,UAAW1K,EAAQuQ,OAAOvH,QAAQpB,GAAK7F,MACnC/B,EAAQuQ,OAAOvH,QAAQpB,GAAK7F,MACwF,QAApH,EAAA/B,EAAQuQ,OAAOvH,QAAQpB,GAAKnI,OAAOuF,KAAKhF,EAAQuQ,OAAOvH,QAAQpB,IAAMrI,QAAO,SAAAC,GAAW,OAACA,EAAQsF,WAAW,IAApB,IAA0B,WAAG,eAAE/C,MAC1HyO,KAAM5I,EAAIZ,SAAS,kBACf,WACA,WACJmB,MAAQP,EAAIZ,SAAS,kBAEjB,KADAhH,EAAQuQ,OAAOvH,QAAQpB,GAAKnI,OAAOuF,KAAKhF,EAAQuQ,OAAOvH,QAAQpB,IAAM,IAAI7F,MAIzF,IAGR,GACJ,EAEA,YAAAkH,eAAA,SAAerH,EAAoByF,GAE/B,IAAMiJ,EAAcjJ,OADpBA,EAAUQ,MAAMC,QAAQT,GAAWA,EAAU,CAACA,SACnB,EAAPA,EAAStG,MAAK,SAACvB,GAC/B,OAAOA,EAAQiC,YAAYuG,KAAOpG,CACtC,IACA,GAAI0O,GAAeA,EAAYC,QAAUD,EAAYC,OAAOvH,QACxD,OAAOsH,EAAYC,OAAOvH,QAAQtG,IAE1C,EAEA,YAAAgF,eAAA,SAAeJ,IACXA,EAAOO,MAAMC,QAAQR,GAAQA,EAAO,CAACA,IAChCrH,SAAQ,SAACD,GACV,GAAIA,GAAWA,EAAQkJ,QAAS,CAC5B,IAAMA,EAAUlJ,EAAQkJ,QAAQnH,MAAMkB,SAAS,KAC3CjD,EAAQkJ,QAAQnH,MAAMmD,MAAM,KAAK,GAAGiH,cACpCnM,EAAQkJ,QAAQnH,MAAMoK,cAC1BnM,EAAQ+B,MAAQmH,OAEb,GAAIlJ,GAAWA,EAAQyQ,OAAQ,CAClC,IAAMC,EAAY1Q,EAAQyQ,OAAOE,cAAczH,QAAQnH,MAAMkB,SAAS,KAClEjD,EAAQyQ,OAAOE,cAAczH,QAAQnH,MAAMmD,MAAM,KAAK,GAAGiH,cACzDnM,EAAQyQ,OAAOE,cAAczH,QAAQnH,MAAMoK,cAEzCyE,EAAc5Q,EAAQyQ,OAAOI,gBAAgB3H,QAAQnH,MAAMkB,SAAS,KACtEjD,EAAQyQ,OAAOI,gBAAgB3H,QAAQnH,MAAMmD,MAAM,KAAK,GAAGiH,cAC3DnM,EAAQyQ,OAAOI,gBAAgB3H,QAAQnH,MAAMoK,cAEjDnM,EAAQ+B,MAAQ,UAAG2O,EAAS,cAAME,GAG1C,GACJ,EAEA,YAAAzH,eAAA,SAAeC,EAAiB9B,GAC5B,GAAIA,EAAM,CACN,IAAMwJ,EAAWjJ,MAAMC,QAAQR,GAAQA,EAAKvG,MAAK,SAACvB,GAC9C,OAAOA,EAAQiC,YAAYuG,KAAOoB,CACtC,IAAK,CAAC9B,GAAMvG,MAAK,SAACvB,GACd,OAAOA,EAAQiC,YAAYuG,KAAOoB,CACtC,IAEA,GACI0H,IACCrR,OAAOC,UAAUC,eAAeC,KAAKkR,EAAU,YAAcrR,OAAOC,UAAUC,eAAeC,KAAKkR,EAAU,WAE7G,OAAOA,EAAS/O,MAG5B,EAEA,YAAAuH,aAAA,SAAaD,GACT,OAAIA,EACqB,CACjB,EAAG,OACH,EAAG,OACH,EAAG,WACH,EAAG,YACH,EAAG,gBACH,EAAG,oBACH,EAAG,WACH,EAAG,eACH,EAAG,mBACH,EAAG,WACH,GAAI,eACJ,GAAI,mBACJ,GAAI,YACJ,KAAM,SACN,KAAM,aACN,KAAM,cACN,KAAM,kBACN,KAAM,sBACN,KAAM,cAEUA,GAEjB,IACX,EAEA,YAAAG,gBAAA,SAAgBD,GACZ,OAAIA,EACwB,CACpB,KAAM,OACN,KAAM,WACN,KAAM,YACN,KAAM,gBACN,KAAM,oBACN,KAAM,WACN,KAAM,eACN,KAAM,mBACN,KAAM,WACN,MAAO,eACP,MAAO,mBACP,MAAO,YACP,EAAG,SACH,EAAG,aACH,EAAG,cACH,EAAG,kBACH,EAAG,sBACH,EAAG,cAEgBA,GAEpB,IACX,EAEA,YAAAG,YAAA,SAAYD,GACR,OAAIA,EACoB,CAChB,IAAK,WACL,IAAK,YAEUA,GAEhB,IACX,EAQA,YAAAsH,mBAAA,SAAmBC,EAAe3F,GAAlC,WAII,YAHsB,IAAZ,IAAyBA,EAAS,KAGxCA,aAAM,EAANA,EAAQxL,QAFe,KAGvBwL,EAASA,EAAOtI,UAAU,EAHH,KAG0BA,UAAU,EAAGsI,EAAOxG,YAAY,KAAO,GACjFwG,GAAU,SAIrB5L,OAAOuF,KAAKgM,GAAO/Q,SAAQ,SAAAgR,GACX,SAARA,EACA5F,GAAU2F,EAAMC,GAAQ,IAEnBpJ,MAAMC,QAAQkJ,EAAMC,IACzBD,EAAMC,GAAMhR,SAAQ,SAAAiR,GAChB7F,EAAS,EAAK0F,mBAAmBG,EAAW7F,EAChD,IAE4B,UAAvB4F,EAAKlO,UAAU,EAAE,KACtBsI,EAAS,EAAK0F,mBAAmBC,EAAMC,GAAO5F,GAEtD,IACOA,EACX,EAWA,YAAA1B,gBAAA,SAAgB3B,EAAYmJ,SAKxB,GAAIA,GAAaA,EAAU,oBAAqB,CAE5C,IAAM,EAAetJ,MAAMC,QAAQqJ,EAAU,qBAAuBA,EAAU,oBAAoBpQ,MAAK,SAACvB,GACpG,OAAOA,EAAQiC,YAAY,gBAAkBuG,CACjD,IAAK,CAACmJ,EAAU,qBAAqBpQ,MAAK,SAACvB,GACvC,OAAOA,EAAQiC,YAAY,gBAAkBuG,CACjD,IACA,GAAI,GACImJ,EAAU,iBAAkB,CAC5B,GAAItJ,MAAMC,QAAQqJ,EAAU,kBAAmB,CAC3C,IAAMC,EAA2C,QAA1B,EAAAD,EAAU,wBAAgB,eAAEpQ,MAAK,SAACvB,GACrD,OAAOA,EAAQiC,YAAYuG,KAAO,EAAavG,YAAY,WAC/D,IACA,OAAOpD,KAAK0S,mBAAmBK,GAG/B,IAAKvJ,MAAMC,QAAQqJ,EAAU,iBAAiBpP,OAC1C,OAAOoP,EAAU,iBAAiBpP,MAC/B,GAAI8F,MAAMC,QAAQqJ,EAAU,iBAAiBpP,OAChD,OAAOoP,EAAU,iBAAiBpP,MAAMkD,KAAK,IAC1C,GAAIkM,EAAU,iBAAiB,cAClC,OAAOA,EAAU,iBAAiB,cAAcpP,OAMpE,OAAO,IACX,EAEA,YAAA0J,qBAAA,SAAqBC,GACjB,OAAIA,EACOA,EAAS,EACZ,0BAAmBA,EAAO2F,QAAQ,GAAE,KACpC,kCAA2B3F,EAAO2F,QAAQ,GAAE,KAE7C,gBACX,EAEA,YAAA1F,qBAAA,SAAqB2F,GACjB,OAAIA,EACOA,EAAO3N,QAAQ,IAAK,KAExB,gBACX,EACJ,EAruCA,GCLA4N,KAAKC,UAAY,SAAC,OAAE9O,EAAI,OACE,IAAI+O,EAAc/O,GAC1B7D,OAAOO,MAAK,SAAAsD,GACtB6O,KAAKG,YAAYhP,EACrB,GACJ,ICXIiP,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CAGAJ,EAAoBO,EAAID,EAGxBN,EAAoBQ,EAAI,KAGvB,IAAIC,EAAsBT,EAAoBU,OAAEP,EAAW,CAAC,MAAM,IAAOH,EAAoB,QAE7F,OADsBA,EAAoBU,EAAED,EAClB,EJjCvBnU,EAAW,GACf0T,EAAoBU,EAAI,CAACjH,EAAQkH,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAeC,IACnB,IAASC,EAAI,EAAGA,EAAI1U,EAAS2B,OAAQ+S,IAAK,CAGzC,IAFA,IAAKL,EAAUC,EAAIC,GAAYvU,EAAS0U,GACpCC,GAAY,EACPC,EAAI,EAAGA,EAAIP,EAAS1S,OAAQiT,MACpB,EAAXL,GAAsBC,GAAgBD,IAAahT,OAAOuF,KAAK4M,EAAoBU,GAAGS,OAAOnL,GAASgK,EAAoBU,EAAE1K,GAAK2K,EAASO,MAC9IP,EAASrM,OAAO4M,IAAK,IAErBD,GAAY,EACTJ,EAAWC,IAAcA,EAAeD,IAG7C,GAAGI,EAAW,CACb3U,EAASgI,OAAO0M,IAAK,GACrB,IAAII,EAAIR,SACET,IAANiB,IAAiB3H,EAAS2H,EAC/B,CACD,CACA,OAAO3H,CAnBP,CAJCoH,EAAWA,GAAY,EACvB,IAAI,IAAIG,EAAI1U,EAAS2B,OAAQ+S,EAAI,GAAK1U,EAAS0U,EAAI,GAAG,GAAKH,EAAUG,IAAK1U,EAAS0U,GAAK1U,EAAS0U,EAAI,GACrG1U,EAAS0U,GAAK,CAACL,EAAUC,EAAIC,EAqBjB,EKzBdb,EAAoBqB,EAAI,CAACjB,EAASkB,KACjC,IAAI,IAAItL,KAAOsL,EACXtB,EAAoBuB,EAAED,EAAYtL,KAASgK,EAAoBuB,EAAEnB,EAASpK,IAC5EnI,OAAO2T,eAAepB,EAASpK,EAAK,CAAEyL,YAAY,EAAMpE,IAAKiE,EAAWtL,IAE1E,ECNDgK,EAAoB0B,EAAI,CAAC,EAGzB1B,EAAoB2B,EAAKC,GACjBxU,QAAQC,IAAIQ,OAAOuF,KAAK4M,EAAoB0B,GAAGlS,QAAO,CAACmC,EAAUqE,KACvEgK,EAAoB0B,EAAE1L,GAAK4L,EAASjQ,GAC7BA,IACL,KCNJqO,EAAoB6B,EAAKD,GAEZA,EAAL,sCCFR5B,EAAoB8B,SAAYF,IAEf,ECHjB5B,EAAoBuB,EAAI,CAACQ,EAAKzF,IAAUzO,OAAOC,UAAUC,eAAeC,KAAK+T,EAAKzF,GCClF0D,EAAoBoB,EAAKhB,IACH,oBAAX4B,QAA0BA,OAAOC,aAC1CpU,OAAO2T,eAAepB,EAAS4B,OAAOC,YAAa,CAAE1L,MAAO,WAE7D1I,OAAO2T,eAAepB,EAAS,aAAc,CAAE7J,OAAO,GAAO,ECL9DyJ,EAAoBkC,EAAI,wBCIxB,IAAIC,EAAkB,CACrB,IAAK,GAgBNnC,EAAoB0B,EAAEV,EAAI,CAACY,EAASjQ,KAE/BwQ,EAAgBP,IAElBQ,cAAcpC,EAAoBkC,EAAIlC,EAAoB6B,EAAED,GAE9D,EAGD,IAAIS,EAAqB1C,KAA6B,uBAAIA,KAA6B,wBAAK,GACxF2C,EAA6BD,EAAmB3R,KAAK6R,KAAKF,GAC9DA,EAAmB3R,KAvBCI,IACnB,IAAK6P,EAAU6B,EAAaC,GAAW3R,EACvC,IAAI,IAAImP,KAAYuC,EAChBxC,EAAoBuB,EAAEiB,EAAavC,KACrCD,EAAoBO,EAAEN,GAAYuC,EAAYvC,IAIhD,IADGwC,GAASA,EAAQzC,GACdW,EAAS1S,QACdkU,EAAgBxB,EAAS+B,OAAS,EACnCJ,EAA2BxR,EAAK,MXnB7BvE,EAAOyT,EAAoBQ,EAC/BR,EAAoBQ,EAAI,IAChBR,EAAoB2B,EAAE,KAAKnU,KAAKjB,GYDdyT,EAAoBQ","sources":["webpack://ixviewer-2/webpack/runtime/chunk loaded","webpack://ixviewer-2/webpack/runtime/startup chunk dependencies","webpack://ixviewer-2/./src/ts/fetch-merge/index.ts","webpack://ixviewer-2/./src/ts/workers/index.ts","webpack://ixviewer-2/webpack/bootstrap","webpack://ixviewer-2/webpack/runtime/define property getters","webpack://ixviewer-2/webpack/runtime/ensure chunk","webpack://ixviewer-2/webpack/runtime/get javascript chunk filename","webpack://ixviewer-2/webpack/runtime/get mini-css chunk filename","webpack://ixviewer-2/webpack/runtime/hasOwnProperty shorthand","webpack://ixviewer-2/webpack/runtime/make namespace object","webpack://ixviewer-2/webpack/runtime/publicPath","webpack://ixviewer-2/webpack/runtime/importScripts chunk loading","webpack://ixviewer-2/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(783).then(next);\n};","import * as cheerio from 'cheerio';\nimport * as convert from 'xml-js';\nimport { Meta, Xbrltype, reference } from '../interface/meta';\nimport { Context, DeiAmendmentFlagAttributes, Instance, LinkFootnote, LinkFootnoteArc, LinkLOC, Units } from '../interface/instance';\nimport { Reference, SingleFact } from '../interface/fact';\nimport { Logger, ILogObj } from 'tslog';\nimport { cleanSubstring } from '../helpers/utils';\n\n/* Created by staff of the U.S. Securities and Exchange Commission.\n * Data and content created by government employees within the scope of their employment\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\n */\nexport class FetchAndMerge {\n    private absolute: string;\n    private params: {\n        doc: string,\n        'doc-file': string,\n        hostName: string,\n        redline: boolean,\n        metalinks: string,\n        'metalinks-file': string,\n        fact: string,\n        summary: string,\n    };\n    private customPrefix: undefined | string;\n    private currentInstance: Array<{\n        current: boolean;\n        formInformation: {\n            axisCustom: number;\n            axisStandard: number;\n            baseTaxonomies: { [key: string]: number; };\n            contextCount: number;\n            dts: { [key: string]: { [key: string]: Array<string>; }; };\n            elementCount: number;\n            entityCount: 1;\n            hidden: { [key: string]: number; };\n            keyCustom: number;\n            keyStandard: number;\n            memberCustom: number;\n            memberStandard: number;\n            nsprefix: string;\n            nsuri: string;\n            segmentCount: number;\n            unitcount: number;\n        };\n        instance: number;\n        map: Map<string, SingleFact>;\n        metaInstance: Meta;\n        xhtmls: Array<{\n            current: boolean;\n            loaded: boolean;\n            slug: string;\n            url: string;\n            xhtml: string;\n        }>;\n        xmlSlug: Array<string>;\n        xmlUrls: Array<string>;\n    }> | undefined;\n    private std_ref;\n    private sections;\n    private metaVersion: string | undefined;\n    private instance;\n    constructor(input: {\n        absolute: string,\n        params: {\n            doc: string,\n            'doc-file': string,\n            hostName: string,\n            redline: boolean,\n            metalinks: string,\n            'metalinks-file': string,\n        },\n        instance: number | null,\n        std_ref: { [key: string]: Reference }\n\n    }) {\n        this.absolute = input.absolute;\n        this.partial = input.partial;\n        this.map = input.map;\n        this.params = input.params;\n        this.customPrefix = input.customPrefix;\n        this.instance = input.instance;\n        this.std_ref = input.std_ref;\n    }\n\n    init() {\n\n        const XHTMLandInstance = (instance, addInstance = false) => {\n            return Promise.all([\n                this.fetchXHTML(),\n                this.fetchInstance(),\n            ]).then((allResponses) => {\n                const errors = allResponses.filter(element => element ? Object.prototype.hasOwnProperty.call(element, 'error') : false);\n                if (errors.length) {\n                    const errorMessages = errors.map(current => current.message);\n                    return {\n                        all: { error: true, message: errorMessages }\n                    };\n                }\n                allResponses[0].forEach((current, index) => {\n                    this.currentInstance.xhtmls[index].loaded = true;\n                    this.currentInstance.xhtmls[index].xhtml = current.xhtml;\n                });\n                this.currentInstance.xml = (allResponses[1] as Instance);\n                this.mergeAllResponses(addInstance);\n                return {\n                    all: { instance: (addInstance ? instance.instance : instance), sections: this.sections, std_ref: this.std_ref }\n                }\n            })\n        };\n\n        const MetaandSummary = () => {\n            return Promise.all([\n                this.fetchMeta(),\n                this.fetchSummary(),\n            ]).then((allResponses) => {\n                this.metaVersion = allResponses[0].version;\n                this.std_ref = allResponses[0].std_ref;\n                if (allResponses.some((element) => element.error)) {\n                    const messageIndex = allResponses.find((element) => element.error);\n                    return {\n                        all: { error: true, message: [messageIndex.message] }\n                    }\n                } else {\n                    this.currentInstance = allResponses[0].instance?.filter(element => element.current)[0];\n\n                    const mapCategoryName = (input: string) => {\n                        const options = {\n                            \"Cover\": \"Cover\",\n                            \"document\": \"Document & Entity Information\",\n                            \"statement\": \"Financial Statements\",\n                            \"Statements\": \"Financial Statements\",\n                            \"disclosure\": \"Notes to the Financial Statements\",\n                            \"Notes\": \"Notes to Financial Statements\",\n                            \"Policies\": \"Accounting Policies\",\n                            \"Tables\": \"Notes Tables\",\n                            \"Details\": \"Notes Details\",\n                            \"Prospectus\": \"Prospectus\",\n                            \"RR_Summaries\": \"RR Summaries\",\n                            \"Fee_Exhibit\": \"RR Summaries\",\n                            \"Risk/Return\": \"RR Summaries\"\n                        };\n                        if (options[input]) {\n                            return options[input];\n                        }\n                        return 'INCOMPLETE SECTIONS DATA!';\n                    };\n                    const metaLinksSections = Object.values(allResponses[0].sections);\n                    this.sections = allResponses[1].MyReports.Report.reduce((accumulator, current) => {\n                        if (current && current.MenuCategory && current.Position && current.ShortName && current._attributes) {\n                            let fact = { name: '', contextRef: '', instance: null };\n                            const additional = metaLinksSections.find(element => element.shortName === current.ShortName._text);\n                            if (additional) {\n                                fact.instance = additional.instance;\n                                if (additional.uniqueAnchor) {\n                                    fact.name = additional.uniqueAnchor.name;\n                                    fact.contextRef = additional.uniqueAnchor.contextRef;\n                                    fact.file = additional.uniqueAnchor.baseRef;\n                                } else if (additional.firstAnchor) {\n                                    fact.name = additional.firstAnchor.name;\n                                    fact.contextRef = additional.firstAnchor.contextRef;\n                                    fact.file = additional.firstAnchor.baseRef;\n                                } else {\n                                    // MetaLinks.json does NOT have sufficient information for this section category\n                                    // we remove it from being used.\n                                    fact = null;\n                                }\n                            }\n                            const index = accumulator.findIndex(element => element.name === mapCategoryName(current.MenuCategory._text))\n                            if (index !== -1 && fact) {\n                                accumulator[index].children.push(\n                                    {\n                                        sort: +current.Position._text,\n                                        name: current.ShortName._text,\n                                        fact: fact,\n                                    }\n\n                                );\n                                accumulator[index].children.sort((first, second) => {\n                                    if (first.sort < second.sort) {\n                                        return -1;\n                                    }\n                                    if (first.sort > second.sort) {\n                                        return 1;\n                                    }\n                                    return 0;\n                                });\n                            } else if (fact) {\n                                accumulator.push({\n                                    name: mapCategoryName(current.MenuCategory._text),\n                                    children: [\n                                        {\n                                            sort: +current.Position._text,\n                                            name: current.ShortName._text,\n                                            file: current._attributes.instance,\n                                            fact: fact,\n                                        }\n                                    ]\n                                });\n\n                            }\n                        }\n                        return accumulator;\n                    }, []);\n                }\n                return Promise.all([\n                    XHTMLandInstance(allResponses[0], true)\n                ]).then(data => {\n                    return data[0];\n                })\n            });\n        };\n\n        if (this.instance !== null) {\n            this.currentInstance = this.instance.filter(element => element.current)[0];\n            return XHTMLandInstance(this.instance);\n        } else {\n            return MetaandSummary();\n        }\n    }\n\n    decodeWorkstationXmlInHtml(isWorkstation: boolean, html: string, closingXml: string) {\n        if (!isWorkstation) return html; // not running on SEC EDGAR workstation which encodes xml in HTML\n        if (!html.substring(0,100).toLowerCase().includes(\"<html><head>\")) {\n             if (html.includes(\"<title>EDGAR SEC Workstation Login</title>\")) {\n                  console.error(\"Workstation requires logging in\");\n                  window.alert(\"Workstation requires logging in\");\n                  return \"\";\n             }\n             return html; // it's xml, not html\n        }\n        // snip extraneous html from beginning and end of resopnse which is present in versions of files on workstation\n        // only 5 encodings are used in xml\n        html = html.replaceAll('&lt;', '<');\n        html = html.replaceAll('&gt;', '>');\n        html = html.replaceAll('&quot;', '\"');\n        html = html.replaceAll('&apos;', '\\'');\n        html = html.replaceAll('&amp;', '&');\n        return html.substring(html.indexOf(\"<?xml version=\"), html.indexOf(closingXml) + closingXml.length)\n    }\n\n    fetchXHTML() {\n        const promises = this.currentInstance?.xhtmls.map((current: { url: string }) => {\n            return new Promise((resolve) => {\n                const isWorkstation = current.url.includes(\"DisplayDocument.do?\");\n                let ixvUrl = current.url;\n                if (isWorkstation) {\n                    ixvUrl = ixvUrl.replace('.htm', '_ix1.htm')\n                }\n                fetch(ixvUrl, {\n                    headers: {\n                        \"Content-Type\": \"application/xhtml+xml\"\n                    },\n                    mode: 'no-cors',\n                    credentials: 'include'\n                }).then((response) => {\n                    if (response.status >= 200 && response.status <= 299) {\n                        return response.text();\n                    } else {\n                        throw Error(`${response.status.toString()}, Could not find \"${this.params.doc}\"`);\n                    }\n                }).then((data) => {\n                    // on SEC EDGAR workstation xhtml is encoded like this: <HTML><HEAD><TITLE> ... &lt;?xml ...\n                    const xhtmlData = this.decodeWorkstationXmlInHtml(isWorkstation, data, \"</html>\");\n                    resolve({ xhtml: xhtmlData });\n                }).catch((error) => {\n                    resolve({ error: true, message: error });\n                })\n            });\n        });\n        return Promise.all(promises).then((allXHTML: Array<{ xhtml: string, index: number }>) => {\n            return allXHTML;\n        });\n    }\n\n    fetchMeta(): Promise<{\n        error?: boolean,\n        message?: string,\n        instance?: Array<{\n            current: boolean,\n            instance: number,\n            xhtmls: Array<{\n                slug: string,\n                url: string,\n                current: boolean,\n                loaded: boolean\n            }>,\n            xmlSlug: Array<string>,\n            xmlUrls: Array<string>,\n            metaInstance: Array<Instance>\n        }>,\n        meta?: Meta,\n        inlineFiles?: Array<{ slug: string, current: boolean, loaded: boolean }>\n    }> {\n        return new Promise((resolve) => {\n            return fetch(this.params.metalinks, { credentials: 'include' }).then((response) => {\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                } else {\n                    throw Error(response.status.toString());\n                }\n            }).then((data) => {\n\n                let XHTMLSlug = this.params.doc.substr(this.params.doc.lastIndexOf('/') + 1);\n                if (XHTMLSlug.startsWith(\"DisplayDocument.do\") || XHTMLSlug.startsWith(\"view.html\")) {\n                    XHTMLSlug = this.params.doc.substr(this.params.doc.lastIndexOf('filename=') + 9);\n                }\n                const instanceKeys = Object.keys(data.instance).join().split(/[ ,]+/);\n                let sections = {}\n                if (instanceKeys.includes(XHTMLSlug)) {\n                    const instanceObjects = Object.keys(data.instance).map((current, index) => {\n\n                        Object.keys(data.instance[current].report).forEach((report) => {\n                            data.instance[current].report[report].instance = index;\n                        });\n\n                        sections = Object.assign(sections, data.instance[current].report);\n                        const xhtmls = current.split(' ').map((element) => {\n                            return {\n                                slug: element,\n                                url: this.params.doc.replace(this.params['doc-file'], element),\n                                current: current.split(' ').includes(XHTMLSlug) && element === this.params['doc-file'],\n                                loaded: false\n                            };\n                        });\n                        // How is this used?\n                        const xmlSlugs = xhtmls.map(element => element.slug.replace('.htm', '_htm.xml'));\n                        const xmlUrls = xhtmls.map(element => this.params.metalinks.replace('MetaLinks.json', element.slug.replace('.htm', '_htm.xml')));\n                        return {\n                            instance: index,\n                            xhtmls: xhtmls,\n                            current: current.split(' ').includes(XHTMLSlug),\n                            xmlSlug: xmlSlugs,\n                            xmlUrls: xmlUrls,\n                            metaInstance: Object.assign(data.instance[current]),\n                            map: new Map()\n                        }\n                    });\n                    delete data.instance;\n                    resolve({ instance: instanceObjects, ...data, sections, version: data.version });\n                } else {\n                    throw Error('Incorrect MetaLinks.json Instance');\n                }\n                resolve(data);\n            }).catch((error) => resolve({ error: true, message: `${error}, Could not find \"${this.params.metalinks}\"` }))\n        });\n    }\n\n    fetchSummary() {\n        return new Promise((resolve) => {\n            const isWorkstation = this.params.summary.includes(\"DisplayDocument.do?\");\n            return fetch(this.params.summary, { credentials: 'include' }).then((response) => {\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.text();\n                } else {\n                    throw Error(response.status.toString());\n                }\n            }).then((data) => {\n                const xmlData = this.decodeWorkstationXmlInHtml(isWorkstation, data, \"</FilingSummary>\");\n                resolve(JSON.parse(convert.xml2json(xmlData as unknown as string, { compact: true })).FilingSummary);\n            }).catch((error) => {\n                resolve({ error: true, message: `${error}, Could not find \"${this.params.summary}\"` })\n            })\n        });\n    }\n\n    fetchInstance() {\n        const promises = this.currentInstance.xmlUrls.map((current) => {\n            const isWorkstation = current.includes(\"DisplayDocument.do?\");\n            if (isWorkstation) {\n                current = current.replace('_htm.xml', '_ht1.xml')\n            }\n            return new Promise((resolve) =>\n                fetch(current).then((response) => {\n                    if (response.status >= 200 && response.status <= 299) {\n                        return response.text();\n                    } else {\n                        const indexOf = this.currentInstance.xmlUrls.indexOf(current);\n                        if (indexOf >= 0) {\n                            this.currentInstance.xmlUrls.splice(indexOf, 1);\n                        }\n                        throw Error(`${response.status.toString()}`);\n                    }\n                }, { credentials: 'include' }).then((data) => {\n                    const xmlData = this.decodeWorkstationXmlInHtml(isWorkstation, data, \"</xbrl>\");\n                    resolve({ instance: xmlData });\n                }).catch((error) => {\n                    resolve({ error: true, message: `${error}, Could not find \"XML Instance Data\"` });\n                }));\n        });\n        return Promise.all(promises).then((xmlInstances) => {\n            const instance = xmlInstances.filter(element => element.instance);\n            if (instance && instance[0]) {\n                const fetchedXMlString = instance[0].instance;\n                const instanceXmlAsJsonCompact = JSON.parse(convert.xml2json(fetchedXMlString as unknown as string, { compact: true }));\n                if (instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"] && !PRODUCTION) {\n                    const footnotesNode = instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"]\n                    // grab xml data as non compact object so element order is preserved.\n                    footnotesNode.expanded = JSON.parse(convert.xml2json(fetchedXMlString as unknown as string, { compact: false }));\n                    footnotesNode.orderedFootnoteDivs = footnotesNode.expanded.elements[0].elements;\n                    footnotesNode.asXmlString = cleanSubstring(fetchedXMlString, '<link:footnoteLink', '</link:footnoteLink>').replaceAll('\\n', '');\n                    console.log('instanceXmlAsJsonCompact', instanceXmlAsJsonCompact);\n                }\n                return instanceXmlAsJsonCompact;\n            } else {\n                return xmlInstances[0];\n            }\n        });\n    }\n\n    mergeAllResponses(\n        includeSections: boolean\n    ) {\n        this.currentInstance.map = this.buildInitialMap(this.currentInstance.xml);\n        if (includeSections) {\n            this.sections = this.extractSections();\n        }\n        this.currentInstance.formInformation = this.extractFormInformation(this.currentInstance.metaInstance);\n        this.mergeMapandMeta();\n        this.customPrefix = this.currentInstance.metaInstance.nsprefix;\n        this.prepareXHTML();\n        return;\n\n    }\n\n    buildInitialMap(instance: Instance) {\n\n        const getInstancePrefix = (instance) => {\n            const options = Object.keys(instance).filter(element => element.endsWith(':xbrl'))[0];\n            return options ? options.split(':')[0] : false;\n        };\n        const prefix = getInstancePrefix(instance);\n\n        const xbrlKey = prefix ? `${(prefix as string)}:xbrl` : 'xbrl';\n        const contextKey = prefix ? `${(prefix as string)}:context` : 'context';\n        const unitKey = prefix ? `${(prefix as string)}:unit` : 'unit';\n\n        const context = instance[xbrlKey][contextKey];\n        const unit = instance[xbrlKey][unitKey];\n        const footnote = instance[xbrlKey]['link:footnoteLink'];\n\n        delete instance[xbrlKey][contextKey];\n        delete instance[xbrlKey][unitKey];\n        delete instance[xbrlKey]._attributes;\n        delete instance[xbrlKey]['link:schemaRef'];\n        delete instance[xbrlKey]['link:footnoteLink'];\n        this.setPeriodText(context);\n        this.setSegmentData(context);\n        this.setMeasureText(unit);\n        const map = new Map();\n        let factCounter = 0;\n        for (const key in instance[xbrlKey]) {\n            /* example set of keys on instance.xbrl\n                _attributes\n                link:schemaRef\n                context\n                unit\n                dei:AmendmentFlag\n                dei:DocumentPeriodEndDate\n                dei:DocumentFiscalPeriodFocus\n                dei:EntityCentralIndexKey\n                dei:CurrentFiscalYearEndDate\n                dei:EntityEmergingGrowthCompany\n                dei:DocumentType\n                dei:DocumentFiscalYearFocus\n                dei:EntityRegistrantName\n                dei:EntityCommonStockSharesOutstanding\n                i09203gd:Content4\n                link:footnoteLink\n            */\n            if (Array.isArray(instance[xbrlKey][key])) { // this first block might handle multi instance filings.\n                instance[xbrlKey][key].forEach((current: { _attributes: DeiAmendmentFlagAttributes; _text: string; }) => {\n                    const attributes = { ...current._attributes };\n                    const id = attributes.id ? attributes.id : `fact-identifier-${factCounter}`;\n                    delete attributes.id;\n                    map.set(id, {\n                        ...attributes,\n                        name: key,\n                        ix: id,\n                        id: `fact-identifier-${factCounter++}`,\n                        value: this.isFactHTML(current._text) ? this.updateValueToRemoveIDs(current._text) : current._text,\n                        isAmountsOnly: this.isFactAmountsOnly(current._text),\n                        isTextOnly: !this.isFactAmountsOnly(current._text),\n                        isNegativeOnly: this.isFactNegativeOnly(current._text),\n                        isHTML: this.isFactHTML(current._text),\n                        period: this.setPeriodInfo(attributes.contextRef, context),\n                        period_dates: this.setPeriodDatesInfo(attributes.contextRef, context),\n                        segment: this.setSegmentInfo(attributes.contextRef, context),\n                        measure: this.setMeasureInfo(attributes.unitRef, unit),\n                        scale: this.setScaleInfo(attributes.scale),\n                        decimals: this.setDecimalsInfo(attributes.decimals),\n                        sign: this.setSignInfo(attributes.sign),\n                        footnote: this.setFootnoteInfo(id, footnote),\n                        isEnabled: true,\n                        isHighlight: false,\n                        isSelected: false,\n                        filter: {\n                            content: this.getTextFromHTML(current._text),\n                        },\n                    });\n                });\n            } else {\n                const attributes = { ...instance[xbrlKey][key]._attributes };\n                const id = attributes.id ? attributes.id : `fact-identifier-${factCounter}`;\n                delete attributes.id;\n\n                map.set(id, {\n                    ...attributes,\n                    name: key,\n                    ix: id,\n                    id: `fact-identifier-${factCounter++}`,\n                    value: this.isFactHTML(instance[xbrlKey][key]._text) ? this.updateValueToRemoveIDs(instance[xbrlKey][key]._text) : instance[xbrlKey][key]._text,\n                    isAmountsOnly: this.isFactAmountsOnly(instance[xbrlKey][key]._text),\n                    isTextOnly: !this.isFactAmountsOnly(instance[xbrlKey][key]._text),\n                    isNegativeOnly: this.isFactNegativeOnly(instance[xbrlKey][key]._text),\n                    isHTML: this.isFactHTML(instance[xbrlKey][key]._text),\n                    period: this.setPeriodInfo(attributes.contextRef, context),\n                    period_dates: this.setPeriodDatesInfo(attributes.contextRef, context),\n                    segment: this.setSegmentInfo(attributes.contextRef, context),\n                    measure: this.setMeasureInfo(attributes.unitRef, unit),\n                    scale: this.setScaleInfo(attributes.scale),\n                    decimals: this.setDecimalsInfo(attributes.decimals),\n                    sign: this.setSignInfo(attributes.sign),\n                    footnote: this.setFootnoteInfo(id, footnote),\n                    isEnabled: true,\n                    isHighlight: false,\n                    isSelected: false,\n                    filter: {\n                        content: this.getTextFromHTML(instance[xbrlKey][key]._text),\n                    },\n                });\n            }\n        }\n        return map;\n    }\n\n    extractSections() {\n        return Object.keys(this.sections).map((current) => {\n            if (this.metaVersion >= '2.2') {\n                if (this.sections[current].menuCat) {\n                    this.sections[current].groupType = this.sections[current].menuCat;\n                }\n                return this.sections[current];\n            }\n            return this.sections[current];\n        });\n    }\n\n    extractFormInformation(meta: Meta) {\n        const metaCopy = Object.assign({}, meta);\n        delete metaCopy.report;\n        delete metaCopy.tag;\n        return metaCopy;\n    }\n\n    mergeMapandMeta() {\n\n        this.currentInstance.map.forEach((currentValue: {\n            name: string;\n            segment: [{ dimension: string, axis: string }];\n            references: reference[];\n            calculations: [{ label: string, value: string }];\n            labels: string[];\n            filter: { labels: string; definitions: string; };\n            balance: string;\n            xbrltype: Xbrltype | null;\n            localname: string | null;\n            nsuri: string | null;\n            presentation: string[] | null | undefined;\n        }) => {\n            if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')]) {\n                // add references (if any) to each individual fact\n                // including references via any dimension [name]\n                // including references via any member [name]\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].auth_ref) {\n\n                    let references = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].auth_ref.map((current) => {\n                        return current;\n                    });\n\n                    if (currentValue.segment) {\n\n                        const dimensions = currentValue.segment.map((element: { dimension: string; }) => {\n                            if (element.dimension && this.currentInstance.metaInstance.tag[element.dimension.replace(':', '_')]) {\n                                return this.currentInstance.metaInstance.tag[element.dimension.replace(':', '_')].auth_ref ? this.currentInstance.metaInstance.tag[element.dimension.replace(':', '_')].auth_ref : null;\n                            }\n                        }).filter(Boolean)[0];\n\n                        const axis = currentValue.segment.map((element: { dimension: string; axis: string; }) => {\n                            if (element.dimension && this.currentInstance.metaInstance.tag[element.axis.replace(':', '_')]) {\n                                return this.currentInstance.metaInstance.tag[element.axis.replace(':', '_')].auth_ref ? this.currentInstance.metaInstance.tag[element.axis.replace(':', '_')].auth_ref : null;\n                            }\n                        }).filter(Boolean)[0];\n\n                        references = references.concat(dimensions).concat(axis);\n                    }\n\n                    currentValue.references = [...new Set(references)].map((current) => {\n                        return this.std_ref[current];\n                    }).filter(Boolean);\n                    // this order specifically for Fact References\n                    // any other key => value will be ignored and not shown to the user\n                    const requiredOrder = [\n                        `Publisher`,\n                        `Name`,\n                        `Number`,\n                        `Chapter`,\n                        `Article`,\n                        `Number Exhibit Section`,\n                        `Subsection`,\n                        `Paragraph`,\n                        `Subparagraph`,\n                        `Sentence`,\n                        `Clause`,\n                        `Subclause`,\n                        `Example`,\n                        `Footnote`,\n                        `URI`,\n                        `URIDate`,\n                    ];\n\n                    currentValue.references = currentValue.references.map((singleReference) => {\n                        return Object.keys(singleReference).reduce((accumulator, current) => {\n                            const index = requiredOrder.findIndex(element => element === current);\n                            if (index !== -1) {\n                                const returnObject = {};\n                                returnObject[current] = singleReference[current];\n                                accumulator[index] = returnObject;\n                            }\n                            return accumulator;\n                        }, new Array(Object.keys(singleReference).length).fill(null)).filter(Boolean);\n                    });\n                }\n\n                // add calculations (if any) to each individual fact\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].calculation) {\n                    const tempCalculation = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].calculation;\n                    currentValue.calculations = [];\n                    for (const property in tempCalculation) {\n                        const result = this.sections.map(element => {\n                            if (element.role === property) {\n                                return [\n                                    {\n                                        label: 'Section',\n                                        value: element.longName\n                                    },\n                                    {\n                                        label: 'Weight',\n                                        value: this.getCalculationWeight(tempCalculation[property].weight)\n                                    },\n                                    {\n                                        'label': 'Parent',\n                                        value: this.getCalculationParent(tempCalculation[property].parentTag)\n                                    }\n                                ];\n                            }\n                        }).filter(Boolean);\n                        currentValue.calculations = currentValue.calculations.concat(result);\n                    }\n                } else {\n                    currentValue.calculations = [];\n                }\n\n                // add labels (if any) to each individual fact\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].lang) {\n                    currentValue.labels = Object.keys(this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].lang).map((current) => {\n                        const oldObject = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].lang[current].role;\n                        const newObject = {};\n                        for (const property in oldObject) {\n\n                            const result = property.replace(/([A-Z])/g, ' $1');\n                            const finalResult = result.charAt(0).toUpperCase() + result.slice(1);\n                            Object.assign(newObject, { [finalResult]: oldObject[property] });\n                        }\n                        return newObject\n                    });\n\n                    currentValue.filter.labels = currentValue.labels.reduce((accumulator: string, current) => {\n                        const tempCurrent = { ...current };\n                        delete tempCurrent.documentation;\n                        return `${accumulator} ${Object.values(tempCurrent).join(' ')}`;\n\n                    }, '');\n\n                    currentValue.filter.definitions = currentValue.labels.reduce((accumulator, current: { Documentation: string; }) => {\n                        return `${accumulator} ${current.Documentation}`;\n                    }, '');\n                }\n\n                // add credit / debit\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].crdr) {\n                    const balance = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].crdr;\n                    currentValue.balance = `${balance.charAt(0).toUpperCase()}${balance.slice(1)}`;\n                }\n\n                // add xbrltype\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype) {\n                    currentValue.xbrltype = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype;\n                }\n\n                // add additional info to each individual fact\n                currentValue.localname = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].localname ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].localname : null;\n                currentValue.nsuri = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].nsuri ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].nsuri : null;\n                currentValue.presentation = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].presentation ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].presentation : null;\n                currentValue.xbrltype = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype : null;\n            }\n        });\n        // return map;\n    }\n\n    prepareXHTML() {\n        this.currentInstance.xhtmls.forEach((current) => {\n            if (current.xhtml) {\n                let $ = cheerio.load(current.xhtml, {});\n                $ = this.hiddenFacts($);\n                $ = this.fixImages($);\n                $ = this.fixLinks($);\n                // $ = this.hiddenFacts($);\n                $ = this.redLineFacts($);\n                $ = this.excludeFacts($);\n                const updates = this.attributeFacts($, this.currentInstance.map, current.slug);\n                current.xhtml = updates.xhtml;\n            }\n        });\n\n    }\n\n    fixImages($: cheerio.CheerioAPI) {\n        const startPerformance = performance.now();\n        const foundImagesArray = Array.from($('img'));\n        foundImagesArray.forEach((current) => {\n            if (!$(current).attr('src')?.startsWith('data:')) {\n                const imageSlug = $(current).attr('src')?.substr($(current).attr('src')!.lastIndexOf('/') + 1);\n                $(current).attr('src', `${this.absolute}${imageSlug}`);\n                $(current).attr('loading', 'lazy');\n            }\n        });\n        const endPerformance = performance.now();\n        if (!PRODUCTION) {\n            const items = foundImagesArray.length;\n            const log: Logger<ILogObj> = new Logger();\n            log.debug(`FetchAndMerge.fixImages() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\n        }\n        return $;\n    }\n\n    fixLinks($: cheerio.CheerioAPI) {\n        const startPerformance = performance.now();\n        const foundLinksArray = Array.from($('[data-link],[href]'));\n        foundLinksArray.forEach((current) => {\n            if (Object.prototype.hasOwnProperty.call(current.attribs, 'href')) {\n                if (current.attribs.href.startsWith('http://') ||\n                    current.attribs.href.startsWith('https://') ||\n                    current.attribs.href.startsWith('#')) {\n                    // already an absolute url, just add tabindex=18\n                    $(current).attr('tabindex', '18');\n                    // this anchor tag does not exsist in the current XHTML file\n                    if (current.attribs.href.startsWith('#') && current.attribs.href.slice(1) && $(`#${current.attribs.href.slice(1)}`).length === 0) {\n                        $(current).attr('xhtml-change', 'true');\n                    }\n                } else {\n                    // create an absolute url, add tabindex=18\n                    $(current).attr('tabindex', '18');\n                    $(current).attr('href', `${this.absolute}${current.attribs.href}`);\n                }\n            }\n            if (Object.prototype.hasOwnProperty.call(current.attribs, 'data-link')) {\n                $(current).attr('tabindex', '18');\n            }\n        });\n        const endPerformance = performance.now();\n        if (!PRODUCTION) {\n            const items = foundLinksArray.length;\n            const log: Logger<ILogObj> = new Logger();\n            log.debug(`FetchAndMerge.fixLinks() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\n        }\n        return $;\n    }\n\n    hiddenFacts($: cheerio.CheerioAPI) {\n        const startPerformance = performance.now();\n        const foundElements = Array.from($('[style*=\"-ix-hidden\"]')).slice(0, 1000);\n\n        foundElements.forEach((current) => {\n            const updatedStyle = Object.values($(current).css([\"-sec-ix-hidden\", \"-esef-ix-hidden\"]) as {}).filter(Boolean)[0];\n            const hiddenElement = $(`#${updatedStyle}`);\n            if ($(hiddenElement).length) {\n                // console.log($(hiddenElement));\n                // we now create an entirely new element based on the innerHTML\n                // of current, and the attributes of hiddenElement\n                const cheerioElement = $(`<${$(hiddenElement).prop('tagName')?.toLowerCase().replace(`:`, `\\\\:`)}>`);\n                //const id = $(hiddenElement).attr('id');\n\n                for (const key in $(hiddenElement).attr()) {\n\n                    $(cheerioElement).attr(key, $(hiddenElement).attr(key));\n                }\n                $(cheerioElement).attr('isadditionalitemsonly', 'true');\n                $(cheerioElement).attr('ishiddenelement', 'true');\n                $(cheerioElement).html($(current).text());\n                $(hiddenElement).removeAttr('id');\n                $(hiddenElement).removeAttr('contextref');\n                $(hiddenElement).removeAttr('name');\n\n                //console.log($(cheerioElement).attr('id'));\n                $(current).html($(cheerioElement));\n                if ($(cheerioElement).attr('id') === 'id3VybDovL2RvY3MudjEvZG9jOjU1M2Q3M2I4N2RhYjQ2MzQ5ZjlmNTI3Y2YwNzZjMzlhL3NlYzo1NTNkNzNiODdkYWI0NjM0OWY5ZjUyN2NmMDc2YzM5YV82MS9mcmFnOmI0ZGUyZDM0ZWE4NTRjMTc4NmFjYWIyYzRjZWRiMmQ2L3RleHRyZWdpb246YjRkZTJkMzRlYTg1NGMxNzg2YWNhYjJjNGNlZGIyZDZfNDAwNTE_70ac34fc-cc35-4fb1-ad12-4d0f52202d63') {\n                    const log: Logger<ILogObj> = new Logger();\n                    log.debug($(current).html());\n                }\n            } else {\n                const log: Logger<ILogObj> = new Logger();\n                log.debug('empty!');\n            }\n        });\n        const endPerformance = performance.now();\n        if (!PRODUCTION) {\n            const items = foundElements.length\n            const log: Logger<ILogObj> = new Logger();\n            log.debug(`FetchAndMerge.hiddenFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\n        }\n        return $;\n    }\n\n    redLineFacts($: cheerio.CheerioAPI) {\n        const startPerformance = performance.now();\n        const foundElements = Array.from($('[style*=\"-ix-redline\"]'));\n        if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\n            if (!PRODUCTION) {\n                const log: Logger<ILogObj> = new Logger();\n                log.debug(`Redline Found: ${foundElements.length}`);\n            }\n            foundElements.forEach((current) => {\n                const updatedStyle = Object.values($(current).css([\"-sec-ix-redline\", \"-esef-ix-redline\"]) as {}).filter(Boolean)[0];\n                if (updatedStyle === \"true\") {\n                    $(current).attr(\"redline\", 'true');\n                }\n            });\n        }\n        const endPerformance = performance.now();\n        if (!PRODUCTION) {\n            const items = foundElements.length;\n            const log: Logger<ILogObj> = new Logger();\n            log.debug(`FetchAndMerge.redLineFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\n        }\n        return $;\n    }\n\n    excludeFacts($: cheerio.CheerioAPI) {\n        const startPerformance = performance.now();\n        const foundElements = Array.from($('[style*=\":exclude\"]'));\n        foundElements.forEach((current) => {\n            $(current).addClass('no-hover');\n        });\n        const endPerformance = performance.now();\n        if (!PRODUCTION) {\n            const items = foundElements.length;\n            const log: Logger<ILogObj> = new Logger();\n            log.debug(`FetchAndMerge.excludeFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\n        }\n        return $;\n    }\n\n    attributeFacts($: cheerio.CheerioAPI, map: Map<string, SingleFact>, currentSlug: string) {\n        const startPerformance = performance.now();\n\n        const foundElements = Array.from($(`[contextRef]`));\n\n        foundElements.forEach((current) => {\n            $(current).attr(\"selected-fact\", 'false');\n            $(current).attr(\"hover-fact\", 'false');\n            $(current).attr(\"continued-fact\", 'false');\n            $(current).closest('table').length ? $(current).attr(\"inside-table\", 'true') : $(current).attr(\"inside-table\", 'false');\n\n            if ($(current).attr('contextref') && $(current).attr('id')) {\n\n                $(current).attr('ix', $(current).attr('id'));\n                $(current).attr('id', this.updateMap($(current)?.attr('ix') as string, $(current), currentSlug));\n            }\n            if (!$(current).prop('tagName').toLowerCase().endsWith(\"continuation\") &&\n                $(current).attr(\"continuedat\")\n            ) {\n                $(current).attr(\"continued-main-fact\", 'true');\n            }\n\n            if ($(current).attr('contextref') && !$(current).attr('id')) {\n                // for the facts in the html that have no ids...\n                const getByNameAndContextRef = (searchContextref: string | undefined, searchName: string | undefined) => {\n                    for (const [key, value] of this.currentInstance.map.entries()) {\n                        if (value.contextRef === searchContextref && value.name === searchName) {\n                            return key;\n                        }\n                    }\n                };\n                const mapKey = getByNameAndContextRef($(current).attr('contextref'), $(current).attr('name'));\n                if (mapKey) {\n\n                    $(current).attr('ix', mapKey);\n                    $(current).attr('id', mapKey);\n                    this.updateMap($(current)?.attr('ix') as string, $(current), currentSlug);\n                } else {\n                    const log: Logger<ILogObj> = new Logger();\n                    log.error(`Fact [name] && [contextRef] could not be located in the Map Object.`);\n                }\n            }\n            $(current).wrap(`<span></span>`);\n        });\n        // TODO is this a good idea?\n        // $(`${namespace}\\\\:header`).remove();\n        const endPerformance = performance.now();\n        if (!PRODUCTION) {\n            const items = foundElements.length;\n            const log: Logger<ILogObj> = new Logger();\n            log.debug(`FetchAndMerge.attributeFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\n        }\n\n        return { xhtml: $.html(), map };\n    }\n\n    updateMap(ix: string, element: cheerio.Cheerio<cheerio.Element>, currentSlug: string) {\n        this.currentInstance.map.set(\n            ix,\n            {\n                ...this.currentInstance.map.get(ix),\n                raw: element.text(),\n                format: element.attr('format') ? element.attr('format') : null,\n                isAdditional: element.parents().prop('tagName').toLowerCase().endsWith(':hidden'),\n                isCustom: (element.attr('name')?.split(':')[0].toLowerCase() === this.customPrefix),\n                isAmountsOnly: element.prop('tagName')?.split(':')[1].toLowerCase() === 'nonfraction',\n                isTextOnly: element.prop('tagName')?.split(':')[1].toLowerCase() === 'nonnumeric',\n                isNegativeOnly: element.attr('sign') === '-',\n                file: currentSlug,\n                scale: element.attr('scale') ? this.setScaleInfo(element.attr('scale') as unknown as number) : null,\n                continuedIDs: []\n            });\n\n        return this.currentInstance.map.get(ix).id;\n    }\n\n    updateValueToRemoveIDs(input: string) {\n        const $ = cheerio.load(input, { xml: false });\n        $('[id]').each(function () {\n            $(this).removeAttr('id');\n        });\n        // we also wrap the entirity of the html in a simple div\n        $('body ').wrapInner('<div></div>');\n        return $.html('body');\n    }\n\n    isFactAmountsOnly(input: string) {\n        return /^-?\\d+\\d*$/.test(input);\n    }\n\n    isFactNegativeOnly(input: string) {\n        return this.isFactAmountsOnly(input) && input.startsWith('-');\n    }\n\n    isFactHTML(input: string) {\n        return /<\\/?[a-z][\\s\\S]*>/i.test(input);\n    }\n\n    getTextFromHTML(input: string) {\n        if (this.isFactHTML(input)) {\n            const $ = cheerio.load(input);\n            return $.text();\n        }\n        return input;\n    }\n\n    setPeriodText(context: Context[]) {\n        context = Array.isArray(context) ? context : [context];\n        context?.forEach((current) => {\n            if (current.period) {\n                if (current.period.instant) {\n                    const date = new Date(current.period.instant._text);\n                    current.period._array = [`${date.getMonth() + 1}/${date.getUTCDate()}/${date.getFullYear()}`];\n                    current.period._text = `As of ${date.getMonth() + 1}/${date.getUTCDate()}/${date.getFullYear()}`;\n\n                } else if (current.period.startDate && current.period.endDate) {\n                    const startDate = new Date(current.period.startDate._text);\n                    const endDate = new Date(current.period.endDate._text);\n\n                    const yearDiff = endDate.getFullYear() - startDate.getFullYear();\n                    const monthDiff = endDate.getMonth() - startDate.getMonth() + (yearDiff * 12);\n                    current.period._array = [\n                        `${startDate.getMonth() + 1}/${startDate.getUTCDate()}/${startDate.getFullYear()}`,\n                        `${endDate.getMonth() + 1}/${endDate.getUTCDate()}/${endDate.getFullYear()}`\n                    ];\n                    if (monthDiff <= 0) {\n                        current.period._text = `${startDate.getMonth() + 1}/${startDate.getUTCDate()}/${startDate.getFullYear()} - ${endDate.getMonth() + 1}/${endDate.getUTCDate()}/${endDate.getFullYear()}`;\n                    } else {\n                        current.period._text = `${monthDiff} months ending ${endDate.getMonth() + 1}/${endDate.getUTCDate()}/${endDate.getFullYear()}`;\n                    }\n                } else {\n                    const log: Logger<ILogObj> = new Logger();\n                    log.error(`\\nFact Period is NEITHER Instant or Start / End`);\n                }\n\n            }\n        });\n    }\n\n    setPeriodInfo(contextRef: string, context: [Context]) {\n        // we go through and find the 'id' in context that equals contextRef\n        context = Array.isArray(context) ? context : [context];\n        const factContext = context?.find((element) => {\n            return element._attributes.id === contextRef;\n        });\n        if (factContext && factContext.period) {\n            return factContext.period._text;\n        }\n    }\n\n    setPeriodDatesInfo(contextRef: string, context: [Context]) {\n        // we go through and find the 'id' in context that equals contextRef\n        context = Array.isArray(context) ? context : [context];\n        const factContext = context?.find((element) => {\n            return element._attributes.id === contextRef;\n        });\n        if (factContext && factContext.period) {\n            return factContext.period._array;\n        }\n    }\n\n    setSegmentData(context: Context | undefined) {\n        context = Array.isArray(context) ? context : [context];\n        context.forEach((current) => {\n            if (current.entity && current.entity.segment) {\n                current.entity.segment.data = Object.keys(current.entity.segment).map((key) => {\n                    if (Array.isArray(current.entity.segment[key])) {\n                        return current.entity.segment[key].map((segment: { _attributes: { dimension: string; }; _text: string; }) => {\n                            return {\n                                axis: segment._attributes.dimension,\n                                dimension: segment._text,\n                                type: key.endsWith('explicitMember') ? 'explicit' : 'implicit'\n                            }\n                        });\n                    } else {\n                        return {\n                            axis: current.entity.segment[key]._attributes.dimension,\n                            dimension: current.entity.segment[key]._text ?\n                                current.entity.segment[key]._text :\n                                current.entity.segment[key][Object.keys(current.entity.segment[key]).filter(element => !element.startsWith('_'))[0]]?._text,\n                            type: key.endsWith('explicitMember') ?\n                                'explicit' :\n                                'implicit',\n                            value: !key.endsWith('explicitMember') ?\n                                current.entity.segment[key][Object.keys(current.entity.segment[key])[1]]._text :\n                                null\n                        };\n                    }\n                });\n            }\n\n        });\n    }\n\n    setSegmentInfo(contextRef: string, context: [Context]) {\n        context = Array.isArray(context) ? context : [context];\n        const factContext = context?.find((element) => {\n            return element._attributes.id === contextRef;\n        });\n        if (factContext && factContext.entity && factContext.entity.segment) {\n            return factContext.entity.segment.data;\n        }\n    }\n\n    setMeasureText(unit: Units[] | undefined) {\n        unit = Array.isArray(unit) ? unit : [unit];\n        unit.forEach((current: { measure: { _text: string; }; _text: string; divide: { unitNumerator: { measure: { _text: string; }; }; unitDenominator: { measure: { _text: string; }; }; }; }) => {\n            if (current && current.measure) {\n                const measure = current.measure._text.includes(':') ?\n                    current.measure._text.split(':')[1].toUpperCase() :\n                    current.measure._text.toUpperCase();\n                current._text = measure;\n\n            } else if (current && current.divide) {\n                const numerator = current.divide.unitNumerator.measure._text.includes(':') ?\n                    current.divide.unitNumerator.measure._text.split(':')[1].toUpperCase() :\n                    current.divide.unitNumerator.measure._text.toUpperCase();\n\n                const denominator = current.divide.unitDenominator.measure._text.includes(':') ?\n                    current.divide.unitDenominator.measure._text.split(':')[1].toUpperCase() :\n                    current.divide.unitDenominator.measure._text.toUpperCase();\n\n                current._text = `${numerator} / ${denominator}`;\n            }\n\n        });\n    }\n\n    setMeasureInfo(unitRef: string, unit: Units) {\n        if (unit) {\n            const factUnit = Array.isArray(unit) ? unit.find((element: { _attributes: { id: string; }; }) => {\n                return element._attributes.id === unitRef;\n            }) : [unit].find((element: { _attributes: { id: string; }; }) => {\n                return element._attributes.id === unitRef;\n            });\n\n            if (\n                factUnit &&\n                (Object.prototype.hasOwnProperty.call(factUnit, 'measure') || Object.prototype.hasOwnProperty.call(factUnit, 'divide'))\n            ) {\n                return factUnit._text;\n            }\n        }\n    }\n\n    setScaleInfo(scale: number) {\n        if (scale) {\n            const scaleOptions = {\n                0: \"Zero\",\n                1: \"Tens\",\n                2: \"Hundreds\",\n                3: \"Thousands\",\n                4: \"Ten thousands\",\n                5: \"Hundred thousands\",\n                6: \"Millions\",\n                7: \"Ten Millions\",\n                8: \"Hundred Millions\",\n                9: \"Billions\",\n                10: \"Ten Billions\",\n                11: \"Hundred Billions\",\n                12: \"Trillions\",\n                \"-1\": \"Tenths\",\n                \"-2\": \"Hundredths\",\n                \"-3\": \"Thousandths\",\n                \"-4\": \"Ten Thousandths\",\n                \"-5\": \"Hundred Thousandths\",\n                \"-6\": \"Millionths\"\n            };\n            return scaleOptions[scale];\n        }\n        return null;\n    }\n\n    setDecimalsInfo(decimals: string) {\n        if (decimals) {\n            const decimalsOptions = {\n                \"-1\": \"Tens\",\n                \"-2\": \"Hundreds\",\n                \"-3\": \"Thousands\",\n                \"-4\": \"Ten thousands\",\n                \"-5\": \"Hundred thousands\",\n                \"-6\": \"Millions\",\n                \"-7\": \"Ten Millions\",\n                \"-8\": \"Hundred Millions\",\n                \"-9\": \"Billions\",\n                \"-10\": \"Ten Billions\",\n                \"-11\": \"Hundred Billions\",\n                \"-12\": \"Trillions\",\n                1: \"Tenths\",\n                2: \"Hundredths\",\n                3: \"Thousandths\",\n                4: \"Ten Thousandths\",\n                5: \"Hundred Thousandths\",\n                6: \"Millionths\"\n            };\n            return decimalsOptions[decimals];\n        }\n        return null;\n    }\n\n    setSignInfo(sign: string) {\n        if (sign) {\n            const signOptions = {\n                '-': 'Negative',\n                '+': 'Positive'\n            };\n            return signOptions[sign];\n        }\n        return null;\n    }\n\n    /**\n     * Description\n     * @param {any} ftObj:object\n     * @param {any} result?:string|undefined\n     * @returns {any} concatenated text from all footnote nodes, joined by a ' '\n     */\n    accumulateFootnote(ftObj: object, result?: string | undefined) {\n        if (typeof(result) == \"undefined\") result = \"\";\n        const truncateFootnoteTo = 100;\n\n        if (result?.length > truncateFootnoteTo) {\n            result = result.substring(0, truncateFootnoteTo).substring(0, result.lastIndexOf(\" \") + 1);\n            return result += ' ...';\n        }\n\n        // let text = ''; //accumulate \"mixed-content\" text to apply after depth first descent\n        Object.keys(ftObj).forEach(node => {\n            if (node == \"_text\") {\n                result += ftObj[node] + ' ';\n            }\n            else if (Array.isArray(ftObj[node])) {\n                ftObj[node].forEach(childNode => {\n                    result = this.accumulateFootnote(childNode, result);\n                })\n            }\n            else if (node.substring(0,6) == \"xhtml:\") {\n                result = this.accumulateFootnote(ftObj[node], result);\n            }\n        });\n        return result;\n    }\n\n    /**\n     * Description\n     * @param {any} id:string\n     * @param {any} footnotes:{\"link:loc\":LinkLOC[]\n     * @param {any} \"link:footnote\":LinkFootnote[];\"link:footnoteArc\":LinkFootnoteArc[];}\n     * @returns {any} renderable footnote text to be displayed in fact modal\n     * todo: handle incoming footnotes.asXmlString or footnotes.xmlExpanded to show all content (in order) instead of just text\n     * todo: handle images, tables, ...other html elements (currently just concatenating text content)\n     */\n    setFootnoteInfo(id: string, footnotes: {\n        \"link:loc\": LinkLOC[],\n        \"link:footnote\": LinkFootnote[];\n        \"link:footnoteArc\": LinkFootnoteArc[];\n    }) {\n        if (footnotes && footnotes['link:footnoteArc']) {\n            // if array of footnotes\n            const factFootnote = Array.isArray(footnotes['link:footnoteArc']) ? footnotes['link:footnoteArc'].find((element) => {\n                return element._attributes['xlink:from'] === id;\n            }) : [footnotes['link:footnoteArc']].find((element) => {\n                return element._attributes['xlink:from'] === id;\n            });\n            if (factFootnote) {\n                if (footnotes['link:footnote']) {\n                    if (Array.isArray(footnotes['link:footnote'])) {\n                        const actualFootnote = footnotes['link:footnote']?.find((element) => {\n                            return element._attributes.id === factFootnote._attributes['xlink:to'];\n                        });\n                        return this.accumulateFootnote(actualFootnote);\n                    } else {\n                        // TODO we need way more cases\n                        if (!Array.isArray(footnotes['link:footnote']._text)) {\n                            return footnotes['link:footnote']._text;\n                        } else if (Array.isArray(footnotes['link:footnote']._text)) {\n                            return footnotes['link:footnote']._text.join('');\n                        } else if (footnotes['link:footnote']['xhtml:span']) {\n                            return footnotes['link:footnote']['xhtml:span']._text;\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    getCalculationWeight(weight: number) {\n        if (weight) {\n            return weight > 0 ?\n                `Added to parent(${weight.toFixed(2)})` :\n                `Substracted from parent(${weight.toFixed(2)})`\n        }\n        return 'Not Available.';\n    }\n\n    getCalculationParent(parent: string) {\n        if (parent) {\n            return parent.replace('_', ':');\n        }\n        return 'Not Available.';\n    }\n}","/* Created by staff of the U.S. Securities and Exchange Commission.\n * Data and content created by government employees within the scope of their employment\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\n */\n\nimport { FetchAndMerge } from '../fetch-merge';\n\nself.onmessage = ({ data }) => {\n    const fetchAndMerge = new FetchAndMerge(data);\n    fetchAndMerge.init().then(data => {\n        self.postMessage(data);\n    });\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [783], () => (__webpack_require__(7588)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.\" + \"0324a6e294b9fe34ba88\" + \".min.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/ixviewer-plus/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t549: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkixviewer_2\"] = self[\"webpackChunkixviewer_2\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","input","this","absolute","partial","map","params","customPrefix","instance","std_ref","init","XHTMLandInstance","addInstance","Promise","all","fetchXHTML","fetchInstance","then","allResponses","errors","filter","element","Object","prototype","hasOwnProperty","call","length","error","message","current","forEach","index","currentInstance","xhtmls","loaded","xhtml","xml","mergeAllResponses","sections","fetchMeta","fetchSummary","metaVersion","version","some","find","options","values","MyReports","Report","reduce","accumulator","MenuCategory","Position","ShortName","_attributes","fact","name","contextRef","additional","shortName","_text","uniqueAnchor","file","baseRef","firstAnchor","findIndex","children","push","sort","first","second","data","decodeWorkstationXmlInHtml","isWorkstation","html","closingXml","substring","toLowerCase","includes","replaceAll","indexOf","console","window","alert","promises","resolve","url","ixvUrl","replace","fetch","headers","mode","credentials","response","status","text","Error","toString","doc","xhtmlData","catch","allXHTML","metalinks","json","XHTMLSlug","substr","lastIndexOf","startsWith","instanceKeys","keys","join","split","instanceObjects","report","assign","slug","xmlSlugs","xmlUrls","xmlSlug","metaInstance","Map","summary","xmlData","JSON","parse","compact","FilingSummary","splice","xmlInstances","fetchedXMlString","instanceXmlAsJsonCompact","xbrl","includeSections","buildInitialMap","extractSections","formInformation","extractFormInformation","mergeMapandMeta","nsprefix","prepareXHTML","prefix","endsWith","getInstancePrefix","xbrlKey","contextKey","unitKey","context","unit","footnote","setPeriodText","setSegmentData","setMeasureText","factCounter","key","Array","isArray","attributes","id","set","ix","value","isFactHTML","updateValueToRemoveIDs","isAmountsOnly","isFactAmountsOnly","isTextOnly","isNegativeOnly","isFactNegativeOnly","isHTML","period","setPeriodInfo","period_dates","setPeriodDatesInfo","segment","setSegmentInfo","measure","setMeasureInfo","unitRef","scale","setScaleInfo","decimals","setDecimalsInfo","sign","setSignInfo","setFootnoteInfo","isEnabled","isHighlight","isSelected","content","getTextFromHTML","menuCat","groupType","meta","metaCopy","tag","currentValue","auth_ref","references","dimensions","dimension","Boolean","axis","concat","Set","singleReference","returnObject","fill","calculation","calculations","property","result","role","label","longName","getCalculationWeight","weight","getCalculationParent","parentTag","lang","labels","oldObject","newObject","finalResult","charAt","toUpperCase","slice","tempCurrent","documentation","definitions","Documentation","crdr","balance","xbrltype","localname","nsuri","presentation","$","hiddenFacts","fixImages","fixLinks","redLineFacts","excludeFacts","updates","attributeFacts","performance","now","from","attr","imageSlug","attribs","href","updatedStyle","css","hiddenElement","cheerioElement","prop","removeAttr","debug","foundElements","redline","addClass","currentSlug","closest","updateMap","mapKey","searchContextref","searchName","entries","getByNameAndContextRef","wrap","get","raw","format","isAdditional","parents","isCustom","continuedIDs","each","wrapInner","test","instant","date","Date","_array","getMonth","getUTCDate","getFullYear","startDate","endDate","yearDiff","monthDiff","factContext","entity","type","divide","numerator","unitNumerator","denominator","unitDenominator","factUnit","accumulateFootnote","ftObj","node","childNode","footnotes","actualFootnote","toFixed","parent","self","onmessage","FetchAndMerge","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","r","d","definition","o","defineProperty","enumerable","f","e","chunkId","u","miniCssF","obj","Symbol","toStringTag","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop"],"sourceRoot":""}