{"version":3,"file":"fetch-merge.bundle.381c88d25e098a5b825c.min.js","mappings":"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","sources":["webpack://ixviewer-2/webpack/runtime/chunk loaded","webpack://ixviewer-2/webpack/runtime/startup chunk dependencies","webpack://ixviewer-2/./src/ts/fetch-merge/index.ts","webpack://ixviewer-2/./src/ts/workers/index.ts","webpack://ixviewer-2/webpack/bootstrap","webpack://ixviewer-2/webpack/runtime/define property getters","webpack://ixviewer-2/webpack/runtime/ensure chunk","webpack://ixviewer-2/webpack/runtime/get javascript chunk filename","webpack://ixviewer-2/webpack/runtime/get mini-css chunk filename","webpack://ixviewer-2/webpack/runtime/hasOwnProperty shorthand","webpack://ixviewer-2/webpack/runtime/make namespace object","webpack://ixviewer-2/webpack/runtime/publicPath","webpack://ixviewer-2/webpack/runtime/importScripts chunk loading","webpack://ixviewer-2/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(783).then(next);\n};","import * as cheerio from 'cheerio';\r\nimport * as convert from 'xml-js';\r\nimport { Meta, Xbrltype, reference } from '../interface/meta';\r\nimport { Context, DeiAmendmentFlagAttributes, Instance, LinkFootnote, LinkFootnoteArc, LinkLOC, Units } from '../interface/instance';\r\nimport { Reference, SingleFact } from '../interface/fact';\r\nimport { Logger, ILogObj } from 'tslog';\r\n\r\n/* Created by staff of the U.S. Securities and Exchange Commission.\r\n * Data and content created by government employees within the scope of their employment\r\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\r\n */\r\nexport class FetchAndMerge {\r\n    private absolute: string;\r\n    private params: {\r\n        doc: string,\r\n        'doc-file': string,\r\n        hostName: string,\r\n        redline: boolean,\r\n        metalinks: string,\r\n        'metalinks-file': string,\r\n        fact: string,\r\n        summary: string,\r\n    };\r\n    private customPrefix: undefined | string;\r\n    private currentInstance: Array<{\r\n        current: boolean;\r\n        formInformation: {\r\n            axisCustom: number;\r\n            axisStandard: number;\r\n            baseTaxonomies: { [key: string]: number; };\r\n            contextCount: number;\r\n            dts: { [key: string]: { [key: string]: Array<string>; }; };\r\n            elementCount: number;\r\n            entityCount: 1;\r\n            hidden: { [key: string]: number; };\r\n            keyCustom: number;\r\n            keyStandard: number;\r\n            memberCustom: number;\r\n            memberStandard: number;\r\n            nsprefix: string;\r\n            nsuri: string;\r\n            segmentCount: number;\r\n            unitcount: number;\r\n        };\r\n        instance: number;\r\n        map: Map<string, SingleFact>;\r\n        metaInstance: Meta;\r\n        xhtmls: Array<{\r\n            current: boolean;\r\n            loaded: boolean;\r\n            slug: string;\r\n            url: string;\r\n            xhtml: string;\r\n        }>;\r\n        xmlSlug: Array<string>;\r\n        xmlUrls: Array<string>;\r\n    }> | undefined;\r\n    private std_ref;\r\n    private sections;\r\n    private metaVersion: string | undefined;\r\n    private instance;\r\n    constructor(input: {\r\n        absolute: string,\r\n        params: {\r\n            doc: string,\r\n            'doc-file': string,\r\n            hostName: string,\r\n            redline: boolean,\r\n            metalinks: string,\r\n            'metalinks-file': string,\r\n        },\r\n        instance: number | null,\r\n        std_ref: { [key: string]: Reference }\r\n\r\n    }) {\r\n        this.absolute = input.absolute;\r\n        this.partial = input.partial;\r\n        this.map = input.map;\r\n        this.params = input.params;\r\n        this.customPrefix = input.customPrefix;\r\n        this.instance = input.instance;\r\n        this.std_ref = input.std_ref;\r\n    }\r\n\r\n    init() {\r\n\r\n        const XHTMLandInstance = (instance, addInstance = false) => {\r\n            return Promise.all([\r\n                this.fetchXHTML(),\r\n                this.fetchInstance(),\r\n            ]).then((allResponses) => {\r\n                const errors = allResponses.filter(element => element ? Object.prototype.hasOwnProperty.call(element, 'error') : false);\r\n                if (errors.length) {\r\n                    const errorMessages = errors.map(current => current.message);\r\n                    return {\r\n                        all: { error: true, message: errorMessages }\r\n                    };\r\n                }\r\n                allResponses[0].forEach((current, index) => {\r\n                    this.currentInstance.xhtmls[index].loaded = true;\r\n                    this.currentInstance.xhtmls[index].xhtml = current.xhtml;\r\n                });\r\n                this.currentInstance.xml = (allResponses[1] as Instance);\r\n                this.mergeAllResponses(addInstance);\r\n                return {\r\n                    all: { instance: (addInstance ? instance.instance : instance), sections: this.sections, std_ref: this.std_ref }\r\n                }\r\n            })\r\n        };\r\n\r\n        const MetaandSummary = () => {\r\n            return Promise.all([\r\n                this.fetchMeta(),\r\n                this.fetchSummary(),\r\n            ]).then((allResponses) => {\r\n                this.metaVersion = allResponses[0].version;\r\n                this.std_ref = allResponses[0].std_ref;\r\n                if (allResponses.some((element) => element.error)) {\r\n                    const messageIndex = allResponses.find((element) => element.error);\r\n                    return {\r\n                        all: { error: true, message: [messageIndex.message] }\r\n                    }\r\n                } else {\r\n                    this.currentInstance = allResponses[0].instance?.filter(element => element.current)[0];\r\n\r\n                    const mapCategoryName = (input: string) => {\r\n                        const options = {\r\n                            \"Cover\": \"Cover\",\r\n                            \"document\": \"Document & Entity Information\",\r\n                            \"statement\": \"Financial Statements\",\r\n                            \"Statements\": \"Financial Statements\",\r\n                            \"disclosure\": \"Notes to the Financial Statements\",\r\n                            \"Notes\": \"Notes to Financial Statements\",\r\n                            \"Policies\": \"Accounting Policies\",\r\n                            \"Tables\": \"Notes Tables\",\r\n                            \"Details\": \"Notes Details\",\r\n                            \"Prospectus\": \"Prospectus\",\r\n                            \"RR_Summaries\": \"RR Summaries\",\r\n                            \"Fee_Exhibit\": \"RR Summaries\",\r\n                            \"Risk/Return\": \"RR Summaries\"\r\n                        };\r\n                        if (options[input]) {\r\n                            return options[input];\r\n                        }\r\n                        return 'INCOMPLETE SECTIONS DATA!';\r\n                    };\r\n                    const metaLinksSections = Object.values(allResponses[0].sections);\r\n                    this.sections = allResponses[1].MyReports.Report.reduce((accumulator, current) => {\r\n                        if (current && current.MenuCategory && current.Position && current.ShortName && current._attributes) {\r\n                            let fact = { name: '', contextRef: '', instance: null };\r\n                            const additional = metaLinksSections.find(element => element.shortName === current.ShortName._text);\r\n                            if (additional) {\r\n                                fact.instance = additional.instance;\r\n                                if (additional.uniqueAnchor) {\r\n                                    fact.name = additional.uniqueAnchor.name;\r\n                                    fact.contextRef = additional.uniqueAnchor.contextRef;\r\n                                    fact.file = additional.uniqueAnchor.baseRef;\r\n                                } else if (additional.firstAnchor) {\r\n                                    fact.name = additional.firstAnchor.name;\r\n                                    fact.contextRef = additional.firstAnchor.contextRef;\r\n                                    fact.file = additional.firstAnchor.baseRef;\r\n                                } else {\r\n                                    // MetaLinks.json does NOT have sufficient information for this section category\r\n                                    // we remove it from being used.\r\n                                    fact = null;\r\n                                }\r\n                            }\r\n                            const index = accumulator.findIndex(element => element.name === mapCategoryName(current.MenuCategory._text))\r\n                            if (index !== -1 && fact) {\r\n                                accumulator[index].children.push(\r\n                                    {\r\n                                        sort: +current.Position._text,\r\n                                        name: current.ShortName._text,\r\n                                        fact: fact,\r\n                                    }\r\n\r\n                                );\r\n                                accumulator[index].children.sort((first, second) => {\r\n                                    if (first.sort < second.sort) {\r\n                                        return -1;\r\n                                    }\r\n                                    if (first.sort > second.sort) {\r\n                                        return 1;\r\n                                    }\r\n                                    return 0;\r\n                                });\r\n                            } else if (fact) {\r\n                                accumulator.push({\r\n                                    name: mapCategoryName(current.MenuCategory._text),\r\n                                    children: [\r\n                                        {\r\n                                            sort: +current.Position._text,\r\n                                            name: current.ShortName._text,\r\n                                            file: current._attributes.instance,\r\n                                            fact: fact,\r\n                                        }\r\n                                    ]\r\n                                });\r\n\r\n                            }\r\n                        }\r\n                        return accumulator;\r\n                    }, []);\r\n                }\r\n                return Promise.all([\r\n                    XHTMLandInstance(allResponses[0], true)\r\n                ]).then(data => {\r\n                    return data[0];\r\n                })\r\n            });\r\n        };\r\n\r\n        if (this.instance !== null) {\r\n            this.currentInstance = this.instance.filter(element => element.current)[0];\r\n            return XHTMLandInstance(this.instance);\r\n        } else {\r\n            return MetaandSummary();\r\n        }\r\n    }\r\n\r\n    fetchXHTML() {\r\n        const promises = this.currentInstance?.xhtmls.map((current: { url: string }) => {\r\n            return new Promise((resolve) =>\r\n                fetch(current.url, {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/xhtml+xml\"\r\n                    },\r\n                    mode: 'no-cors',\r\n                    credentials: 'include'\r\n                }).then((response) => {\r\n                    if (response.status >= 200 && response.status <= 299) {\r\n                        return response.text();\r\n                    } else {\r\n                        throw Error(`${response.status.toString()}, Could not find \"${this.params.doc}\"`);\r\n                    }\r\n                }).then((data) => {\r\n                    resolve({ xhtml: data });\r\n                }).catch((error) => {\r\n                    resolve({ error: true, message: error });\r\n                }));\r\n        });\r\n        return Promise.all(promises).then((allXHTML: Array<{ xhtml: string, index: number }>) => {\r\n            return allXHTML;\r\n        });\r\n    }\r\n\r\n    fetchMeta(): Promise<{\r\n        error?: boolean,\r\n        message?: string,\r\n        instance?: Array<{\r\n            current: boolean,\r\n            instance: number,\r\n            xhtmls: Array<{\r\n                slug: string,\r\n                url: string,\r\n                current: boolean,\r\n                loaded: boolean\r\n            }>,\r\n            xmlSlug: Array<string>,\r\n            xmlUrls: Array<string>,\r\n            metaInstance: Array<Instance>\r\n        }>,\r\n        meta?: Meta,\r\n        inlineFiles?: Array<{ slug: string, current: boolean, loaded: boolean }>\r\n    }> {\r\n        return new Promise((resolve) => {\r\n            return fetch(this.params.metalinks, { credentials: 'include' }).then((response) => {\r\n                if (response.status >= 200 && response.status <= 299) {\r\n                    return response.json();\r\n                } else {\r\n                    throw Error(response.status.toString());\r\n                }\r\n            }).then((data) => {\r\n\r\n                const XHTMLSlug = this.params.doc.substr(this.params.doc.lastIndexOf('/') + 1);\r\n                const instanceKeys = Object.keys(data.instance).join().split(/[ ,]+/);\r\n                let sections = {}\r\n                if (instanceKeys.includes(XHTMLSlug)) {\r\n                    const instanceObjects = Object.keys(data.instance).map((current, index) => {\r\n\r\n                        Object.keys(data.instance[current].report).forEach((report) => {\r\n                            data.instance[current].report[report].instance = index;\r\n                        });\r\n\r\n                        sections = Object.assign(sections, data.instance[current].report);\r\n                        const xhtmls = current.split(' ').map((element) => {\r\n                            return {\r\n                                slug: element,\r\n                                url: this.params.doc.replace(this.params['doc-file'], element),\r\n                                current: current.split(' ').includes(XHTMLSlug) && element === this.params['doc-file'],\r\n                                loaded: false\r\n                            };\r\n                        });\r\n                        // How is this used?\r\n                        const xmlSlugs = xhtmls.map(element => element.slug.replace('.htm', '_htm.xml'));\r\n                        const xmlUrls = xhtmls.map(element => this.params.metalinks.replace('MetaLinks.json', element.slug.replace('.htm', '_htm.xml')));\r\n                        return {\r\n                            instance: index,\r\n                            xhtmls: xhtmls,\r\n                            current: current.split(' ').includes(XHTMLSlug),\r\n                            xmlSlug: xmlSlugs,\r\n                            xmlUrls: xmlUrls,\r\n                            metaInstance: Object.assign(data.instance[current]),\r\n                            map: new Map()\r\n                        }\r\n                    });\r\n                    delete data.instance;\r\n                    resolve({ instance: instanceObjects, ...data, sections, version: data.version });\r\n                } else {\r\n                    throw Error('Incorrect MetaLinks.json Instance');\r\n                }\r\n                resolve(data);\r\n            }).catch((error) => resolve({ error: true, message: `${error}, Could not find \"${this.params.metalinks}\"` }))\r\n        });\r\n    }\r\n\r\n    decodeHtml(html: string) {\r\n        // fails silently\r\n        const txt = document.createElement(\"textarea\") // this doesn't seem to execute; breakpoints and logs don't show after this.\r\n        txt.innerHTML = html\r\n        return txt.value\r\n    }\r\n\r\n    decodeHtml2(html: string) {\r\n        // only 5 encodings are used in xml\r\n        html = html.replaceAll('&lt;', '<')\r\n        html = html.replaceAll('&gt;', '>')\r\n        html = html.replaceAll('&quot;', '\"')\r\n        html = html.replaceAll('&apos;', '\\'')\r\n        html = html.replaceAll('&amp;', '&')\r\n        return html\r\n    }\r\n\r\n    trimExtraHtml(htmlString: string, startString: string, endString: string) {\r\n        // snip extraneous html from beginning and end of resopnse which is present in versions of files on workstation\r\n        const docStart = htmlString.indexOf(startString)\r\n        const endOfSummary = htmlString.indexOf(endString) + (endString).length\r\n        const docString = htmlString.substring(docStart, endOfSummary)\r\n        return docString\r\n    }\r\n\r\n    trimAndDecodeFilingSummary(data: string) {\r\n        const headOffile = data.substring(0, 100)\r\n        if (headOffile.indexOf(\"<HTML><HEAD><TITLE>\") == -1) return data\r\n        // snip extraneous html from beginning and end of resopnse which is present in versions of files on workstation\r\n        const decodedDocString = this.decodeHtml2(data) // not needed?\r\n        const trimmedDecodedCodeString = this.trimExtraHtml(decodedDocString, \"<?xml version=\", \"</FilingSummary>\")\r\n        return trimmedDecodedCodeString\r\n    }\r\n\r\n    trimAndDecodeInstanceFile(data: string) {\r\n        const headOffile = data.substring(0, 100)\r\n        if (headOffile.indexOf(\"<HTML><HEAD><TITLE>\") == -1) return data\r\n        // snip extraneous html from beginning and end of resopnse which is present in versions of files on workstation\r\n        const decodedDocString = this.decodeHtml2(data)  // not needed?\r\n        const trimmedDecodedCodeString = this.trimExtraHtml(decodedDocString, \"<?xml version=\", \"</xbrl>\")\r\n        return trimmedDecodedCodeString\r\n    }\r\n\r\n    fetchSummary() {\r\n        return new Promise((resolve) => {\r\n            return fetch(this.params.summary, { credentials: 'include' }).then((response) => {\r\n                if (response.status >= 200 && response.status <= 299) {\r\n                    return response.text();\r\n                } else {\r\n                    throw Error(response.status.toString());\r\n                }\r\n            }).then((data) => {\r\n                const formattedData = this.trimAndDecodeFilingSummary(data)\r\n                resolve(JSON.parse(convert.xml2json(formattedData as unknown as string, { compact: true })).FilingSummary)\r\n            }).catch((error) => {\r\n                resolve({ error: true, message: `${error}, Could not find \"${this.params.summary}\"` })\r\n            })\r\n        });\r\n    }\r\n\r\n    fetchInstance() {\r\n        const promises = this.currentInstance.xmlUrls.map((current) => {\r\n            return new Promise((resolve) =>\r\n                fetch(current).then((response) => {\r\n                    if (response.status >= 200 && response.status <= 299) {\r\n                        return response.text();\r\n                    } else {\r\n                        const indexOf = this.currentInstance.xmlUrls.indexOf(current);\r\n                        if (indexOf >= 0) {\r\n                            this.currentInstance.xmlUrls.splice(indexOf, 1);\r\n                        }\r\n                        throw Error(`${response.status.toString()}`);\r\n                    }\r\n                }, { credentials: 'include' }).then((data) => {\r\n                    const formattedData = this.trimAndDecodeInstanceFile(data)\r\n                    resolve({ instance: formattedData });\r\n                }).catch((error) => {\r\n                    resolve({ error: true, message: `${error}, Could not find \"XML Instance Data\"` })\r\n                }));\r\n        });\r\n        return Promise.all(promises).then((xmlInstances) => {\r\n            const instance = xmlInstances.filter(element => element.instance);\r\n            if (instance && instance[0]) {\r\n                return JSON.parse(convert.xml2json(instance[0].instance as unknown as string, { compact: true }))\r\n            } else {\r\n                return xmlInstances[0];\r\n            }\r\n        });\r\n    }\r\n\r\n    mergeAllResponses(\r\n        includeSections: boolean\r\n    ) {\r\n        this.currentInstance.map = this.buildInitialMap(this.currentInstance.xml);\r\n        if (includeSections) {\r\n            this.sections = this.extractSections();\r\n        }\r\n        this.currentInstance.formInformation = this.extractFormInformation(this.currentInstance.metaInstance);\r\n        this.mergeMapandMeta();\r\n        this.customPrefix = this.currentInstance.metaInstance.nsprefix;\r\n        this.prepareXHTML();\r\n        return;\r\n\r\n    }\r\n\r\n    buildInitialMap(instance: Instance) {\r\n\r\n        const getInstancePrefix = (instance) => {\r\n            const options = Object.keys(instance).filter(element => element.endsWith(':xbrl'))[0];\r\n            return options ? options.split(':')[0] : false;\r\n        };\r\n        const prefix = getInstancePrefix(instance);\r\n\r\n        const xbrlKey = prefix ? `${(prefix as string)}:xbrl` : 'xbrl';\r\n        const contextKey = prefix ? `${(prefix as string)}:context` : 'context';\r\n        const unitKey = prefix ? `${(prefix as string)}:unit` : 'unit';\r\n\r\n        const context = instance[xbrlKey][contextKey];\r\n        const unit = instance[xbrlKey][unitKey];\r\n        const footnote = instance[xbrlKey]['link:footnoteLink'];\r\n\r\n        delete instance[xbrlKey][contextKey];\r\n        delete instance[xbrlKey][unitKey];\r\n        delete instance[xbrlKey]._attributes;\r\n        delete instance[xbrlKey]['link:schemaRef'];\r\n        delete instance[xbrlKey]['link:footnoteLink'];\r\n        this.setPeriodText(context);\r\n        this.setSegmentData(context);\r\n        this.setMeasureText(unit);\r\n        const map = new Map();\r\n        let factCounter = 0;\r\n        for (const key in instance[xbrlKey]) {\r\n            if (Array.isArray(instance[xbrlKey][key])) {\r\n                instance[xbrlKey][key].forEach((current: { _attributes: DeiAmendmentFlagAttributes; _text: string; }) => {\r\n                    const attributes = { ...current._attributes };\r\n                    const id = attributes.id ? attributes.id : `fact-identifier-${factCounter}`;\r\n                    delete attributes.id;\r\n                    map.set(id, {\r\n                        ...attributes,\r\n                        name: key,\r\n                        ix: id,\r\n                        id: `fact-identifier-${factCounter++}`,\r\n                        value: this.isFactHTML(current._text) ? this.updateValueToRemoveIDs(current._text) : current._text,\r\n                        isAmountsOnly: this.isFactAmountsOnly(current._text),\r\n                        isTextOnly: !this.isFactAmountsOnly(current._text),\r\n                        isNegativeOnly: this.isFactNegativeOnly(current._text),\r\n                        isHTML: this.isFactHTML(current._text),\r\n                        period: this.setPeriodInfo(attributes.contextRef, context),\r\n                        period_dates: this.setPeriodDatesInfo(attributes.contextRef, context),\r\n                        segment: this.setSegmentInfo(attributes.contextRef, context),\r\n                        measure: this.setMeasureInfo(attributes.unitRef, unit),\r\n                        scale: this.setScaleInfo(attributes.scale),\r\n                        decimals: this.setDecimalsInfo(attributes.decimals),\r\n                        sign: this.setSignInfo(attributes.sign),\r\n                        footnote: this.setFootnoteInfo(id, footnote),\r\n                        isEnabled: true,\r\n                        isHighlight: false,\r\n                        isSelected: false,\r\n                        filter: {\r\n                            content: this.getTextFromHTML(current._text),\r\n                        },\r\n                    });\r\n                });\r\n            } else {\r\n                const attributes = { ...instance[xbrlKey][key]._attributes };\r\n                const id = attributes.id ? attributes.id : `fact-identifier-${factCounter}`;\r\n                delete attributes.id;\r\n\r\n                map.set(id, {\r\n                    ...attributes,\r\n                    name: key,\r\n                    ix: id,\r\n                    id: `fact-identifier-${factCounter++}`,\r\n                    value: this.isFactHTML(instance[xbrlKey][key]._text) ? this.updateValueToRemoveIDs(instance[xbrlKey][key]._text) : instance[xbrlKey][key]._text,\r\n                    isAmountsOnly: this.isFactAmountsOnly(instance[xbrlKey][key]._text),\r\n                    isTextOnly: !this.isFactAmountsOnly(instance[xbrlKey][key]._text),\r\n                    isNegativeOnly: this.isFactNegativeOnly(instance[xbrlKey][key]._text),\r\n                    isHTML: this.isFactHTML(instance[xbrlKey][key]._text),\r\n                    period: this.setPeriodInfo(attributes.contextRef, context),\r\n                    period_dates: this.setPeriodDatesInfo(attributes.contextRef, context),\r\n                    segment: this.setSegmentInfo(attributes.contextRef, context),\r\n                    measure: this.setMeasureInfo(attributes.unitRef, unit),\r\n                    scale: this.setScaleInfo(attributes.scale),\r\n                    decimals: this.setDecimalsInfo(attributes.decimals),\r\n                    sign: this.setSignInfo(attributes.sign),\r\n                    footnote: this.setFootnoteInfo(id, footnote),\r\n                    isEnabled: true,\r\n                    isHighlight: false,\r\n                    isSelected: false,\r\n                    filter: {\r\n                        content: this.getTextFromHTML(instance[xbrlKey][key]._text),\r\n                    },\r\n                });\r\n            }\r\n        }\r\n        return map;\r\n    }\r\n\r\n    extractSections() {\r\n        return Object.keys(this.sections).map((current) => {\r\n            if (this.metaVersion >= '2.2') {\r\n                if (this.sections[current].menuCat) {\r\n                    this.sections[current].groupType = this.sections[current].menuCat;\r\n                }\r\n                return this.sections[current];\r\n            }\r\n            return this.sections[current];\r\n        });\r\n    }\r\n\r\n    extractFormInformation(meta: Meta) {\r\n        const metaCopy = Object.assign({}, meta);\r\n        delete metaCopy.report;\r\n        delete metaCopy.tag;\r\n        return metaCopy;\r\n    }\r\n\r\n    mergeMapandMeta() {\r\n\r\n        this.currentInstance.map.forEach((currentValue: {\r\n            name: string;\r\n            segment: [{ dimension: string, axis: string }];\r\n            references: reference[];\r\n            calculations: [{ label: string, value: string }];\r\n            labels: string[];\r\n            filter: { labels: string; definitions: string; };\r\n            balance: string;\r\n            xbrltype: Xbrltype | null;\r\n            localname: string | null;\r\n            nsuri: string | null;\r\n            presentation: string[] | null | undefined;\r\n        }) => {\r\n            if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')]) {\r\n                // add references (if any) to each individual fact\r\n                // including references via any dimension [name]\r\n                // including references via any member [name]\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].auth_ref) {\r\n\r\n                    let references = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].auth_ref.map((current) => {\r\n                        return current;\r\n                    });\r\n\r\n                    if (currentValue.segment) {\r\n\r\n                        const dimensions = currentValue.segment.map((element: { dimension: string; }) => {\r\n                            if (element.dimension && this.currentInstance.metaInstance.tag[element.dimension.replace(':', '_')]) {\r\n                                return this.currentInstance.metaInstance.tag[element.dimension.replace(':', '_')].auth_ref ? this.currentInstance.metaInstance.tag[element.dimension.replace(':', '_')].auth_ref : null;\r\n                            }\r\n                        }).filter(Boolean)[0];\r\n\r\n                        const axis = currentValue.segment.map((element: { dimension: string; axis: string; }) => {\r\n                            if (element.dimension && this.currentInstance.metaInstance.tag[element.axis.replace(':', '_')]) {\r\n                                return this.currentInstance.metaInstance.tag[element.axis.replace(':', '_')].auth_ref ? this.currentInstance.metaInstance.tag[element.axis.replace(':', '_')].auth_ref : null;\r\n                            }\r\n                        }).filter(Boolean)[0];\r\n\r\n                        references = references.concat(dimensions).concat(axis);\r\n                    }\r\n\r\n                    currentValue.references = [...new Set(references)].map((current) => {\r\n                        return this.std_ref[current];\r\n                    }).filter(Boolean);\r\n                    // this order specifically for Fact References\r\n                    // any other key => value will be ignored and not shown to the user\r\n                    const requiredOrder = [\r\n                        `Publisher`,\r\n                        `Name`,\r\n                        `Number`,\r\n                        `Chapter`,\r\n                        `Article`,\r\n                        `Number Exhibit Section`,\r\n                        `Subsection`,\r\n                        `Paragraph`,\r\n                        `Subparagraph`,\r\n                        `Sentence`,\r\n                        `Clause`,\r\n                        `Subclause`,\r\n                        `Example`,\r\n                        `Footnote`,\r\n                        `URI`,\r\n                        `URIDate`,\r\n                    ];\r\n\r\n                    currentValue.references = currentValue.references.map((singleReference) => {\r\n                        return Object.keys(singleReference).reduce((accumulator, current) => {\r\n                            const index = requiredOrder.findIndex(element => element === current);\r\n                            if (index !== -1) {\r\n                                const returnObject = {};\r\n                                returnObject[current] = singleReference[current];\r\n                                accumulator[index] = returnObject;\r\n                            }\r\n                            return accumulator;\r\n                        }, new Array(Object.keys(singleReference).length).fill(null)).filter(Boolean);\r\n                    });\r\n                }\r\n\r\n                // add calculations (if any) to each individual fact\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].calculation) {\r\n                    const tempCalculation = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].calculation;\r\n                    currentValue.calculations = [];\r\n                    for (const property in tempCalculation) {\r\n                        const result = this.sections.map(element => {\r\n                            if (element.role === property) {\r\n                                return [\r\n                                    {\r\n                                        label: 'Section',\r\n                                        value: element.longName\r\n                                    },\r\n                                    {\r\n                                        label: 'Weight',\r\n                                        value: this.getCalculationWeight(tempCalculation[property].weight)\r\n                                    },\r\n                                    {\r\n                                        'label': 'Parent',\r\n                                        value: this.getCalculationParent(tempCalculation[property].parentTag)\r\n                                    }\r\n                                ];\r\n                            }\r\n                        }).filter(Boolean);\r\n                        currentValue.calculations = currentValue.calculations.concat(result);\r\n                    }\r\n                } else {\r\n                    currentValue.calculations = [];\r\n                }\r\n\r\n                // add labels (if any) to each individual fact\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].lang) {\r\n                    currentValue.labels = Object.keys(this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].lang).map((current) => {\r\n                        const oldObject = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].lang[current].role;\r\n                        const newObject = {};\r\n                        for (const property in oldObject) {\r\n\r\n                            const result = property.replace(/([A-Z])/g, ' $1');\r\n                            const finalResult = result.charAt(0).toUpperCase() + result.slice(1);\r\n                            Object.assign(newObject, { [finalResult]: oldObject[property] });\r\n                        }\r\n                        return newObject\r\n                    });\r\n\r\n                    currentValue.filter.labels = currentValue.labels.reduce((accumulator: string, current) => {\r\n                        const tempCurrent = { ...current };\r\n                        delete tempCurrent.documentation;\r\n                        return `${accumulator} ${Object.values(tempCurrent).join(' ')}`;\r\n\r\n                    }, '');\r\n\r\n                    currentValue.filter.definitions = currentValue.labels.reduce((accumulator, current: { Documentation: string; }) => {\r\n                        return `${accumulator} ${current.Documentation}`;\r\n                    }, '');\r\n                }\r\n\r\n                // add credit / debit\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].crdr) {\r\n                    const balance = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].crdr;\r\n                    currentValue.balance = `${balance.charAt(0).toUpperCase()}${balance.slice(1)}`;\r\n                }\r\n\r\n                // add xbrltype\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype) {\r\n                    currentValue.xbrltype = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype;\r\n                }\r\n\r\n                // add additional info to each individual fact\r\n                currentValue.localname = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].localname ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].localname : null;\r\n                currentValue.nsuri = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].nsuri ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].nsuri : null;\r\n                currentValue.presentation = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].presentation ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].presentation : null;\r\n                currentValue.xbrltype = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype : null;\r\n            }\r\n        });\r\n        // return map;\r\n    }\r\n\r\n    prepareXHTML() {\r\n        this.currentInstance.xhtmls.forEach((current) => {\r\n            if (current.xhtml) {\r\n                let $ = cheerio.load(current.xhtml, {});\r\n                $ = this.hiddenFacts($);\r\n                $ = this.fixImages($);\r\n                $ = this.fixLinks($);\r\n                // $ = this.hiddenFacts($);\r\n                $ = this.redLineFacts($);\r\n                $ = this.excludeFacts($);\r\n                const updates = this.attributeFacts($, this.currentInstance.map, current.slug);\r\n                current.xhtml = updates.xhtml;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    fixImages($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        const foundImagesArray = Array.from($('img'));\r\n        foundImagesArray.forEach((current) => {\r\n            if (!$(current).attr('src')?.startsWith('data:')) {\r\n                const imageSlug = $(current).attr('src')?.substr($(current).attr('src')!.lastIndexOf('/') + 1);\r\n                $(current).attr('src', `${this.absolute}${imageSlug}`);\r\n                $(current).attr('loading', 'lazy');\r\n            }\r\n        });\r\n        const endPerformance = performance.now();\r\n        if (!PRODUCTION) {\r\n            const items = foundImagesArray.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`\\nFetchAndMerge.fixImages() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    fixLinks($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        const foundLinksArray = Array.from($('[data-link],[href]'));\r\n        foundLinksArray.forEach((current) => {\r\n            if (Object.prototype.hasOwnProperty.call(current.attribs, 'href')) {\r\n                if (current.attribs.href.startsWith('http://') ||\r\n                    current.attribs.href.startsWith('https://') ||\r\n                    current.attribs.href.startsWith('#')) {\r\n                    // already an absolute url, just add tabindex=18\r\n                    $(current).attr('tabindex', '18');\r\n                    // this anchor tag does not exsist in the current XHTML file\r\n                    if (current.attribs.href.startsWith('#') && current.attribs.href.slice(1) && $(`#${current.attribs.href.slice(1)}`).length === 0) {\r\n                        $(current).attr('xhtml-change', 'true');\r\n                    }\r\n                } else {\r\n                    // create an absolute url, add tabindex=18\r\n                    $(current).attr('tabindex', '18');\r\n                    $(current).attr('href', `${this.absolute}${current.attribs.href}`);\r\n                }\r\n            }\r\n            if (Object.prototype.hasOwnProperty.call(current.attribs, 'data-link')) {\r\n                $(current).attr('tabindex', '18');\r\n            }\r\n        });\r\n        const endPerformance = performance.now();\r\n        if (!PRODUCTION) {\r\n            const items = foundLinksArray.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`\\nFetchAndMerge.fixLinks() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    hiddenFacts($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        const foundElements = Array.from($('[style*=\"-ix-hidden\"]')).slice(0, 1000);\r\n\r\n        foundElements.forEach((current) => {\r\n            const updatedStyle = Object.values($(current).css([\"-sec-ix-hidden\", \"-esef-ix-hidden\"]) as {}).filter(Boolean)[0];\r\n            const hiddenElement = $(`#${updatedStyle}`);\r\n            if ($(hiddenElement).length) {\r\n                // console.log($(hiddenElement));\r\n                // we now create an entirely new element based on the innerHTML\r\n                // of current, and the attributes of hiddenElement\r\n                const cheerioElement = $(`<${$(hiddenElement).prop('tagName')?.toLowerCase().replace(`:`, `\\\\:`)}>`);\r\n                //const id = $(hiddenElement).attr('id');\r\n\r\n                for (const key in $(hiddenElement).attr()) {\r\n\r\n                    $(cheerioElement).attr(key, $(hiddenElement).attr(key));\r\n                }\r\n                $(cheerioElement).attr('isadditionalitemsonly', 'true');\r\n                $(cheerioElement).attr('ishiddenelement', 'true');\r\n                $(cheerioElement).html($(current).text());\r\n                $(hiddenElement).removeAttr('id');\r\n                $(hiddenElement).removeAttr('contextref');\r\n                $(hiddenElement).removeAttr('name');\r\n\r\n                //console.log($(cheerioElement).attr('id'));\r\n                $(current).html($(cheerioElement));\r\n                if ($(cheerioElement).attr('id') === 'id3VybDovL2RvY3MudjEvZG9jOjU1M2Q3M2I4N2RhYjQ2MzQ5ZjlmNTI3Y2YwNzZjMzlhL3NlYzo1NTNkNzNiODdkYWI0NjM0OWY5ZjUyN2NmMDc2YzM5YV82MS9mcmFnOmI0ZGUyZDM0ZWE4NTRjMTc4NmFjYWIyYzRjZWRiMmQ2L3RleHRyZWdpb246YjRkZTJkMzRlYTg1NGMxNzg2YWNhYjJjNGNlZGIyZDZfNDAwNTE_70ac34fc-cc35-4fb1-ad12-4d0f52202d63') {\r\n                    const log: Logger<ILogObj> = new Logger();\r\n                    log.debug($(current).html());\r\n                }\r\n            } else {\r\n                const log: Logger<ILogObj> = new Logger();\r\n                log.debug('empty!');\r\n            }\r\n        });\r\n        const endPerformance = performance.now();\r\n        if (!PRODUCTION) {\r\n            const items = foundElements.length\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`\\nFetchAndMerge.hiddenFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    redLineFacts($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        const foundElements = Array.from($('[style*=\"-ix-redline\"]'));\r\n        if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\r\n            if (!PRODUCTION) {\r\n                const log: Logger<ILogObj> = new Logger();\r\n                log.debug(`\\nRedline Found: ${foundElements.length}`);\r\n            }\r\n            foundElements.forEach((current) => {\r\n                const updatedStyle = Object.values($(current).css([\"-sec-ix-redline\", \"-esef-ix-redline\"]) as {}).filter(Boolean)[0];\r\n                if (updatedStyle === \"true\") {\r\n                    $(current).attr(\"redline\", 'true');\r\n                }\r\n            });\r\n        }\r\n        const endPerformance = performance.now();\r\n        if (!PRODUCTION) {\r\n            const items = foundElements.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`\\nFetchAndMerge.redLineFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    excludeFacts($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        const foundElements = Array.from($('[style*=\":exclude\"]'));\r\n        foundElements.forEach((current) => {\r\n            $(current).addClass('no-hover');\r\n        });\r\n        const endPerformance = performance.now();\r\n        if (!PRODUCTION) {\r\n            const items = foundElements.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`\\nFetchAndMerge.excludeFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    attributeFacts($: cheerio.CheerioAPI, map: Map<string, SingleFact>, currentSlug: string) {\r\n        const startPerformance = performance.now();\r\n\r\n        const foundElements = Array.from($(`[contextRef]`));\r\n\r\n        foundElements.forEach((current) => {\r\n            $(current).attr(\"selected-fact\", 'false');\r\n            $(current).attr(\"hover-fact\", 'false');\r\n            $(current).attr(\"continued-fact\", 'false');\r\n            $(current).closest('table').length ? $(current).attr(\"inside-table\", 'true') : $(current).attr(\"inside-table\", 'false');\r\n\r\n            if ($(current).attr('contextref') && $(current).attr('id')) {\r\n\r\n                $(current).attr('ix', $(current).attr('id'));\r\n                $(current).attr('id', this.updateMap($(current)?.attr('ix') as string, $(current), currentSlug));\r\n            }\r\n            if (!$(current).prop('tagName').toLowerCase().endsWith(\"continuation\") &&\r\n                $(current).attr(\"continuedat\")\r\n            ) {\r\n                $(current).attr(\"continued-main-fact\", 'true');\r\n            }\r\n\r\n            if ($(current).attr('contextref') && !$(current).attr('id')) {\r\n                // for the facts in the html that have no ids...\r\n                const getByNameAndContextRef = (searchContextref: string | undefined, searchName: string | undefined) => {\r\n                    for (const [key, value] of this.currentInstance.map.entries()) {\r\n                        if (value.contextRef === searchContextref && value.name === searchName) {\r\n                            return key;\r\n                        }\r\n                    }\r\n                };\r\n                const mapKey = getByNameAndContextRef($(current).attr('contextref'), $(current).attr('name'));\r\n                if (mapKey) {\r\n\r\n                    $(current).attr('ix', mapKey);\r\n                    $(current).attr('id', mapKey);\r\n                    this.updateMap($(current)?.attr('ix') as string, $(current), currentSlug);\r\n                } else {\r\n                    const log: Logger<ILogObj> = new Logger();\r\n                    log.error(`Fact [name] && [contextRef] could not be located in the Map Object.`);\r\n                }\r\n            }\r\n            $(current).wrap(`<span></span>`);\r\n        });\r\n        // TODO is this a good idea?\r\n        // $(`${namespace}\\\\:header`).remove();\r\n        const endPerformance = performance.now();\r\n        if (!PRODUCTION) {\r\n            const items = foundElements.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`\\nFetchAndMerge.attributeFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n\r\n        return { xhtml: $.html(), map };\r\n    }\r\n\r\n    updateMap(ix: string, element: cheerio.Cheerio<cheerio.Element>, currentSlug: string) {\r\n        this.currentInstance.map.set(\r\n            ix,\r\n            {\r\n                ...this.currentInstance.map.get(ix),\r\n                raw: element.text(),\r\n                format: element.attr('format') ? element.attr('format') : null,\r\n                isAdditional: element.parents().prop('tagName').toLowerCase().endsWith(':hidden'),\r\n                isCustom: (element.attr('name')?.split(':')[0].toLowerCase() === this.customPrefix),\r\n                isAmountsOnly: element.prop('tagName')?.split(':')[1].toLowerCase() === 'nonfraction',\r\n                isTextOnly: element.prop('tagName')?.split(':')[1].toLowerCase() === 'nonnumeric',\r\n                isNegativeOnly: element.attr('sign') === '-',\r\n                file: currentSlug,\r\n                scale: element.attr('scale') ? this.setScaleInfo(element.attr('scale') as unknown as number) : null,\r\n                continuedIDs: []\r\n            });\r\n\r\n        return this.currentInstance.map.get(ix).id;\r\n    }\r\n\r\n    updateValueToRemoveIDs(input: string) {\r\n        const $ = cheerio.load(input, { xml: false });\r\n        $('[id]').each(function () {\r\n            $(this).removeAttr('id');\r\n        });\r\n        // we also wrap the entirity of the html in a simple div\r\n        $('body ').wrapInner('<div></div>');\r\n        return $.html('body');\r\n    }\r\n\r\n    isFactAmountsOnly(input: string) {\r\n        return /^-?\\d+\\d*$/.test(input);\r\n    }\r\n\r\n    isFactNegativeOnly(input: string) {\r\n        return this.isFactAmountsOnly(input) && input.startsWith('-');\r\n    }\r\n\r\n    isFactHTML(input: string) {\r\n        return /<\\/?[a-z][\\s\\S]*>/i.test(input);\r\n    }\r\n\r\n    getTextFromHTML(input: string) {\r\n        if (this.isFactHTML(input)) {\r\n            const $ = cheerio.load(input);\r\n            return $.text();\r\n        }\r\n        return input;\r\n    }\r\n\r\n    setPeriodText(context: Context[]) {\r\n        context = Array.isArray(context) ? context : [context];\r\n        context?.forEach((current) => {\r\n            if (current.period) {\r\n                if (current.period.instant) {\r\n                    const date = new Date(current.period.instant._text);\r\n                    current.period._array = [`${date.getMonth() + 1}/${date.getUTCDate()}/${date.getFullYear()}`];\r\n                    current.period._text = `As of ${date.getMonth() + 1}/${date.getUTCDate()}/${date.getFullYear()}`;\r\n\r\n                } else if (current.period.startDate && current.period.endDate) {\r\n                    const startDate = new Date(current.period.startDate._text);\r\n                    const endDate = new Date(current.period.endDate._text);\r\n\r\n                    const yearDiff = endDate.getFullYear() - startDate.getFullYear();\r\n                    const monthDiff = endDate.getMonth() - startDate.getMonth() + (yearDiff * 12);\r\n                    current.period._array = [\r\n                        `${startDate.getMonth() + 1}/${startDate.getUTCDate()}/${startDate.getFullYear()}`,\r\n                        `${endDate.getMonth() + 1}/${endDate.getUTCDate()}/${endDate.getFullYear()}`\r\n                    ];\r\n                    if (monthDiff <= 0) {\r\n                        current.period._text = `${startDate.getMonth() + 1}/${startDate.getUTCDate()}/${startDate.getFullYear()} - ${endDate.getMonth() + 1}/${endDate.getUTCDate()}/${endDate.getFullYear()}`;\r\n                    } else {\r\n                        current.period._text = `${monthDiff} months ending ${endDate.getMonth() + 1}/${endDate.getUTCDate()}/${endDate.getFullYear()}`;\r\n                    }\r\n                } else {\r\n                    const log: Logger<ILogObj> = new Logger();\r\n                    log.error(`\\nFact Period is NEITHER Instant or Start / End`);\r\n                }\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    setPeriodInfo(contextRef: string, context: [Context]) {\r\n        // we go through and find the 'id' in context that equals contextRef \r\n        context = Array.isArray(context) ? context : [context];\r\n        const factContext = context?.find((element) => {\r\n            return element._attributes.id === contextRef;\r\n        });\r\n        if (factContext && factContext.period) {\r\n            return factContext.period._text;\r\n        }\r\n    }\r\n\r\n    setPeriodDatesInfo(contextRef: string, context: [Context]) {\r\n        // we go through and find the 'id' in context that equals contextRef \r\n        context = Array.isArray(context) ? context : [context];\r\n        const factContext = context?.find((element) => {\r\n            return element._attributes.id === contextRef;\r\n        });\r\n        if (factContext && factContext.period) {\r\n            return factContext.period._array;\r\n        }\r\n    }\r\n\r\n    setSegmentData(context: Context | undefined) {\r\n        context = Array.isArray(context) ? context : [context];\r\n        context.forEach((current) => {\r\n            if (current.entity && current.entity.segment) {\r\n                current.entity.segment.data = Object.keys(current.entity.segment).map((key) => {\r\n                    if (Array.isArray(current.entity.segment[key])) {\r\n                        return current.entity.segment[key].map((segment: { _attributes: { dimension: string; }; _text: string; }) => {\r\n                            return {\r\n                                axis: segment._attributes.dimension,\r\n                                dimension: segment._text,\r\n                                type: key.endsWith('explicitMember') ? 'explicit' : 'implicit'\r\n                            }\r\n                        });\r\n                    } else {\r\n                        return {\r\n                            axis: current.entity.segment[key]._attributes.dimension,\r\n                            dimension: current.entity.segment[key]._text ?\r\n                                current.entity.segment[key]._text :\r\n                                current.entity.segment[key][Object.keys(current.entity.segment[key]).filter(element => !element.startsWith('_'))[0]]?._text,\r\n                            type: key.endsWith('explicitMember') ?\r\n                                'explicit' :\r\n                                'implicit',\r\n                            value: !key.endsWith('explicitMember') ?\r\n                                current.entity.segment[key][Object.keys(current.entity.segment[key])[1]]._text :\r\n                                null\r\n                        };\r\n                    }\r\n                });\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    setSegmentInfo(contextRef: string, context: [Context]) {\r\n        context = Array.isArray(context) ? context : [context];\r\n        const factContext = context?.find((element) => {\r\n            return element._attributes.id === contextRef;\r\n        });\r\n        if (factContext && factContext.entity && factContext.entity.segment) {\r\n            return factContext.entity.segment.data;\r\n        }\r\n    }\r\n\r\n    setMeasureText(unit: Units[] | undefined) {\r\n        unit = Array.isArray(unit) ? unit : [unit];\r\n        unit.forEach((current: { measure: { _text: string; }; _text: string; divide: { unitNumerator: { measure: { _text: string; }; }; unitDenominator: { measure: { _text: string; }; }; }; }) => {\r\n            if (current && current.measure) {\r\n                const measure = current.measure._text.includes(':') ?\r\n                    current.measure._text.split(':')[1].toUpperCase() :\r\n                    current.measure._text.toUpperCase();\r\n                current._text = measure;\r\n\r\n            } else if (current && current.divide) {\r\n                const numerator = current.divide.unitNumerator.measure._text.includes(':') ?\r\n                    current.divide.unitNumerator.measure._text.split(':')[1].toUpperCase() :\r\n                    current.divide.unitNumerator.measure._text.toUpperCase();\r\n\r\n                const denominator = current.divide.unitDenominator.measure._text.includes(':') ?\r\n                    current.divide.unitDenominator.measure._text.split(':')[1].toUpperCase() :\r\n                    current.divide.unitDenominator.measure._text.toUpperCase();\r\n\r\n                current._text = `${numerator} / ${denominator}`;\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    setMeasureInfo(unitRef: string, unit: Units) {\r\n        if (unit) {\r\n            const factUnit = Array.isArray(unit) ? unit.find((element: { _attributes: { id: string; }; }) => {\r\n                return element._attributes.id === unitRef;\r\n            }) : [unit].find((element: { _attributes: { id: string; }; }) => {\r\n                return element._attributes.id === unitRef;\r\n            });\r\n\r\n            if (\r\n                factUnit &&\r\n                (Object.prototype.hasOwnProperty.call(factUnit, 'measure') || Object.prototype.hasOwnProperty.call(factUnit, 'divide'))\r\n            ) {\r\n                return factUnit._text;\r\n            }\r\n        }\r\n    }\r\n\r\n    setScaleInfo(scale: number) {\r\n        if (scale) {\r\n            const scaleOptions = {\r\n                0: \"Zero\",\r\n                1: \"Tens\",\r\n                2: \"Hundreds\",\r\n                3: \"Thousands\",\r\n                4: \"Ten thousands\",\r\n                5: \"Hundred thousands\",\r\n                6: \"Millions\",\r\n                7: \"Ten Millions\",\r\n                8: \"Hundred Millions\",\r\n                9: \"Billions\",\r\n                10: \"Ten Billions\",\r\n                11: \"Hundred Billions\",\r\n                12: \"Trillions\",\r\n                \"-1\": \"Tenths\",\r\n                \"-2\": \"Hundredths\",\r\n                \"-3\": \"Thousandths\",\r\n                \"-4\": \"Ten Thousandths\",\r\n                \"-5\": \"Hundred Thousandths\",\r\n                \"-6\": \"Millionths\"\r\n            };\r\n            return scaleOptions[scale];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setDecimalsInfo(decimals: string) {\r\n        if (decimals) {\r\n            const decimalsOptions = {\r\n                \"-1\": \"Tens\",\r\n                \"-2\": \"Hundreds\",\r\n                \"-3\": \"Thousands\",\r\n                \"-4\": \"Ten thousands\",\r\n                \"-5\": \"Hundred thousands\",\r\n                \"-6\": \"Millions\",\r\n                \"-7\": \"Ten Millions\",\r\n                \"-8\": \"Hundred Millions\",\r\n                \"-9\": \"Billions\",\r\n                \"-10\": \"Ten Billions\",\r\n                \"-11\": \"Hundred Billions\",\r\n                \"-12\": \"Trillions\",\r\n                1: \"Tenths\",\r\n                2: \"Hundredths\",\r\n                3: \"Thousandths\",\r\n                4: \"Ten Thousandths\",\r\n                5: \"Hundred Thousandths\",\r\n                6: \"Millionths\"\r\n            };\r\n            return decimalsOptions[decimals];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setSignInfo(sign: string) {\r\n        if (sign) {\r\n            const signOptions = {\r\n                '-': 'Negative',\r\n                '+': 'Positive'\r\n            };\r\n            return signOptions[sign];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setFootnoteInfo(id: string, footnotes: {\r\n        \"link:loc\": LinkLOC[],\r\n        \"link:footnote\": LinkFootnote[];\r\n        \"link:footnoteArc\": LinkFootnoteArc[];\r\n    }) {\r\n        if (footnotes && footnotes['link:footnoteArc']) {\r\n            const factFootnote = Array.isArray(footnotes['link:footnoteArc']) ? footnotes['link:footnoteArc'].find((element) => {\r\n                return element._attributes['xlink:from'] === id;\r\n            }) : [footnotes['link:footnoteArc']].find((element) => {\r\n                return element._attributes['xlink:from'] === id;\r\n            });\r\n            if (factFootnote) {\r\n                if (footnotes['link:footnote']) {\r\n                    if (Array.isArray(footnotes['link:footnote'])) {\r\n\r\n                        const actualFootnote = footnotes['link:footnote']?.find((element) => {\r\n                            return element._attributes.id === factFootnote._attributes['xlink:to'];\r\n                        });\r\n                        return actualFootnote?._text;\r\n                    } else {\r\n                        // TODO we need way more cases\r\n                        if (!Array.isArray(footnotes['link:footnote']._text)) {\r\n                            return footnotes['link:footnote']._text;\r\n                        } else if (Array.isArray(footnotes['link:footnote']._text)) {\r\n                            return footnotes['link:footnote']._text.join('');\r\n                        } else if (footnotes['link:footnote']['xhtml:span']) {\r\n                            return footnotes['link:footnote']['xhtml:span']._text;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getCalculationWeight(weight: number) {\r\n        if (weight) {\r\n            return weight > 0 ?\r\n                `Added to parent(${weight.toFixed(2)})` :\r\n                `Substracted from parent(${weight.toFixed(2)})`\r\n        }\r\n        return 'Not Available.';\r\n    }\r\n\r\n    getCalculationParent(parent: string) {\r\n        if (parent) {\r\n            return parent.replace('_', ':');\r\n        }\r\n        return 'Not Available.';\r\n    }\r\n}","/* Created by staff of the U.S. Securities and Exchange Commission.\r\n * Data and content created by government employees within the scope of their employment\r\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\r\n */\r\n\r\nimport { FetchAndMerge } from '../fetch-merge';\r\n\r\nself.onmessage = ({ data }) => {\r\n    const fetchAndMerge = new FetchAndMerge(data);\r\n    fetchAndMerge.init().then(data => {\r\n        self.postMessage(data);\r\n    });\r\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [783], () => (__webpack_require__(7588)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.\" + \"0324a6e294b9fe34ba88\" + \".min.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/iyviewer/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t549: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkixviewer_2\"] = self[\"webpackChunkixviewer_2\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","input","this","absolute","partial","map","params","customPrefix","instance","std_ref","init","XHTMLandInstance","addInstance","Promise","all","fetchXHTML","fetchInstance","then","allResponses","errors","filter","element","Object","prototype","hasOwnProperty","call","length","error","message","current","forEach","index","currentInstance","xhtmls","loaded","xhtml","xml","mergeAllResponses","sections","fetchMeta","fetchSummary","metaVersion","version","some","find","options","values","MyReports","Report","reduce","accumulator","MenuCategory","Position","ShortName","_attributes","fact","name","contextRef","additional","shortName","_text","uniqueAnchor","file","baseRef","firstAnchor","findIndex","children","push","sort","first","second","data","promises","resolve","fetch","url","headers","mode","credentials","response","status","text","Error","toString","doc","catch","allXHTML","metalinks","json","XHTMLSlug","substr","lastIndexOf","instanceKeys","keys","join","split","includes","instanceObjects","report","assign","slug","replace","xmlSlugs","xmlUrls","xmlSlug","metaInstance","Map","decodeHtml","html","txt","document","createElement","innerHTML","value","decodeHtml2","replaceAll","trimExtraHtml","htmlString","startString","endString","docStart","indexOf","endOfSummary","substring","trimAndDecodeFilingSummary","decodedDocString","trimAndDecodeInstanceFile","summary","formattedData","JSON","parse","compact","FilingSummary","splice","xmlInstances","includeSections","buildInitialMap","extractSections","formInformation","extractFormInformation","mergeMapandMeta","nsprefix","prepareXHTML","prefix","endsWith","getInstancePrefix","xbrlKey","contextKey","unitKey","context","unit","footnote","setPeriodText","setSegmentData","setMeasureText","factCounter","key","Array","isArray","attributes","id","set","ix","isFactHTML","updateValueToRemoveIDs","isAmountsOnly","isFactAmountsOnly","isTextOnly","isNegativeOnly","isFactNegativeOnly","isHTML","period","setPeriodInfo","period_dates","setPeriodDatesInfo","segment","setSegmentInfo","measure","setMeasureInfo","unitRef","scale","setScaleInfo","decimals","setDecimalsInfo","sign","setSignInfo","setFootnoteInfo","isEnabled","isHighlight","isSelected","content","getTextFromHTML","menuCat","groupType","meta","metaCopy","tag","currentValue","auth_ref","references","dimensions","dimension","Boolean","axis","concat","Set","singleReference","returnObject","fill","calculation","calculations","property","result","role","label","longName","getCalculationWeight","weight","getCalculationParent","parentTag","lang","labels","oldObject","newObject","finalResult","charAt","toUpperCase","slice","tempCurrent","documentation","definitions","Documentation","crdr","balance","xbrltype","localname","nsuri","presentation","$","hiddenFacts","fixImages","fixLinks","redLineFacts","excludeFacts","updates","attributeFacts","performance","now","from","attr","startsWith","imageSlug","attribs","href","updatedStyle","css","hiddenElement","cheerioElement","prop","toLowerCase","removeAttr","debug","foundElements","redline","addClass","currentSlug","closest","updateMap","mapKey","searchContextref","searchName","entries","getByNameAndContextRef","wrap","get","raw","format","isAdditional","parents","isCustom","continuedIDs","each","wrapInner","test","instant","date","Date","_array","getMonth","getUTCDate","getFullYear","startDate","endDate","yearDiff","monthDiff","factContext","entity","type","divide","numerator","unitNumerator","denominator","unitDenominator","factUnit","footnotes","actualFootnote","toFixed","parent","self","onmessage","FetchAndMerge","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","r","d","definition","o","defineProperty","enumerable","f","e","chunkId","u","miniCssF","obj","Symbol","toStringTag","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop"],"sourceRoot":""}