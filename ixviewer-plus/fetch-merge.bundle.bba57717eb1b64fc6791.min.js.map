{"version":3,"file":"fetch-merge.bundle.bba57717eb1b64fc6791.min.js","mappings":"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","sources":["webpack://ixviewer-2/webpack/runtime/chunk loaded","webpack://ixviewer-2/webpack/runtime/startup chunk dependencies","webpack://ixviewer-2/./src/ts/fetch-merge/fetch-merge.ts","webpack://ixviewer-2/./src/ts/workers/workers.ts","webpack://ixviewer-2/webpack/bootstrap","webpack://ixviewer-2/webpack/runtime/define property getters","webpack://ixviewer-2/webpack/runtime/ensure chunk","webpack://ixviewer-2/webpack/runtime/get javascript chunk filename","webpack://ixviewer-2/webpack/runtime/get mini-css chunk filename","webpack://ixviewer-2/webpack/runtime/hasOwnProperty shorthand","webpack://ixviewer-2/webpack/runtime/make namespace object","webpack://ixviewer-2/webpack/runtime/publicPath","webpack://ixviewer-2/webpack/runtime/importScripts chunk loading","webpack://ixviewer-2/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(783).then(next);\n};","import * as cheerio from 'cheerio';\r\nimport * as convert from 'xml-js';\r\nimport { Meta, Xbrltype, reference } from '../interface/meta';\r\nimport { Context, DeiAmendmentFlagAttributes, Instance, LinkFootnote, LinkFootnoteArc, LinkLOC, Units } from '../interface/instance';\r\nimport { Reference, SingleFact } from '../interface/fact';\r\nimport { Logger, ILogObj } from 'tslog';\r\nimport { cleanSubstring } from '../helpers/utils';\r\n\r\n/* Created by staff of the U.S. Securities and Exchange Commission.\r\n * Data and content created by government employees within the scope of their employment\r\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\r\n */\r\nexport class FetchAndMerge {\r\n    private absolute: string;\r\n    private params: {\r\n        doc: string,\r\n        'doc-file': string,\r\n        hostName: string,\r\n        redline: boolean,\r\n        metalinks: string,\r\n        'metalinks-file': string,\r\n        fact: string,\r\n        summary: string,\r\n    };\r\n    private customPrefix: undefined | string;\r\n    private currentInstance: Array<{\r\n        current: boolean;\r\n        formInformation: {\r\n            axisCustom: number;\r\n            axisStandard: number;\r\n            baseTaxonomies: { [key: string]: number; };\r\n            contextCount: number;\r\n            dts: { [key: string]: { [key: string]: Array<string>; }; };\r\n            elementCount: number;\r\n            entityCount: 1;\r\n            hidden: { [key: string]: number; };\r\n            keyCustom: number;\r\n            keyStandard: number;\r\n            memberCustom: number;\r\n            memberStandard: number;\r\n            nsprefix: string;\r\n            nsuri: string;\r\n            segmentCount: number;\r\n            unitcount: number;\r\n        };\r\n        instance: number;\r\n        map: Map<string, SingleFact>;\r\n        metaInstance: Meta;\r\n        xhtmls: Array<{\r\n            current: boolean;\r\n            loaded: boolean;\r\n            slug: string;\r\n            url: string;\r\n            xhtml: string;\r\n        }>;\r\n        xmlSlug: Array<string>;\r\n        xmlUrls: Array<string>;\r\n    }> | undefined;\r\n    private std_ref;\r\n    private sections;\r\n    private metaVersion: string | undefined;\r\n    private instance;\r\n    constructor(input: {\r\n        absolute: string,\r\n        params: {\r\n            doc: string,\r\n            'doc-file': string,\r\n            hostName: string,\r\n            redline: boolean,\r\n            metalinks: string,\r\n            'metalinks-file': string,\r\n        },\r\n        instance: number | null,\r\n        std_ref: { [key: string]: Reference }\r\n\r\n    }) {\r\n        this.absolute = input.absolute;\r\n        this.partial = input.partial;\r\n        this.map = input.map;\r\n        this.params = input.params;\r\n        this.customPrefix = input.customPrefix;\r\n        this.instance = input.instance;\r\n        this.std_ref = input.std_ref;\r\n    }\r\n\r\n    init() {\r\n\r\n        const XHTMLandInstance = (instance, addInstance = false) => {\r\n            return Promise.all([\r\n                this.fetchXHTML(),\r\n                this.fetchInstance(),\r\n            ]).then((allResponses) => {\r\n                const errors = allResponses.filter(element => element ? Object.prototype.hasOwnProperty.call(element, 'error') : false);\r\n                if (errors.length) {\r\n                    const errorMessages = errors.map(current => current.message);\r\n                    return {\r\n                        all: { error: true, message: errorMessages }\r\n                    };\r\n                }\r\n                allResponses[0].forEach((current, index) => {\r\n                    this.currentInstance.xhtmls[index].loaded = true;\r\n                    this.currentInstance.xhtmls[index].xhtml = current.xhtml;\r\n                });\r\n                this.currentInstance.xml = (allResponses[1] as Instance);\r\n                this.mergeAllResponses(addInstance);\r\n                return {\r\n                    all: { instance: (addInstance ? instance.instance : instance), sections: this.sections, std_ref: this.std_ref }\r\n                }\r\n            })\r\n        };\r\n\r\n        const MetaandSummary = () => {\r\n            return Promise.all([\r\n                this.fetchMeta(),\r\n                this.fetchSummary(),\r\n            ]).then((allResponses) => {\r\n                this.metaVersion = allResponses[0].version;\r\n                this.std_ref = allResponses[0].std_ref;\r\n                if (allResponses.some((element) => element.error)) {\r\n                    const messageIndex = allResponses.find((element) => element.error);\r\n                    return {\r\n                        all: { error: true, message: [messageIndex.message] }\r\n                    }\r\n                } else {\r\n                    this.currentInstance = allResponses[0].instance?.filter(element => element.current)[0];\r\n\r\n                    const mapCategoryName = (input: string) => {\r\n                        const options = {\r\n                            \"Cover\": \"Cover\",\r\n                            \"document\": \"Document & Entity Information\",\r\n                            \"statement\": \"Financial Statements\",\r\n                            \"Statements\": \"Financial Statements\",\r\n                            \"disclosure\": \"Notes to the Financial Statements\",\r\n                            \"Notes\": \"Notes to Financial Statements\",\r\n                            \"Policies\": \"Accounting Policies\",\r\n                            \"Tables\": \"Notes Tables\",\r\n                            \"Details\": \"Notes Details\",\r\n                            \"Prospectus\": \"Prospectus\",\r\n                            \"RR_Summaries\": \"RR Summaries\",\r\n                            \"Fee_Exhibit\": \"RR Summaries\",\r\n                            \"Risk/Return\": \"RR Summaries\"\r\n                        };\r\n                        if (options[input]) {\r\n                            return options[input];\r\n                        }\r\n                        return 'INCOMPLETE SECTIONS DATA!';\r\n                    };\r\n                    const metaLinksSections = Object.values(allResponses[0].sections);\r\n                    this.sections = allResponses[1].MyReports.Report.reduce((accumulator, current) => {\r\n                        if (current && current.MenuCategory && current.Position && current.ShortName && current._attributes) {\r\n                            let fact = { name: '', contextRef: '', instance: null };\r\n                            const additional = metaLinksSections.find(element => element.shortName === current.ShortName._text);\r\n                            if (additional) {\r\n                                fact.instance = additional.instance;\r\n                                if (additional.uniqueAnchor) {\r\n                                    fact.name = additional.uniqueAnchor.name;\r\n                                    fact.contextRef = additional.uniqueAnchor.contextRef;\r\n                                    fact.file = additional.uniqueAnchor.baseRef;\r\n                                } else if (additional.firstAnchor) {\r\n                                    fact.name = additional.firstAnchor.name;\r\n                                    fact.contextRef = additional.firstAnchor.contextRef;\r\n                                    fact.file = additional.firstAnchor.baseRef;\r\n                                } else {\r\n                                    // MetaLinks.json does NOT have sufficient information for this section category\r\n                                    // we remove it from being used.\r\n                                    fact = null;\r\n                                }\r\n                            }\r\n                            const index = accumulator.findIndex(element => element.name === mapCategoryName(current.MenuCategory._text))\r\n                            if (index !== -1 && fact) {\r\n                                accumulator[index].children.push(\r\n                                    {\r\n                                        sort: +current.Position._text,\r\n                                        name: current.ShortName._text,\r\n                                        fact: fact,\r\n                                    }\r\n\r\n                                );\r\n                                accumulator[index].children.sort((first, second) => {\r\n                                    if (first.sort < second.sort) {\r\n                                        return -1;\r\n                                    }\r\n                                    if (first.sort > second.sort) {\r\n                                        return 1;\r\n                                    }\r\n                                    return 0;\r\n                                });\r\n                            } else if (fact) {\r\n                                accumulator.push({\r\n                                    name: mapCategoryName(current.MenuCategory._text),\r\n                                    children: [\r\n                                        {\r\n                                            sort: +current.Position._text,\r\n                                            name: current.ShortName._text,\r\n                                            file: current._attributes.instance,\r\n                                            fact: fact,\r\n                                        }\r\n                                    ]\r\n                                });\r\n\r\n                            }\r\n                        }\r\n                        return accumulator;\r\n                    }, []);\r\n                }\r\n                return Promise.all([\r\n                    XHTMLandInstance(allResponses[0], true)\r\n                ]).then(data => {\r\n                    return data[0];\r\n                })\r\n            });\r\n        };\r\n\r\n        if (this.instance !== null) {\r\n            this.currentInstance = this.instance.filter(element => element.current)[0];\r\n            return XHTMLandInstance(this.instance);\r\n        } else {\r\n            return MetaandSummary();\r\n        }\r\n    }\r\n\r\n    decodeWorkstationXmlInHtml(isWorkstation: boolean, html: string, closingXml: string) {\r\n        if (!isWorkstation) return html; // not running on SEC EDGAR workstation which encodes xml in HTML\r\n        if (!html.substring(0,100).toLowerCase().includes(\"<html><head>\")) {\r\n             if (html.includes(\"<title>EDGAR SEC Workstation Login</title>\")) {\r\n                  console.error(\"Workstation requires logging in\");\r\n                  window.alert(\"Workstation requires logging in\");\r\n                  return \"\";\r\n             }\r\n             return html; // it's xml, not html\r\n        }\r\n        // snip extraneous html from beginning and end of resopnse which is present in versions of files on workstation\r\n        // only 5 encodings are used in xml\r\n        html = html.replaceAll('&lt;', '<');\r\n        html = html.replaceAll('&gt;', '>');\r\n        html = html.replaceAll('&quot;', '\"');\r\n        html = html.replaceAll('&apos;', '\\'');\r\n        html = html.replaceAll('&amp;', '&');\r\n        return html.substring(html.indexOf(\"<?xml version=\"), html.indexOf(closingXml) + closingXml.length)\r\n    }\r\n\r\n    fetchXHTML() {\r\n        const promises = this.currentInstance?.xhtmls.map((current: { url: string }) => {\r\n            return new Promise((resolve) => {\r\n                const isWorkstation = current.url.includes(\"DisplayDocument.do?\");\r\n                let ixvUrl = current.url;\r\n                if (isWorkstation) {\r\n                    if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\r\n                        ixvUrl = ixvUrl.replace('.htm', '_ix2.htm');\r\n                    } else {\r\n                        ixvUrl = ixvUrl.replace('.htm', '_ix1.htm');\r\n                    }\r\n                }\r\n                fetch(ixvUrl, {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/xhtml+xml\"\r\n                    },\r\n                    mode: 'no-cors',\r\n                    credentials: 'include'\r\n                }).then((response) => {\r\n                    if (response.status >= 200 && response.status <= 299) {\r\n                        return response.text();\r\n                    } else {\r\n                        throw Error(`${response.status.toString()}, Could not find \"${this.params.doc}\"`);\r\n                    }\r\n                }).then((data) => {\r\n                    // on SEC EDGAR workstation xhtml is encoded like this: <HTML><HEAD><TITLE> ... &lt;?xml ...\r\n                    const xhtmlData = this.decodeWorkstationXmlInHtml(isWorkstation, data, \"</html>\");\r\n                    resolve({ xhtml: xhtmlData });\r\n                }).catch((error) => {\r\n                    resolve({ error: true, message: error });\r\n                })\r\n            });\r\n        });\r\n        return Promise.all(promises).then((allXHTML: Array<{ xhtml: string, index: number }>) => {\r\n            return allXHTML;\r\n        });\r\n    }\r\n\r\n    fetchMeta(): Promise<{\r\n        error?: boolean,\r\n        message?: string,\r\n        instance?: Array<{\r\n            current: boolean,\r\n            instance: number,\r\n            xhtmls: Array<{\r\n                slug: string,\r\n                url: string,\r\n                current: boolean,\r\n                loaded: boolean\r\n            }>,\r\n            xmlSlug: Array<string>,\r\n            xmlUrls: Array<string>,\r\n            metaInstance: Array<Instance>\r\n        }>,\r\n        meta?: Meta,\r\n        inlineFiles?: Array<{ slug: string, current: boolean, loaded: boolean }>\r\n    }> {\r\n        return new Promise((resolve) => {\r\n            return fetch(this.params.metalinks, { credentials: 'include' }).then((response) => {\r\n                if (response.status >= 200 && response.status <= 299) {\r\n                    return response.json();\r\n                } else {\r\n                    throw Error(response.status.toString());\r\n                }\r\n            }).then((data) => {\r\n\r\n                let XHTMLSlug = this.params.doc.substr(this.params.doc.lastIndexOf('/') + 1);\r\n                if (XHTMLSlug.startsWith(\"DisplayDocument.do\") || XHTMLSlug.startsWith(\"view.html\")) {\r\n                    XHTMLSlug = this.params.doc.substr(this.params.doc.lastIndexOf('filename=') + 9);\r\n                }\r\n                const instanceKeys = Object.keys(data.instance).join().split(/[ ,]+/);\r\n                let sections = {}\r\n                if (instanceKeys.includes(XHTMLSlug)) {\r\n                    const instanceObjects = Object.keys(data.instance).map((current, index) => {\r\n\r\n                        Object.keys(data.instance[current].report).forEach((report) => {\r\n                            data.instance[current].report[report].instance = index;\r\n                        });\r\n\r\n                        sections = Object.assign(sections, data.instance[current].report);\r\n                        const xhtmls = current.split(' ').map((element) => {\r\n                            return {\r\n                                slug: element,\r\n                                url: this.params.doc.replace(this.params['doc-file'], element),\r\n                                current: current.split(' ').includes(XHTMLSlug) && element === this.params['doc-file'],\r\n                                loaded: false\r\n                            };\r\n                        });\r\n                        // How is this used?\r\n                        const xmlSlugs = xhtmls.map(element => element.slug.replace('.htm', '_htm.xml'));\r\n                        const xmlUrls = xhtmls.map(element => this.params.metalinks.replace('MetaLinks.json', element.slug.replace('.htm', '_htm.xml')));\r\n                        return {\r\n                            instance: index,\r\n                            xhtmls: xhtmls,\r\n                            current: current.split(' ').includes(XHTMLSlug),\r\n                            xmlSlug: xmlSlugs,\r\n                            xmlUrls: xmlUrls,\r\n                            metaInstance: Object.assign(data.instance[current]),\r\n                            map: new Map()\r\n                        }\r\n                    });\r\n                    delete data.instance;\r\n                    resolve({ instance: instanceObjects, ...data, sections, version: data.version });\r\n                } else {\r\n                    throw Error('Incorrect MetaLinks.json Instance');\r\n                }\r\n                resolve(data);\r\n            }).catch((error) => resolve({ error: true, message: `${error}, Could not find \"${this.params.metalinks}\"` }))\r\n        });\r\n    }\r\n\r\n    fetchSummary() {\r\n        return new Promise((resolve) => {\r\n            const isWorkstation = this.params.summary.includes(\"DisplayDocument.do?\");\r\n            return fetch(this.params.summary, { credentials: 'include' }).then((response) => {\r\n                if (response.status >= 200 && response.status <= 299) {\r\n                    return response.text();\r\n                } else {\r\n                    throw Error(response.status.toString());\r\n                }\r\n            }).then((data) => {\r\n                const xmlData = this.decodeWorkstationXmlInHtml(isWorkstation, data, \"</FilingSummary>\");\r\n                resolve(JSON.parse(convert.xml2json(xmlData as unknown as string, { compact: true })).FilingSummary);\r\n            }).catch((error) => {\r\n                resolve({ error: true, message: `${error}, Could not find \"${this.params.summary}\"` })\r\n            })\r\n        });\r\n    }\r\n\r\n    fetchInstance() {\r\n        const promises = this.currentInstance.xmlUrls.map((current) => {\r\n            const isWorkstation = current.includes(\"DisplayDocument.do?\");\r\n            if (isWorkstation) {\r\n                // If methods from HelpersUrl are used here some very strange bugs occur, such as window and localStorage undefined.\r\n                if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\r\n                    current = current.replace('_htm.xml', '_ht2.xml')\r\n                } else {\r\n                    current = current.replace('_htm.xml', '_ht1.xml')\r\n                }\r\n            }\r\n            return new Promise((resolve) =>\r\n                fetch(current).then((response) => {\r\n                    if (response.status >= 200 && response.status <= 299) {\r\n                        return response.text();\r\n                    } else {\r\n                        const indexOf = this.currentInstance.xmlUrls.indexOf(current);\r\n                        if (indexOf >= 0) {\r\n                            this.currentInstance.xmlUrls.splice(indexOf, 1);\r\n                        }\r\n                        throw Error(`${response.status.toString()}`);\r\n                    }\r\n                }, { credentials: 'include' }).then((data) => {\r\n                    const xmlData = this.decodeWorkstationXmlInHtml(isWorkstation, data, \"</xbrl>\");\r\n                    resolve({ instance: xmlData });\r\n                }).catch((error) => {\r\n                    resolve({ error: true, message: `${error}, Could not find \"XML Instance Data\"` });\r\n                }\r\n            ));\r\n        });\r\n        return Promise.all(promises).then((xmlInstances) => {\r\n            const instance = xmlInstances.filter(element => element.instance);\r\n            if (instance && instance[0]) {\r\n                const fetchedXMlString = instance[0].instance;\r\n                const instanceXmlAsJsonCompact = JSON.parse(convert.xml2json(fetchedXMlString as unknown as string, { compact: true }));\r\n                if (instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"] && DEBUGJS) {\r\n                    const footnotesNode = instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"]\r\n                    // grab xml data as non compact object so element order is preserved.\r\n                    instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"].expanded = JSON.parse(convert.xml2json(fetchedXMlString as unknown as string, { compact: false }));\r\n                    instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"].orderedFootnoteDivs = footnotesNode.expanded.elements[0].elements;\r\n                    instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"].asXmlString = cleanSubstring(fetchedXMlString, '<link:footnoteLink', '</link:footnoteLink>');\r\n                    // footnotesNode.asXmlString = cleanSubstring(fetchedXMlString, '<link:footnoteLink', '</link:footnoteLink>').replaceAll('\\n', '');\r\n                    // footnotesNode.renderableXml = this.xmlToDom(fetchedXMlString);\r\n                    console.log('instanceXmlAsJsonCompact', instanceXmlAsJsonCompact);\r\n                }\r\n                // return instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"].asXmlString\r\n                return instanceXmlAsJsonCompact;\r\n            } else {\r\n                return xmlInstances[0];\r\n            }\r\n        });\r\n    }\r\n\r\n    mergeAllResponses(\r\n        includeSections: boolean\r\n    ) {\r\n        this.currentInstance.map = this.buildInitialMap(this.currentInstance.xml);\r\n        if (includeSections) {\r\n            this.sections = this.extractSections();\r\n        }\r\n        this.currentInstance.formInformation = this.extractFormInformation(this.currentInstance.metaInstance);\r\n        this.mergeMapandMeta();\r\n        this.customPrefix = this.currentInstance.metaInstance.nsprefix;\r\n        this.prepareXHTML();\r\n        return;\r\n\r\n    }\r\n\r\n    buildInitialMap(instance: Instance) {\r\n\r\n        const getInstancePrefix = (instance) => {\r\n            const options = Object.keys(instance).filter(element => element.endsWith(':xbrl'))[0];\r\n            return options ? options.split(':')[0] : false;\r\n        };\r\n        const prefix = getInstancePrefix(instance);\r\n\r\n        const xbrlKey = prefix ? `${(prefix as string)}:xbrl` : 'xbrl';\r\n        const contextKey = prefix ? `${(prefix as string)}:context` : 'context';\r\n        const unitKey = prefix ? `${(prefix as string)}:unit` : 'unit';\r\n\r\n        const context = instance[xbrlKey][contextKey];\r\n        const unit = instance[xbrlKey][unitKey];\r\n        const footnote = instance[xbrlKey]['link:footnoteLink'];\r\n\r\n        delete instance[xbrlKey][contextKey];\r\n        delete instance[xbrlKey][unitKey];\r\n        delete instance[xbrlKey]._attributes;\r\n        delete instance[xbrlKey]['link:schemaRef'];\r\n        delete instance[xbrlKey]['link:footnoteLink'];\r\n        this.setPeriodText(context);\r\n        this.setSegmentData(context);\r\n        this.setMeasureText(unit);\r\n        const map = new Map();\r\n        let factCounter = 0;\r\n        for (const key in instance[xbrlKey]) {\r\n            /* example set of keys on instance.xbrl\r\n                _attributes\r\n                link:schemaRef\r\n                context\r\n                unit\r\n                dei:AmendmentFlag\r\n                dei:DocumentPeriodEndDate\r\n                dei:DocumentFiscalPeriodFocus\r\n                dei:EntityCentralIndexKey\r\n                dei:CurrentFiscalYearEndDate\r\n                dei:EntityEmergingGrowthCompany\r\n                dei:DocumentType\r\n                dei:DocumentFiscalYearFocus\r\n                dei:EntityRegistrantName\r\n                dei:EntityCommonStockSharesOutstanding\r\n                i09203gd:Content4\r\n                link:footnoteLink\r\n            */\r\n            if (Array.isArray(instance[xbrlKey][key])) { // this first block might handle multi instance filings.\r\n                instance[xbrlKey][key].forEach((current: { _attributes: DeiAmendmentFlagAttributes; _text: string; }) => {\r\n                    const attributes = { ...current._attributes };\r\n                    const id = attributes.id ? attributes.id : `fact-identifier-${factCounter}`;\r\n                    delete attributes.id;\r\n                    map.set(id, {\r\n                        ...attributes,\r\n                        name: key,\r\n                        ix: id,\r\n                        id: `fact-identifier-${factCounter++}`,\r\n                        value: this.isFactHTML(current._text) ? this.updateValueToRemoveIDs(current._text) : current._text,\r\n                        isAmountsOnly: this.isFactAmountsOnly(current._text),\r\n                        isTextOnly: !this.isFactAmountsOnly(current._text),\r\n                        isNegativeOnly: this.isFactNegativeOnly(current._text),\r\n                        isHTML: this.isFactHTML(current._text),\r\n                        period: this.setPeriodInfo(attributes.contextRef, context),\r\n                        period_dates: this.setPeriodDatesInfo(attributes.contextRef, context),\r\n                        segment: this.setSegmentInfo(attributes.contextRef, context),\r\n                        measure: this.setMeasureInfo(attributes.unitRef, unit),\r\n                        scale: this.setScaleInfo(attributes.scale),\r\n                        decimals: this.setDecimalsInfo(attributes.decimals),\r\n                        sign: this.setSignInfo(attributes.sign),\r\n                        footnote: this.setFootnoteInfo(id, footnote),\r\n                        isEnabled: true,\r\n                        isHighlight: false,\r\n                        isSelected: false,\r\n                        filter: {\r\n                            content: this.getTextFromHTML(current._text),\r\n                        },\r\n                    });\r\n                });\r\n            } else {\r\n                const attributes = { ...instance[xbrlKey][key]._attributes };\r\n                const id = attributes.id ? attributes.id : `fact-identifier-${factCounter}`;\r\n                delete attributes.id;\r\n\r\n                map.set(id, {\r\n                    ...attributes,\r\n                    name: key,\r\n                    ix: id,\r\n                    id: `fact-identifier-${factCounter++}`,\r\n                    value: this.isFactHTML(instance[xbrlKey][key]._text) ? this.updateValueToRemoveIDs(instance[xbrlKey][key]._text) : instance[xbrlKey][key]._text,\r\n                    isAmountsOnly: this.isFactAmountsOnly(instance[xbrlKey][key]._text),\r\n                    isTextOnly: !this.isFactAmountsOnly(instance[xbrlKey][key]._text),\r\n                    isNegativeOnly: this.isFactNegativeOnly(instance[xbrlKey][key]._text),\r\n                    isHTML: this.isFactHTML(instance[xbrlKey][key]._text),\r\n                    period: this.setPeriodInfo(attributes.contextRef, context),\r\n                    period_dates: this.setPeriodDatesInfo(attributes.contextRef, context),\r\n                    segment: this.setSegmentInfo(attributes.contextRef, context),\r\n                    measure: this.setMeasureInfo(attributes.unitRef, unit),\r\n                    scale: this.setScaleInfo(attributes.scale),\r\n                    decimals: this.setDecimalsInfo(attributes.decimals),\r\n                    sign: this.setSignInfo(attributes.sign),\r\n                    footnote: this.setFootnoteInfo(id, footnote),\r\n                    isEnabled: true,\r\n                    isHighlight: false,\r\n                    isSelected: false,\r\n                    filter: {\r\n                        content: this.getTextFromHTML(instance[xbrlKey][key]._text),\r\n                    },\r\n                });\r\n            }\r\n        }\r\n        return map;\r\n    }\r\n\r\n    extractSections() {\r\n        return Object.keys(this.sections).map((current) => {\r\n            if (this.metaVersion >= '2.2') {\r\n                if (this.sections[current].menuCat) {\r\n                    this.sections[current].groupType = this.sections[current].menuCat;\r\n                }\r\n                return this.sections[current];\r\n            }\r\n            return this.sections[current];\r\n        });\r\n    }\r\n\r\n    extractFormInformation(meta: Meta) {\r\n        const metaCopy = Object.assign({}, meta);\r\n        delete metaCopy.report;\r\n        delete metaCopy.tag;\r\n        return metaCopy;\r\n    }\r\n\r\n    mergeMapandMeta() {\r\n\r\n        this.currentInstance.map.forEach((currentValue: {\r\n            name: string;\r\n            segment: [{ dimension: string, axis: string }];\r\n            references: reference[];\r\n            calculations: [{ label: string, value: string }];\r\n            labels: string[];\r\n            filter: { labels: string; definitions: string; };\r\n            balance: string;\r\n            xbrltype: Xbrltype | null;\r\n            localname: string | null;\r\n            nsuri: string | null;\r\n            presentation: string[] | null | undefined;\r\n        }) => {\r\n            if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')]) {\r\n                // add references (if any) to each individual fact\r\n                // including references via any dimension [name]\r\n                // including references via any member [name]\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].auth_ref) {\r\n\r\n                    let references = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].auth_ref.map((current) => {\r\n                        return current;\r\n                    });\r\n\r\n                    if (currentValue.segment) {\r\n\r\n                        const dimensions = currentValue.segment.map((element: { dimension: string; }) => {\r\n                            if (element.dimension && this.currentInstance.metaInstance.tag[element.dimension.replace(':', '_')]) {\r\n                                return this.currentInstance.metaInstance.tag[element.dimension.replace(':', '_')].auth_ref ? this.currentInstance.metaInstance.tag[element.dimension.replace(':', '_')].auth_ref : null;\r\n                            }\r\n                        }).filter(Boolean)[0];\r\n\r\n                        const axis = currentValue.segment.map((element: { dimension: string; axis: string; }) => {\r\n                            if (element.dimension && this.currentInstance.metaInstance.tag[element.axis.replace(':', '_')]) {\r\n                                return this.currentInstance.metaInstance.tag[element.axis.replace(':', '_')].auth_ref ? this.currentInstance.metaInstance.tag[element.axis.replace(':', '_')].auth_ref : null;\r\n                            }\r\n                        }).filter(Boolean)[0];\r\n\r\n                        references = references.concat(dimensions).concat(axis);\r\n                    }\r\n\r\n                    currentValue.references = [...new Set(references)].map((current) => {\r\n                        return this.std_ref[current];\r\n                    }).filter(Boolean);\r\n                    // this order specifically for Fact References\r\n                    // any other key => value will be ignored and not shown to the user\r\n                    const requiredOrder = [\r\n                        `Publisher`,\r\n                        `Name`,\r\n                        `Number`,\r\n                        `Chapter`,\r\n                        `Article`,\r\n                        `Number Exhibit Section`,\r\n                        `Subsection`,\r\n                        `Paragraph`,\r\n                        `Subparagraph`,\r\n                        `Sentence`,\r\n                        `Clause`,\r\n                        `Subclause`,\r\n                        `Example`,\r\n                        `Footnote`,\r\n                        `URI`,\r\n                        `URIDate`,\r\n                    ];\r\n\r\n                    currentValue.references = currentValue.references.map((singleReference) => {\r\n                        return Object.keys(singleReference).reduce((accumulator, current) => {\r\n                            const index = requiredOrder.findIndex(element => element === current);\r\n                            if (index !== -1) {\r\n                                const returnObject = {};\r\n                                returnObject[current] = singleReference[current];\r\n                                accumulator[index] = returnObject;\r\n                            }\r\n                            return accumulator;\r\n                        }, new Array(Object.keys(singleReference).length).fill(null)).filter(Boolean);\r\n                    });\r\n                }\r\n\r\n                // add calculations (if any) to each individual fact\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].calculation) {\r\n                    const tempCalculation = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].calculation;\r\n                    currentValue.calculations = [];\r\n                    for (const property in tempCalculation) {\r\n                        const result = this.sections.map(element => {\r\n                            if (element.role === property) {\r\n                                return [\r\n                                    {\r\n                                        label: 'Section',\r\n                                        value: element.longName\r\n                                    },\r\n                                    {\r\n                                        label: 'Weight',\r\n                                        value: this.getCalculationWeight(tempCalculation[property].weight)\r\n                                    },\r\n                                    {\r\n                                        'label': 'Parent',\r\n                                        value: this.getCalculationParent(tempCalculation[property].parentTag)\r\n                                    }\r\n                                ];\r\n                            }\r\n                        }).filter(Boolean);\r\n                        currentValue.calculations = currentValue.calculations.concat(result);\r\n                    }\r\n                } else {\r\n                    currentValue.calculations = [];\r\n                }\r\n\r\n                // add labels (if any) to each individual fact\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].lang) {\r\n                    currentValue.labels = Object.keys(this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].lang).map((current) => {\r\n                        const oldObject = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].lang[current].role;\r\n                        const newObject = {};\r\n                        for (const property in oldObject) {\r\n\r\n                            const result = property.replace(/([A-Z])/g, ' $1');\r\n                            const finalResult = result.charAt(0).toUpperCase() + result.slice(1);\r\n                            Object.assign(newObject, { [finalResult]: oldObject[property] });\r\n                        }\r\n                        return newObject\r\n                    });\r\n\r\n                    currentValue.filter.labels = currentValue.labels.reduce((accumulator: string, current) => {\r\n                        const tempCurrent = { ...current };\r\n                        delete tempCurrent.documentation;\r\n                        return `${accumulator} ${Object.values(tempCurrent).join(' ')}`;\r\n\r\n                    }, '');\r\n\r\n                    currentValue.filter.definitions = currentValue.labels.reduce((accumulator, current: { Documentation: string; }) => {\r\n                        return `${accumulator} ${current.Documentation}`;\r\n                    }, '');\r\n                }\r\n\r\n                // add credit / debit\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].crdr) {\r\n                    const balance = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].crdr;\r\n                    currentValue.balance = `${balance.charAt(0).toUpperCase()}${balance.slice(1)}`;\r\n                }\r\n\r\n                // add xbrltype\r\n                if (this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype) {\r\n                    currentValue.xbrltype = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype;\r\n                }\r\n\r\n                // add additional info to each individual fact\r\n                currentValue.localname = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].localname ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].localname : null;\r\n                currentValue.nsuri = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].nsuri ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].nsuri : null;\r\n                currentValue.presentation = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].presentation ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].presentation : null;\r\n                currentValue.xbrltype = this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype ? this.currentInstance.metaInstance.tag[currentValue.name.replace(':', '_')].xbrltype : null;\r\n            }\r\n        });\r\n        // return map;\r\n    }\r\n\r\n    prepareXHTML() {\r\n        this.currentInstance.xhtmls.forEach((current) => {\r\n            if (current.xhtml) {\r\n                let $ = cheerio.load(current.xhtml, {});\r\n                $ = this.hiddenFacts($);\r\n                $ = this.fixImages($);\r\n                $ = this.fixLinks($);\r\n                // $ = this.hiddenFacts($);\r\n                $ = this.redLineFacts($);\r\n                $ = this.excludeFacts($);\r\n                const updates = this.attributeFacts($, this.currentInstance.map, current.slug);\r\n                current.xhtml = updates.xhtml;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    fixImages($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        const foundImagesArray = Array.from($('img'));\r\n        foundImagesArray.forEach((current) => {\r\n            if (!$(current).attr('src')?.startsWith('data:')) {\r\n                const imageSlug = $(current).attr('src')?.substr($(current).attr('src')!.lastIndexOf('/') + 1);\r\n                $(current).attr('src', `${this.absolute}${imageSlug}`);\r\n                $(current).attr('loading', 'lazy');\r\n            }\r\n        });\r\n        const endPerformance = performance.now();\r\n        if (LOGPERFORMANCE) {\r\n            const items = foundImagesArray.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`FetchAndMerge.fixImages() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    fixLinks($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        const foundLinksArray = Array.from($('[data-link],[href]'));\r\n        foundLinksArray.forEach((current) => {\r\n            if (Object.prototype.hasOwnProperty.call(current.attribs, 'href')) {\r\n                if (current.attribs.href.startsWith('http://') ||\r\n                    current.attribs.href.startsWith('https://') ||\r\n                    current.attribs.href.startsWith('#')) {\r\n                    // already an absolute url, just add tabindex=18\r\n                    $(current).attr('tabindex', '18');\r\n                    // this anchor tag does not exsist in the current XHTML file\r\n                    if (current.attribs.href.startsWith('#') && current.attribs.href.slice(1) && $(`#${current.attribs.href.slice(1)}`).length === 0) {\r\n                        $(current).attr('xhtml-change', 'true');\r\n                    }\r\n                } else {\r\n                    // create an absolute url, add tabindex=18\r\n                    $(current).attr('tabindex', '18');\r\n                    $(current).attr('href', `${this.absolute}${current.attribs.href}`);\r\n                }\r\n            }\r\n            if (Object.prototype.hasOwnProperty.call(current.attribs, 'data-link')) {\r\n                $(current).attr('tabindex', '18');\r\n            }\r\n        });\r\n        const endPerformance = performance.now();\r\n        if (LOGPERFORMANCE) {\r\n            const items = foundLinksArray.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`FetchAndMerge.fixLinks() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    hiddenFacts($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        const foundElements = Array.from($('[style*=\"-ix-hidden\"]')).slice(0, 1000);\r\n\r\n        foundElements.forEach((current) => {\r\n            const updatedStyle = Object.values($(current).css([\"-sec-ix-hidden\", \"-esef-ix-hidden\"]) as {}).filter(Boolean)[0];\r\n            const hiddenElement = $(`#${updatedStyle}`);\r\n            if ($(hiddenElement).length) {\r\n                // console.log($(hiddenElement));\r\n                // we now create an entirely new element based on the innerHTML\r\n                // of current, and the attributes of hiddenElement\r\n                const cheerioElement = $(`<${$(hiddenElement).prop('tagName')?.toLowerCase().replace(`:`, `\\\\:`)}>`);\r\n                //const id = $(hiddenElement).attr('id');\r\n\r\n                for (const key in $(hiddenElement).attr()) {\r\n\r\n                    $(cheerioElement).attr(key, $(hiddenElement).attr(key));\r\n                }\r\n                $(cheerioElement).attr('isadditionalitemsonly', 'true');\r\n                $(cheerioElement).attr('ishiddenelement', 'true');\r\n                $(cheerioElement).html($(current).text());\r\n                $(hiddenElement).removeAttr('id');\r\n                $(hiddenElement).removeAttr('contextref');\r\n                $(hiddenElement).removeAttr('name');\r\n\r\n                //console.log($(cheerioElement).attr('id'));\r\n                $(current).html($(cheerioElement));\r\n                if ($(cheerioElement).attr('id') === 'id3VybDovL2RvY3MudjEvZG9jOjU1M2Q3M2I4N2RhYjQ2MzQ5ZjlmNTI3Y2YwNzZjMzlhL3NlYzo1NTNkNzNiODdkYWI0NjM0OWY5ZjUyN2NmMDc2YzM5YV82MS9mcmFnOmI0ZGUyZDM0ZWE4NTRjMTc4NmFjYWIyYzRjZWRiMmQ2L3RleHRyZWdpb246YjRkZTJkMzRlYTg1NGMxNzg2YWNhYjJjNGNlZGIyZDZfNDAwNTE_70ac34fc-cc35-4fb1-ad12-4d0f52202d63') {\r\n                    const log: Logger<ILogObj> = new Logger();\r\n                    log.debug($(current).html());\r\n                }\r\n            } else {\r\n                const log: Logger<ILogObj> = new Logger();\r\n                log.debug('empty!');\r\n            }\r\n        });\r\n        const endPerformance = performance.now();\r\n        if (LOGPERFORMANCE) {\r\n            const items = foundElements.length\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`FetchAndMerge.hiddenFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    /**\r\n     * Description\r\n     * @param {any} $:cheerio.CheerioAPI\r\n     * @returns {any}\r\n     */\r\n    redLineFacts($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        \r\n        ['redline', 'redact'].forEach((r) => {\r\n            const foundElements = Array.from($('[style*=\"-ix-' + r + '\"]'));\r\n            \r\n            if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\r\n                if (!PRODUCTION) {\r\n                    const log: Logger<ILogObj> = new Logger();\r\n                    log.debug(`ix-${r} styles Found: ${foundElements.length}`);\r\n                }\r\n                foundElements.forEach((current) => {\r\n                    const updatedStyle = Object.values($(current).css([\"-sec-ix-\" + r, \"-esef-ix-\" + r]) as {}).filter(Boolean)[0];\r\n                    if (updatedStyle === \"true\") {\r\n                        $(current).attr(r, 'true');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        const endPerformance = performance.now();\r\n        if (LOGPERFORMANCE) {\r\n            const items = foundElements.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`FetchAndMerge.redLineFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    excludeFacts($: cheerio.CheerioAPI) {\r\n        const startPerformance = performance.now();\r\n        const foundElements = Array.from($('[style*=\":exclude\"]'));\r\n        foundElements.forEach((current) => {\r\n            $(current).addClass('no-hover');\r\n        });\r\n        const endPerformance = performance.now();\r\n        if (LOGPERFORMANCE) {\r\n            const items = foundElements.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`FetchAndMerge.excludeFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n        return $;\r\n    }\r\n\r\n    attributeFacts($: cheerio.CheerioAPI, map: Map<string, SingleFact>, currentSlug: string) {\r\n        const startPerformance = performance.now();\r\n\r\n        const foundElements = Array.from($(`[contextRef]`));\r\n\r\n        foundElements.forEach((current) => {\r\n            $(current).attr(\"selected-fact\", 'false');\r\n            $(current).attr(\"hover-fact\", 'false');\r\n            $(current).attr(\"continued-fact\", 'false');\r\n            $(current).closest('table').length ? $(current).attr(\"inside-table\", 'true') : $(current).attr(\"inside-table\", 'false');\r\n\r\n            if ($(current).attr('contextref') && $(current).attr('id')) {\r\n\r\n                $(current).attr('ix', $(current).attr('id'));\r\n                $(current).attr('id', this.updateMap($(current)?.attr('ix') as string, $(current), currentSlug));\r\n            }\r\n            if (!$(current).prop('tagName').toLowerCase().endsWith(\"continuation\") &&\r\n                $(current).attr(\"continuedat\")\r\n            ) {\r\n                $(current).attr(\"continued-main-fact\", 'true');\r\n            }\r\n\r\n            if ($(current).attr('contextref') && !$(current).attr('id')) {\r\n                // for the facts in the html that have no ids...\r\n                const getByNameAndContextRef = (searchContextref: string | undefined, searchName: string | undefined) => {\r\n                    for (const [key, value] of this.currentInstance.map.entries()) {\r\n                        if (value.contextRef === searchContextref && value.name === searchName) {\r\n                            return key;\r\n                        }\r\n                    }\r\n                };\r\n                const mapKey = getByNameAndContextRef($(current).attr('contextref'), $(current).attr('name'));\r\n                if (mapKey) {\r\n\r\n                    $(current).attr('ix', mapKey);\r\n                    $(current).attr('id', mapKey);\r\n                    this.updateMap($(current)?.attr('ix') as string, $(current), currentSlug);\r\n                } else {\r\n                    const log: Logger<ILogObj> = new Logger();\r\n                    log.error(`Fact [name] && [contextRef] could not be located in the Map Object.`);\r\n                }\r\n            }\r\n            $(current).wrap(`<span></span>`);\r\n        });\r\n        // TODO is this a good idea?\r\n        // $(`${namespace}\\\\:header`).remove();\r\n        const endPerformance = performance.now();\r\n        if (LOGPERFORMANCE) {\r\n            const items = foundElements.length;\r\n            const log: Logger<ILogObj> = new Logger();\r\n            log.debug(`FetchAndMerge.attributeFacts() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\r\n        }\r\n\r\n        return { xhtml: $.html(), map };\r\n    }\r\n\r\n    updateMap(ix: string, element: cheerio.Cheerio<cheerio.Element>, currentSlug: string) {\r\n        this.currentInstance.map.set(\r\n            ix,\r\n            {\r\n                ...this.currentInstance.map.get(ix),\r\n                raw: element.text(),\r\n                format: element.attr('format') ? element.attr('format') : null,\r\n                isAdditional: element.parents().prop('tagName').toLowerCase().endsWith(':hidden'),\r\n                isCustom: (element.attr('name')?.split(':')[0].toLowerCase() === this.customPrefix),\r\n                isAmountsOnly: element.prop('tagName')?.split(':')[1].toLowerCase() === 'nonfraction',\r\n                isTextOnly: element.prop('tagName')?.split(':')[1].toLowerCase() === 'nonnumeric',\r\n                isNegativeOnly: element.attr('sign') === '-',\r\n                file: currentSlug,\r\n                scale: element.attr('scale') ? this.setScaleInfo(element.attr('scale') as unknown as number) : null,\r\n                continuedIDs: []\r\n            });\r\n\r\n        return this.currentInstance.map.get(ix).id;\r\n    }\r\n\r\n    updateValueToRemoveIDs(input: string) {\r\n        const $ = cheerio.load(input, { xml: false });\r\n        $('[id]').each(function () {\r\n            $(this).removeAttr('id');\r\n        });\r\n        // we also wrap the entirity of the html in a simple div\r\n        $('body ').wrapInner('<div></div>');\r\n        return $.html('body');\r\n    }\r\n\r\n    isFactAmountsOnly(input: string) {\r\n        return /^-?\\d+\\d*$/.test(input);\r\n    }\r\n\r\n    isFactNegativeOnly(input: string) {\r\n        return this.isFactAmountsOnly(input) && input.startsWith('-');\r\n    }\r\n\r\n    isFactHTML(input: string) {\r\n        return /<\\/?[a-z][\\s\\S]*>/i.test(input);\r\n    }\r\n\r\n    getTextFromHTML(input: string) {\r\n        if (this.isFactHTML(input)) {\r\n            const $ = cheerio.load(input);\r\n            return $.text();\r\n        }\r\n        return input;\r\n    }\r\n\r\n    setPeriodText(context: Context[]) {\r\n        context = Array.isArray(context) ? context : [context];\r\n        context?.forEach((current) => {\r\n            if (current.period) {\r\n                if (current.period.instant) {\r\n                    const date = new Date(current.period.instant._text);\r\n                    current.period._array = [`${date.getMonth() + 1}/${date.getUTCDate()}/${date.getFullYear()}`];\r\n                    current.period._text = `As of ${date.getMonth() + 1}/${date.getUTCDate()}/${date.getFullYear()}`;\r\n\r\n                } else if (current.period.startDate && current.period.endDate) {\r\n                    const startDate = new Date(current.period.startDate._text);\r\n                    const endDate = new Date(current.period.endDate._text);\r\n\r\n                    const yearDiff = endDate.getFullYear() - startDate.getFullYear();\r\n                    const monthDiff = endDate.getMonth() - startDate.getMonth() + (yearDiff * 12);\r\n                    current.period._array = [\r\n                        `${startDate.getMonth() + 1}/${startDate.getUTCDate()}/${startDate.getFullYear()}`,\r\n                        `${endDate.getMonth() + 1}/${endDate.getUTCDate()}/${endDate.getFullYear()}`\r\n                    ];\r\n                    if (monthDiff <= 0) {\r\n                        current.period._text = `${startDate.getMonth() + 1}/${startDate.getUTCDate()}/${startDate.getFullYear()} - ${endDate.getMonth() + 1}/${endDate.getUTCDate()}/${endDate.getFullYear()}`;\r\n                    } else {\r\n                        current.period._text = `${monthDiff} months ending ${endDate.getMonth() + 1}/${endDate.getUTCDate()}/${endDate.getFullYear()}`;\r\n                    }\r\n                } else {\r\n                    const log: Logger<ILogObj> = new Logger();\r\n                    log.error(`\\nFact Period is NEITHER Instant or Start / End`);\r\n                }\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    setPeriodInfo(contextRef: string, context: [Context]) {\r\n        // we go through and find the 'id' in context that equals contextRef\r\n        context = Array.isArray(context) ? context : [context];\r\n        const factContext = context?.find((element) => {\r\n            return element._attributes.id === contextRef;\r\n        });\r\n        if (factContext && factContext.period) {\r\n            return factContext.period._text;\r\n        }\r\n    }\r\n\r\n    setPeriodDatesInfo(contextRef: string, context: [Context]) {\r\n        // we go through and find the 'id' in context that equals contextRef\r\n        context = Array.isArray(context) ? context : [context];\r\n        const factContext = context?.find((element) => {\r\n            return element._attributes.id === contextRef;\r\n        });\r\n        if (factContext && factContext.period) {\r\n            return factContext.period._array;\r\n        }\r\n    }\r\n\r\n    setSegmentData(context: Context | undefined) {\r\n        context = Array.isArray(context) ? context : [context];\r\n        context.forEach((current) => {\r\n            if (current.entity && current.entity.segment) {\r\n                current.entity.segment.data = Object.keys(current.entity.segment).map((key) => {\r\n                    if (Array.isArray(current.entity.segment[key])) {\r\n                        return current.entity.segment[key].map((segment: { _attributes: { dimension: string; }; _text: string; }) => {\r\n                            return {\r\n                                axis: segment._attributes.dimension,\r\n                                dimension: segment._text,\r\n                                type: key.endsWith('explicitMember') ? 'explicit' : 'implicit'\r\n                            }\r\n                        });\r\n                    } else {\r\n                        return {\r\n                            axis: current.entity.segment[key]._attributes.dimension,\r\n                            dimension: current.entity.segment[key]._text ?\r\n                                current.entity.segment[key]._text :\r\n                                current.entity.segment[key][Object.keys(current.entity.segment[key]).filter(element => !element.startsWith('_'))[0]]?._text,\r\n                            type: key.endsWith('explicitMember') ?\r\n                                'explicit' :\r\n                                'implicit',\r\n                            value: !key.endsWith('explicitMember') ?\r\n                                current.entity.segment[key][Object.keys(current.entity.segment[key])[1]]._text :\r\n                                null\r\n                        };\r\n                    }\r\n                });\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    setSegmentInfo(contextRef: string, context: [Context]) {\r\n        context = Array.isArray(context) ? context : [context];\r\n        const factContext = context?.find((element) => {\r\n            return element._attributes.id === contextRef;\r\n        });\r\n        if (factContext && factContext.entity && factContext.entity.segment) {\r\n            return factContext.entity.segment.data;\r\n        }\r\n    }\r\n\r\n    setMeasureText(unit: Units[] | undefined) {\r\n        unit = Array.isArray(unit) ? unit : [unit];\r\n        unit.forEach((current: { measure: { _text: string; }; _text: string; divide: { unitNumerator: { measure: { _text: string; }; }; unitDenominator: { measure: { _text: string; }; }; }; }) => {\r\n            if (current && current.measure) {\r\n                const measure = current.measure._text.includes(':') ?\r\n                    current.measure._text.split(':')[1].toUpperCase() :\r\n                    current.measure._text.toUpperCase();\r\n                current._text = measure;\r\n\r\n            } else if (current && current.divide) {\r\n                const numerator = current.divide.unitNumerator.measure._text.includes(':') ?\r\n                    current.divide.unitNumerator.measure._text.split(':')[1].toUpperCase() :\r\n                    current.divide.unitNumerator.measure._text.toUpperCase();\r\n\r\n                const denominator = current.divide.unitDenominator.measure._text.includes(':') ?\r\n                    current.divide.unitDenominator.measure._text.split(':')[1].toUpperCase() :\r\n                    current.divide.unitDenominator.measure._text.toUpperCase();\r\n\r\n                current._text = `${numerator} / ${denominator}`;\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    setMeasureInfo(unitRef: string, unit: Units) {\r\n        if (unit) {\r\n            const factUnit = Array.isArray(unit) ? unit.find((element: { _attributes: { id: string; }; }) => {\r\n                return element._attributes.id === unitRef;\r\n            }) : [unit].find((element: { _attributes: { id: string; }; }) => {\r\n                return element._attributes.id === unitRef;\r\n            });\r\n\r\n            if (\r\n                factUnit &&\r\n                (Object.prototype.hasOwnProperty.call(factUnit, 'measure') || Object.prototype.hasOwnProperty.call(factUnit, 'divide'))\r\n            ) {\r\n                return factUnit._text;\r\n            }\r\n        }\r\n    }\r\n\r\n    setScaleInfo(scale: number) {\r\n        if (scale) {\r\n            const scaleOptions = {\r\n                0: \"Zero\",\r\n                1: \"Tens\",\r\n                2: \"Hundreds\",\r\n                3: \"Thousands\",\r\n                4: \"Ten thousands\",\r\n                5: \"Hundred thousands\",\r\n                6: \"Millions\",\r\n                7: \"Ten Millions\",\r\n                8: \"Hundred Millions\",\r\n                9: \"Billions\",\r\n                10: \"Ten Billions\",\r\n                11: \"Hundred Billions\",\r\n                12: \"Trillions\",\r\n                \"-1\": \"Tenths\",\r\n                \"-2\": \"Hundredths\",\r\n                \"-3\": \"Thousandths\",\r\n                \"-4\": \"Ten Thousandths\",\r\n                \"-5\": \"Hundred Thousandths\",\r\n                \"-6\": \"Millionths\"\r\n            };\r\n            return scaleOptions[scale];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setDecimalsInfo(decimals: string) {\r\n        if (decimals) {\r\n            const decimalsOptions = {\r\n                \"-1\": \"Tens\",\r\n                \"-2\": \"Hundreds\",\r\n                \"-3\": \"Thousands\",\r\n                \"-4\": \"Ten thousands\",\r\n                \"-5\": \"Hundred thousands\",\r\n                \"-6\": \"Millions\",\r\n                \"-7\": \"Ten Millions\",\r\n                \"-8\": \"Hundred Millions\",\r\n                \"-9\": \"Billions\",\r\n                \"-10\": \"Ten Billions\",\r\n                \"-11\": \"Hundred Billions\",\r\n                \"-12\": \"Trillions\",\r\n                1: \"Tenths\",\r\n                2: \"Hundredths\",\r\n                3: \"Thousandths\",\r\n                4: \"Ten Thousandths\",\r\n                5: \"Hundred Thousandths\",\r\n                6: \"Millionths\"\r\n            };\r\n            return decimalsOptions[decimals];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setSignInfo(sign: string) {\r\n        if (sign) {\r\n            const signOptions = {\r\n                '-': 'Negative',\r\n                '+': 'Positive'\r\n            };\r\n            return signOptions[sign];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Description\r\n     * @param {any} ftObj:object\r\n     * @param {any} result?:string|undefined\r\n     * @returns {any} concatenated text from all footnote nodes, joined by a ' '\r\n     */\r\n    accumulateFootnote(ftObj: object, result?: string | undefined) {\r\n        if (typeof(result) == \"undefined\") result = \"\";\r\n        const truncateFootnoteTo = 100;\r\n\r\n        if (result?.length > truncateFootnoteTo) {\r\n            result = result.substring(0, truncateFootnoteTo).substring(0, result.lastIndexOf(\" \") + 1);\r\n            return result += ' ...';\r\n        }\r\n\r\n        // let text = ''; //accumulate \"mixed-content\" text to apply after depth first descent\r\n        Object.keys(ftObj).forEach(node => {\r\n            if (node == \"_text\") {\r\n                result += ftObj[node] + ' ';\r\n            }\r\n            else if (Array.isArray(ftObj[node])) {\r\n                ftObj[node].forEach(childNode => {\r\n                    result = this.accumulateFootnote(childNode, result);\r\n                })\r\n            }\r\n            else if (node.substring(0,6) == \"xhtml:\") {\r\n                result = this.accumulateFootnote(ftObj[node], result);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Description\r\n     * @param {any} id:string\r\n     * @param {any} footnotes:{\"link:loc\":LinkLOC[]\r\n     * @param {any} \"link:footnote\":LinkFootnote[];\"link:footnoteArc\":LinkFootnoteArc[];}\r\n     * @param {string} asXmlString footnotes part of fetched xml text\r\n     * @returns {any} renderable footnote text (or xml string) to be displayed in fact modal\r\n     * todo: handle incoming footnotes.asXmlString or footnotes.xmlExpanded to show all content (in order) instead of just text\r\n     * todo: handle images, tables, ...other html elements (currently just concatenating text content)\r\n     * the above todos are WIP and are handled when useFetchedFootnoteXmlStrings is set to true.\r\n     */\r\n    setFootnoteInfo(id: string, footnotes: {\r\n        \"link:loc\": LinkLOC[],\r\n        \"link:footnote\": LinkFootnote[],\r\n        \"link:footnoteArc\": LinkFootnoteArc[],\r\n        \"asXmlString\": string,\r\n    }) {\r\n        if (footnotes && footnotes['link:footnoteArc']) {\r\n            const factFootnote = Array.isArray(footnotes['link:footnoteArc']) \r\n                ? footnotes['link:footnoteArc'].find((element) => element._attributes['xlink:from'] === id ) \r\n                : [footnotes['link:footnoteArc']].find((element) => element._attributes['xlink:from'] === id )\r\n            if (factFootnote) {\r\n                if (footnotes['link:footnote']) {\r\n                    if (Array.isArray(footnotes['link:footnote'])) {\r\n                        const actualFootnote = footnotes['link:footnote']?.find((element) => {\r\n                            return element._attributes.id === factFootnote._attributes['xlink:to'];\r\n                        });\r\n\r\n                        const useFetchedFootnoteXmlStrings = false;\r\n                        const useParsedFootnote = !useFetchedFootnoteXmlStrings;\r\n\r\n                        if (useParsedFootnote) {\r\n                            return this.accumulateFootnote(actualFootnote);\r\n                        }\r\n\r\n                        // Rest of this if block is WIP for rendering all div types in footnote cell\r\n\r\n                        // GO FIND PART OF footnotes.xmlString that corresponds to actual footnote\r\n                        // return that substring ... so you can render it in fact-pages.ts\r\n                        // we only need '<link:footnote ... > string for each footnote to render\r\n                        // find all <link:footnote ... > xml strings and put in array\r\n                        // then find the one that matches the xlink:to value with its id\r\n\r\n                        const startTagRegex = /<link:footnote /gi; \r\n                        let startTagResults = '';\r\n                        const footnoteStartIndices:number[] = [];\r\n                        while ( (startTagResults = startTagRegex.exec(footnotes.asXmlString)) ) {\r\n                            footnoteStartIndices.push(startTagResults.index);\r\n                        }\r\n\r\n                        const endTagRegex = /<\\/link:footnote>/gi; \r\n                        let endTagResults = '';\r\n                        const footnoteEndIndices:number[] = [];\r\n                        while ( (endTagResults = endTagRegex.exec(footnotes.asXmlString)) ) {\r\n                            footnoteEndIndices.push(endTagResults.index + ('</link:footnote>').length);\r\n                        }\r\n\r\n                        const footnotesAsXmlStrings:string[] = [];\r\n\r\n                        footnoteStartIndices.forEach((start, indexInArrayOfStarts) => {\r\n                            const pluckedFootnote = footnotes.asXmlString.substring(start, footnoteEndIndices[indexInArrayOfStarts]);\r\n                            footnotesAsXmlStrings.push(pluckedFootnote);\r\n                        })\r\n\r\n                        const relevantFootnoteAsXmlString = footnotesAsXmlStrings.find(fn => {\r\n                            return fn.indexOf(factFootnote._attributes['xlink:to']) != -1;\r\n                        })\r\n\r\n                        return relevantFootnoteAsXmlString;\r\n                    } else {\r\n                        // TODO we need way more cases\r\n                        if (!Array.isArray(footnotes['link:footnote']._text)) {\r\n                            return footnotes;\r\n                            // return footnotes['link:footnote']._text;\r\n                        } else if (Array.isArray(footnotes['link:footnote']._text)) {\r\n                            return footnotes['link:footnote']._text.join('');\r\n                        } else if (footnotes['link:footnote']['xhtml:span']) {\r\n                            return footnotes['link:footnote']['xhtml:span']._text;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getCalculationWeight(weight: number) {\r\n        if (weight) {\r\n            return weight > 0 ?\r\n                `Added to parent(${weight.toFixed(2)})` :\r\n                `Substracted from parent(${weight.toFixed(2)})`\r\n        }\r\n        return 'Not Available.';\r\n    }\r\n\r\n    getCalculationParent(parent: string) {\r\n        if (parent) {\r\n            return parent.replace('_', ':');\r\n        }\r\n        return 'Not Available.';\r\n    }\r\n}","/* Created by staff of the U.S. Securities and Exchange Commission.\r\n * Data and content created by government employees within the scope of their employment\r\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\r\n */\r\n\r\nimport { FetchAndMerge } from '../fetch-merge/fetch-merge';\r\n\r\nself.onmessage = ({ data }) => {\r\n    const fetchAndMerge = new FetchAndMerge(data);\r\n    fetchAndMerge.init().then(data => {\r\n        self.postMessage(data);\r\n    });\r\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [783], () => (__webpack_require__(1343)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.\" + \"0324a6e294b9fe34ba88\" + \".min.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/ixviewer-plus/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t549: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkixviewer_2\"] = self[\"webpackChunkixviewer_2\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","input","this","absolute","partial","map","params","customPrefix","instance","std_ref","init","XHTMLandInstance","addInstance","Promise","all","fetchXHTML","fetchInstance","then","allResponses","errors","filter","element","Object","prototype","hasOwnProperty","call","length","error","message","current","forEach","index","currentInstance","xhtmls","loaded","xhtml","xml","mergeAllResponses","sections","fetchMeta","fetchSummary","metaVersion","version","some","find","options","values","MyReports","Report","reduce","accumulator","MenuCategory","Position","ShortName","_attributes","fact","name","contextRef","additional","shortName","_text","uniqueAnchor","file","baseRef","firstAnchor","findIndex","children","push","sort","first","second","data","decodeWorkstationXmlInHtml","isWorkstation","html","closingXml","substring","toLowerCase","includes","replaceAll","indexOf","console","window","alert","promises","resolve","url","ixvUrl","redline","replace","fetch","headers","mode","credentials","response","status","text","Error","toString","doc","xhtmlData","catch","allXHTML","metalinks","json","XHTMLSlug","substr","lastIndexOf","startsWith","instanceKeys","keys","join","split","instanceObjects","report","assign","slug","xmlSlugs","xmlUrls","xmlSlug","metaInstance","Map","summary","xmlData","JSON","parse","compact","FilingSummary","splice","xmlInstances","fetchedXMlString","instanceXmlAsJsonCompact","xbrl","includeSections","buildInitialMap","extractSections","formInformation","extractFormInformation","mergeMapandMeta","nsprefix","prepareXHTML","prefix","endsWith","getInstancePrefix","xbrlKey","contextKey","unitKey","context","unit","footnote","setPeriodText","setSegmentData","setMeasureText","factCounter","key","Array","isArray","attributes","id","set","ix","value","isFactHTML","updateValueToRemoveIDs","isAmountsOnly","isFactAmountsOnly","isTextOnly","isNegativeOnly","isFactNegativeOnly","isHTML","period","setPeriodInfo","period_dates","setPeriodDatesInfo","segment","setSegmentInfo","measure","setMeasureInfo","unitRef","scale","setScaleInfo","decimals","setDecimalsInfo","sign","setSignInfo","setFootnoteInfo","isEnabled","isHighlight","isSelected","content","getTextFromHTML","menuCat","groupType","meta","metaCopy","tag","currentValue","auth_ref","references","dimensions","dimension","Boolean","axis","concat","Set","singleReference","returnObject","fill","calculation","calculations","property","result","role","label","longName","getCalculationWeight","weight","getCalculationParent","parentTag","lang","labels","oldObject","newObject","finalResult","charAt","toUpperCase","slice","tempCurrent","documentation","definitions","Documentation","crdr","balance","xbrltype","localname","nsuri","presentation","$","hiddenFacts","fixImages","fixLinks","redLineFacts","excludeFacts","updates","attributeFacts","performance","now","from","attr","imageSlug","attribs","href","updatedStyle","css","hiddenElement","cheerioElement","prop","removeAttr","debug","r","foundElements","addClass","currentSlug","closest","updateMap","mapKey","searchContextref","searchName","entries","getByNameAndContextRef","wrap","get","raw","format","isAdditional","parents","isCustom","continuedIDs","each","wrapInner","test","instant","date","Date","_array","getMonth","getUTCDate","getFullYear","startDate","endDate","yearDiff","monthDiff","factContext","entity","type","divide","numerator","unitNumerator","denominator","unitDenominator","factUnit","accumulateFootnote","ftObj","node","childNode","footnotes","actualFootnote","toFixed","parent","self","onmessage","FetchAndMerge","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","d","definition","o","defineProperty","enumerable","f","e","chunkId","u","miniCssF","obj","Symbol","toStringTag","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop"],"sourceRoot":""}