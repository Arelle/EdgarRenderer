/* Created by staff of the U.S. Securities and Exchange Commission.
 * Data and content created by government employees within the scope of their employment 
 * are not subject to domestic copyright protection. 17 U.S.C. 105.
 */

'use strict';

var FiltersDate = {
  
  eraYear : function( era, year ) {
    if ( (era && typeof era === 'string' && ConstantsDate.eraStart[era]) && (year && typeof year === 'string') ) {
      return ConstantsDate.eraStart[era] + (year === '\u5143' ? 1 : parseInt(year));
    }
    return null;
  },
  
  dateQuarterEnd : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var year = element.innerText.match(/\d{4}/)[0];
      var month;
      var day;
      
      var quarter = element.innerText.match(/1st|first|q1|2nd|second|q2|3rd|third|q3|4th|fourth|last|q4/gi);
      
      if ( quarter && quarter[0] ) {
        
        switch ( quarter[0].toLowerCase() ) {
          case ('1st') : {
            month = "03";
            day = "31";
            break;
          }
          case ('first') : {
            month = "03";
            day = "31";
            break;
          }
          case ('q1') : {
            month = "03";
            day = "31";
            break;
          }
          case ('2nd' || 'second' || 'q2') : {
            month = "06";
            day = "30";
            break;
          }
          case ('second') : {
            month = "06";
            day = "30";
            break;
          }
          case ('q2') : {
            month = "06";
            day = "30";
            break;
          }
          case ('3rd') : {
            month = "09";
            day = "30";
            break;
          }
          case ('third') : {
            month = "09";
            day = "30";
            break;
          }
          case ('q3') : {
            month = "09";
            day = "30";
            break;
          }
          case ('4th') : {
            month = "12";
            day = "31";
            break;
          }
          case ('fourth') : {
            month = "12";
            day = "31";
            break;
          }
          case ('last') : {
            month = "12";
            day = "31";
            break;
          }
          case ('q4') : {
            month = "12";
            day = "31";
            break;
          }
          default : {
            return 'Format Error: Date Quarter End';
          }
        }
      } else {
        return 'Format Error: Date Quarter End';
      }
      
      var result = moment(year + '-' + month + '-' + day, 'YYYY-MM-DD');
      if ( !result.isValid() ) {
        return 'Format Error: Date Quarter End';
      }
      return result.format('YYYY-MM-DD');
      
    }
    return 'Format Error: Date Quarter End';
    
  },
  
  calINDayMonthYear : function( element ) {
    
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^\s*([0-9\u0966-\u096F]{1,2})\s([\u0966-\u096F]{2}|[^\s0-9\u0966-\u096F]+)\s([0-9\u0966-\u096F]{2}|[0-9\u0966-\u096F]{4})\s*$/;
      
      var regexSakaMonth = /(C\S*ait|\u091A\u0948\u0924\u094D\u0930)|(Vai|\u0935\u0948\u0936\u093E\u0916|\u092C\u0948\u0938\u093E\u0916)|(Jy|\u091C\u094D\u092F\u0947\u0937\u094D\u0920)|(dha|\u1E0Dha|\u0906\u0937\u093E\u0922|\u0906\u0937\u093E\u0922\u093C)|(vana|\u015Ar\u0101va\u1E47a|\u0936\u094D\u0930\u093E\u0935\u0923|\u0938\u093E\u0935\u0928)|(Bh\S+dra|Pro\u1E63\u1E6Dhapada|\u092D\u093E\u0926\u094D\u0930\u092A\u0926|\u092D\u093E\u0926\u094B)|(in|\u0906\u0936\u094D\u0935\u093F\u0928)|(K\S+rti|\u0915\u093E\u0930\u094D\u0924\u093F\u0915)|(M\S+rga|Agra|\u092E\u093E\u0930\u094D\u0917\u0936\u0940\u0930\u094D\u0937|\u0905\u0917\u0939\u0928)|(Pau|\u092A\u094C\u0937)|(M\S+gh|\u092E\u093E\u0918)|(Ph\S+lg|\u092B\u093E\u0932\u094D\u0917\u0941\u0928)/;
      
      var result = regex.exec(element.innerText);
      
      if ( result ) {
        var resultSaka = regexSakaMonth.exec(result[2]);
        
        if ( resultSaka ) {
          var month = 0;
          for ( month = resultSaka.length - 1; month >= 0; month -= 1 ) {
            if ( resultSaka[month] ) {
              var day = parseInt(ConstantsNumber.getDevanagariDigitsToNormal(result[1]));
              
              var year = parseInt(ConstantsNumber.getDevanagariDigitsToNormal(ConstantsDate.getSakaYearPadding(
                  result[3], month, day)));
              
              var result = moment(ConstantsDate.getSakaToGregorian(year, month, day), [ 'YYYY-MM-DD', 'YYYY-M-D' ],
                  true);
              
              if ( !result.isValid() ) {
                return 'Format Error: Cal IN Day Month Year';
              }
              return result.format('YYYY-MM-DD');
              break;
            }
          }
        }
      }
    }
    return 'Format Error: Cal IN Day Month Year';
    
  },
  
  dateDayMonth : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var result = moment(element.innerText, 'DDMM');
      if ( !result.isValid() ) {
        return 'Format Error: Date Day Month';
      }
      return result.format('--MM-DD');
    }
    return 'Format Error: Date Day Month';
    
  },
  
  dateDayMonthDK : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var regex = /^\s*([0-9]{1,2})[^0-9]+(jan|feb|mar|apr|maj|jun|jul|aug|sep|okt|nov|dec)([A-Za-z]*)([.]*)\s*$/i;
      
      var result = regex.exec(element.innerText);
      
      if ( result && result.length === 5 ) {
        
        var month = result[2];
        var day = result[1];
        
        var monthEnd = result[3];
        var monthPer = result[4];
        
        if ( ((!monthEnd && !monthPer) || (!monthEnd && monthPer) || (monthEnd && !monthPer)) && '01' <= day
            && day <= moment(month, 'MMM').daysInMonth() ) {
          var dateResult = moment(day + '-' + month, 'DD-MMM');
          
          if ( !dateResult.isValid() ) {
            return 'Format Error: Date Day Month DK';
          }
          return dateResult.format('--MM-DD');
        }
      }
    }
    return 'Format Error: Date Day Month DK';
  },
  
  dateDayMonthEN : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var regex = /^\s*([0-9]{1,2})[^0-9]+(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)\s*$/;
      var result = regex.exec(element.innerText);
      if ( result ) {
        var month = result[2];
        var day = result[1];
        var dateResult = moment(day + '-' + month, 'DD-MMM');
        
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Day Month EN';
        }
        return dateResult.format('--MM-DD');
      }
    }
    return 'Format Error: Date Day Month EN';
    
  },
  
  dateDayMonthYear : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var regex = /^\s*([0-9]{1,2})[^0-9]+([0-9]{1,2})[^0-9]+([0-9]{4}|[0-9]{1,2})\s*$/;
      
      var result = regex.exec(element.innerText);
      
      if ( result ) {
        
        var dateResult = moment(element.innerText, [
            'DD MM YY',
            'DD.MM.YYYY',
            'DD.MM.Y',
            'DD.MM.YY',
            'D.M.YY',
            'DD/MM/YY' ], true);
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Day Month Year';
        }
        
        if ( dateResult.year().toString().length === 1 ) {
          dateResult.year(2000 + dateResult.year());
        }
        if ( dateResult.year().toString().length === 2 ) {
          dateResult.year(2000 + dateResult.year());
        }
        
        if ( dateResult.year().toString().length === 3 && result[3].length === 3 ) {
          return 'Format Error: Date Day Month Year';
        }
        return dateResult.format('YYYY-MM-DD');
      }
      
    }
    return 'Format Error: Date Day Month Year';
  },
  
  dateDayMonthYearDK : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^\s*([0-9]{1,2})[^0-9]+(jan|feb|mar|apr|maj|jun|jul|aug|sep|okt|nov|dec)([A-Za-z]*)([.]*)[^0-9]*([0-9]{4}|[0-9]{1,2})\s*$/i;
      
      var result = regex.exec(element.innerText);
      
      if ( result ) {
        var year = result[5];
        var day = result[1];
        var month = moment().month(result[2]).format('M');
        
        var monthEnd = result[3];
        var monthPer = result[4];
        
        if ( month && ((!monthEnd && !monthPer) || (!monthEnd && monthPer)) || (monthEnd && !monthPer) ) {
          var dateResult = moment();
          
          var dateResult = moment(day + '-' + month + '-' + year, 'DD-M-YYYY');
          
          if ( !dateResult.isValid() ) {
            return 'Format Error: Date Day Month DK';
          }
          
          if ( dateResult.year().toString().length === 1 ) {
            dateResult.year(2000 + dateResult.year());
          }
          if ( dateResult.year().toString().length === 2 ) {
            dateResult.year(2000 + dateResult.year());
          }
          
          return dateResult.format('YYYY-MM-DD');
        }
      }
    }
    return 'Format Error: Date Day Month Year DK';
  },
  
  dateDayMonthYearEN : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^\s*([0-9]{1,2})[^0-9]+(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)[^0-9]+([0-9]{4}|[0-9]{1,2})\s*$/;
      var result = regex.exec(element.innerText);
      if ( result ) {
        var month = result[2];
        var day = result[1];
        var year = result[3];
        var dateResult = moment(day + '-' + month + '-' + year, 'DD-MMM-Y');
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Day Month Year EN';
        }
        
        if ( dateResult.year().toString().length === 1 ) {
          dateResult.year(2000 + dateResult.year());
        }
        if ( dateResult.year().toString().length === 2 ) {
          dateResult.year(2000 + dateResult.year());
        }
        
        return dateResult.format('YYYY-MM-DD');
      }
    }
    return 'Format Error: Date Day Month Year EN';
  },
  
  dateDayMonthYearIN : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^\s*([0-9\u0966-\u096F]{1,2})\s([\u0966-\u096F]{2}|[^\s0-9\u0966-\u096F]+)\s([0-9\u0966-\u096F]{2}|[0-9\u0966-\u096F]{4})\s*$/;
      var result = regex.exec(element.innerText);
      if ( result ) {
        var year = ConstantsNumber.getDevanagariDigitsToNormal(result[3]);
        
        var month;
        if ( ConstantsDate.getGregorianHindiMonthNumber[ConstantsNumber.getDevanagariDigitsToNormal(result[2])] ) {
          month = ConstantsDate.getGregorianHindiMonthNumber[ConstantsNumber.getDevanagariDigitsToNormal(result[2])];
        } else {
          month = ConstantsNumber.getDevanagariDigitsToNormal(result[2]);
        }
        
        var day = ConstantsNumber.getDevanagariDigitsToNormal(result[1]);
        
        var dateResult = moment(day + '-' + month + '-' + year, 'DD-MM-YYYY');
        
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Day Month Year IN';
        }
        return dateResult.format('YYYY-MM-DD');
      }
    }
    return 'Format Error: Date Day Month Year IN';
    
  },
  
  dateDotEU : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var result = moment(element.innerText, 'DD.MM.Y');
      if ( !result.isValid() ) {
        return 'Format Error: Date Dot EU';
      }
      return result.format('YYYY-MM-DD');
    }
    return 'Format Error: Date Dot EU';
  },
  
  dateDotUS : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var result = moment(element.innerText, 'MM.DD.Y');
      if ( !result.isValid() ) {
        return 'Format Error: Date Dot US';
      }
      return result.format('YYYY-MM-DD');
    }
    return 'Format Error: Date Dot US';
  },
  
  dateEraYearMonthDayJP : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^[\s ]*(\u660E\u6CBB|\u660E|\u5927\u6B63|\u5927|\u662D\u548C|\u662D|\u5E73\u6210|\u5E73|\u4EE4\u548C|\u4EE4)[\s ]*([0-9\uFF10-\uFF19]{1,2}|\u5143)[\s ]*(\u5E74)[\s ]*([0-9\uFF10-\uFF19]{1,2})[\s ]*(\u6708)[\s ]*([0-9\uFF10-\uFF19]{1,2})[\s ]*(\u65E5)[\s]*$/;
      
      var result = regex.exec(FiltersNumber.jpDigitsToNormal(element.innerText));
      
      if ( result ) {
        var year = FiltersDate.eraYear(result[1], result[2]);
        var month = result[4];
        var day = result[6];
        
        var dateResult = moment(day + '-' + month + '-' + year, 'DD-MM-Y');
        
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Era Year Month Day JP';
        }
        return dateResult.format('YYYY-MM-DD');
      }
    }
    return 'Format Error: Date Era Year Month Day JP';
  },
  
  dateEraYearMonthJP : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^[\s ]*(\u660E\u6CBB|\u660E|\u5927\u6B63|\u5927|\u662D\u548C|\u662D|\u5E73\u6210|\u5E73|\u4EE4\u548C|\u4EE4)[\s ]*([0-9\uFF10-\uFF19]{1,2}|\u5143)[\s ]*(\u5E74)[\s ]*([0-9\uFF10-\uFF19]{1,2})[\s ]*(\u6708)[\s ]*$/;
      
      var result = regex.exec(FiltersNumber.jpDigitsToNormal(element.innerText));
      if ( result ) {
        
        var year = FiltersDate.eraYear(result[1], result[2]);
        var month = result[4];
        
        var dateResult = moment(month + '-' + year, 'MM-Y');
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Era Year Month JP';
        }
        return dateResult.format('YYYY-MM');
      }
    }
    return 'Format Error: Date Era Year Month JP';
    
  },
  
  dateLongMonthYear : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var result = moment(element.innerText, [ 'MMMM YY', 'MMMM YYYY' ], true);
      if ( !result.isValid() ) {
        return 'Format Error: Date Long Month Year';
      }
      return result.format('YYYY-MM');
    }
    return 'Format Error: Date Long Month Year';
  },
  
  dateLongUK : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var result = moment(element.innerText, 'DD MMM YY');
      if ( !result.isValid() ) {
        return 'Format Error: Date Long UK';
      }
      return result.format('YYYY-MM-DD');
    }
    return 'Format Error: Date Long UK';
  },
  
  dateLongUS : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var result = moment(element.innerText, 'MMM DD, YY');
      if ( !result.isValid() ) {
        return 'Format Error: Date Long US';
      }
      return result.format('YYYY-MM-DD');
    }
    return 'Format Error: Date Long US';
  },
  
  dateLongYearMonth : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var result = moment(element.innerText, 'YY MMM');
      if ( !result.isValid() ) {
        return 'Format Error: Date Long Year Month';
      }
      return result.format('YYYY-MM');
    }
    return 'Format Error: Date Long Year Month';
    
  },
  
  dateMonthDay : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var result = moment(element.innerText, 'MMDD');
      if ( !result.isValid() ) {
        return 'Format Error: Date Month Day';
      }
      return result.format('--MM-DD');
    }
    return 'Format Error: Date Month Day';
    
  },
  
  dateMonthDayEN : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^\s*(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)[^0-9]+([0-9]{1,2})[A-Za-z]{0,2}\s*$/;
      
      var result = regex.exec(element.innerText);
      
      if ( result ) {
        var month = result[1];
        var day = result[2];
        
        var dateResult = moment(month + '-' + day, 'MMM-DD');
        
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Month Day EN';
        }
        
        return dateResult.format('--MM-DD');
      }
    }
    return 'Format Error: Date Month Day EN';
    
  },
  
  dateMonthDayYear : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^\s*([0-9]{1,2})[^0-9]+([0-9]{1,2})[^0-9]+([0-9]{4}|[0-9]{1,2})\s*$/;
      
      var result = regex.exec(element.innerText);
      
      if ( result ) {
        var year = result[3];
        var month = result[1];
        var day = result[2];
        
        var dateResult = moment(year + '-' + month + '-' + day, [ 'YY-MM-DD', 'YYYY-MM-DD' ]);
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Month Day Year';
        }
        return dateResult.format('YYYY-MM-DD');
      }
    }
    return 'Format Error: Date Month Day Year';
    
  },
  
  dateMonthDayYearEN : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^\s*(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)[^0-9]+([0-9]+)[^0-9]+([0-9]{4}|[0-9]{1,2})\s*$/;
      
      var result = regex.exec(element.innerText);
      
      if ( result ) {
        var year = result[3];
        var month = result[1];
        var day = result[2];
        
        var dateResult = moment(year + '-' + month + '-' + day, [ 'YY-MM-DD', 'YYYY-MMM-DD' ]);
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Month Day Year EN';
        }
        if ( dateResult.year().toString().length === 1 ) {
          dateResult.year(2000 + dateResult.year());
        }
        if ( dateResult.year().toString().length === 2 ) {
          dateResult.year(2000 + dateResult.year());
        }
        return dateResult.format('YYYY-MM-DD');
      }
    }
    return 'Format Error: Date Month Day Year EN';
  },
  
  dateMonthYear : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^[\s\u00A0]*([0-9]{1,2})[^0-9]+([0-9]{4}|[0-9]{1,2})[\s\u00A0]*$/;
      var result = regex.exec(element.innerText);
      
      if ( result ) {
        var year = result[2];
        var month = result[1];
        
        var dateResult = moment(year + '-' + month, [ 'YYYY-MM' ]);
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Month Year';
        }
        if ( dateResult.year().toString().length === 1 ) {
          dateResult.year(2000 + dateResult.year());
        }
        if ( dateResult.year().toString().length === 2 ) {
          dateResult.year(2000 + dateResult.year());
        }
        
        return dateResult.format('YYYY-MM');
      }
    }
    return 'Format Error: Date Month Year';
    
  },
  
  dateMonthYearDK : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^\s*(jan|feb|mar|apr|maj|jun|jul|aug|sep|okt|nov|dec)([A-Za-z]*)([.]*)[^0-9]*([0-9]{4}|[0-9]{1,2})\s*$/i;
      var result = regex.exec(element.innerText);
      
      if ( result ) {
        var year = result[4];
        var month = result[1];
        
        var dateResult = moment(year + '-' + month, [ 'YYYY-MMM', 'YY-MMM', 'Y-MMM' ], true);
        
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Month Year DK';
        }
        if ( dateResult.year().toString().length === 1 ) {
          dateResult.year(2000 + dateResult.year());
        }
        if ( dateResult.year().toString().length === 2 ) {
          dateResult.year(2000 + dateResult.year());
        }
        return dateResult.format('YYYY-MM');
        
      }
    }
    return 'Format Error: Date Month Year DK';
    
  },
  
  dateMonthYearEN : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^\s*(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)[^0-9]+([0-9]{1,2}|[0-9]{4})\s*$/;
      var result = regex.exec(element.innerText);
      
      if ( result ) {
        var year = result[2];
        var month = result[1];
        
        var dateResult = moment(year + '-' + month, [ 'YYYY-MMM' ]);
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Month Year EN';
        }
        if ( dateResult.year().toString().length === 1 ) {
          dateResult.year(2000 + dateResult.year());
        }
        if ( dateResult.year().toString().length === 2 ) {
          dateResult.year(2000 + dateResult.year());
        }
        return dateResult.format('YYYY-MM');
        
      }
    }
    return 'Format Error: Date Month Year EN';
    
  },
  
  dateMonthYearIN : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^\s*([^\s0-9\u0966-\u096F]+)\s([0-9\u0966-\u096F]{4})\s*$/;
      var result = regex.exec(element.innerText);
      if ( result ) {
        if ( result[1] in ConstantsDate.getGregorianHindiMonthNumber ) {
          var year = ConstantsNumber.getDevanagariDigitsToNormal(result[2]);
          var month = ConstantsDate.getGregorianHindiMonthNumber[result[1]];
          var dateResult = moment(month + '-' + year, 'MM-YYYY');
          if ( !dateResult.isValid() ) {
            return 'Format Error: Date Month Year IN';
          }
          return dateResult.format('YYYY-MM');
        }
      }
    }
    return 'Format Error: Date Month Year IN';
  },
  
  dateShortDayMonthUK : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var result = moment(element.innerText, 'DD MM');
      if ( !result.isValid() ) {
        return 'Format Error: Date Short Day Month UK';
      }
      return result.format('--MM-DD');
    }
    return 'Format Error: Date Short Day Month UK';
    
  },
  
  dateShortEU : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      return 'TODO';
    }
    
    return 'Format Error: Date Short EU';
  },
  
  dateShortMonthDayUS : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var result = moment(element.innerText, 'MMM DD');
      if ( !result.isValid() ) {
        return 'Format Error: Date Short Month Day US';
      }
      return result.format('--MM-DD');
    }
    return 'Format Error: Date Short Month Day US';
  },
  
  dateShortMonthYear : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var result = moment(element.innerText, 'MMM YYYY');
      if ( !result.isValid() ) {
        return 'Format Error: Date Short Month Year US';
      }
      return result.format('YYYY-MM');
    }
    return 'Format Error: Date Short Month Year US';
    
  },
  
  dateShortUK : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var result = moment(element.innerText, [ 'DD MMM YY', 'DD MMM YYYY' ]);
      if ( !result.isValid() ) {
        return 'Format Error: Date Short UK';
      }
      return result.format('YYYY-MM-DD');
    }
    return 'Format Error: Date Short UK';
    
  },
  
  dateShortUS : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var result = moment(element.innerText, [ 'MMM DD, YY', 'MMM DD, YYYY' ]);
      if ( !result.isValid() ) {
        return 'Format Error: Date Short US';
      }
      return result.format('YYYY-MM-DD');
    }
    return 'Format Error: Date Short US';
    
  },
  
  dateShortYearMonth : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var result = moment(element.innerText, [ 'YY MMM', 'YYYY MMM' ]);
      if ( !result.isValid() ) {
        return 'Format Error: Date Short Year Month';
      }
      return result.format('YYYY-MM');
    }
    return 'Format Error: Date Short Year Month';
    
  },
  
  dateSlashDayMonthEU : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var result = moment(element.innerText, 'DD/MM');
      if ( !result.isValid() ) {
        return 'Format Error: Date Slash Day Month EU';
      }
      return result.format('--MM-DD');
    }
    return 'Format Error: Date Slash Day Month EU';
  },
  
  dateSlashEU : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var result = moment(element.innerText, [ 'DD/MM/YY', 'DD/MM/YYYY' ]);
      if ( !result.isValid() ) {
        return 'Format Error: Date Slash EU';
      }
      return result.format('YYYY-MM-DD');
    }
    return 'Format Error: Date Slash EU';
    
  },
  
  dateSlashMonthDayUS : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var result = moment(element.innerText, 'MM/DD');
      if ( !result.isValid() ) {
        return 'Format Error: Date Slash Month Day US';
      }
      return result.format('--MM-DD');
    }
    return 'Format Error: Date Slash Month Day US';
  },
  
  dateSlashUS : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var result = moment(element.innerText, [ 'MM/DD/YY', 'MM/DD/YYYY' ]);
      if ( !result.isValid() ) {
        return 'Format Error: Date Slash EU';
      }
      return result.format('YYYY-MM-DD');
    }
    return 'Format Error: Date Slash EU';
    
  },
  
  dateYearMonthCJK : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^[\s\u00A0]*([0-9]{4}|[0-9]{1,2})[\s\u00A0]*\u5E74[\s\u00A0]*([0-9]{1,2})[\s\u00A0]*\u6708\s*$/;
      var result = regex.exec(FiltersNumber.jpDigitsToNormal(element.innerText));
      if ( result ) {
        var month = result[2];
        var year = result[1];
        var dateResult = moment(year + '-' + month, 'YYYY-MM');
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Year Month CJK';
        }
        
        if ( dateResult.year().toString().length === 1 ) {
          dateResult.year(2000 + dateResult.year());
        }
        if ( dateResult.year().toString().length === 2 ) {
          dateResult.year(2000 + dateResult.year());
        }
        
        return dateResult.format('YYYY-MM');
      }
    }
    return 'Format Error: Date Year Month CJK';
    
  },
  
  dateYearMonthDay : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var fromJP = FiltersNumber.jpDigitsToNormal(element.innerText);
      
      var regex = /^[\s\u00A0]*([0-9]{4}|[0-9]{1,2})[^0-9]+([0-9]{1,2})[^0-9]+([0-9]{1,2})[\s\u00A0]*$/;
      
      var result = regex.exec(fromJP);
      
      if ( result ) {
        var year = result[1];
        var month = result[2];
        var day = result[3];
        
        var dateResult = moment(year + '-' + month + '-' + day, [
            'YYYY-MM-DD',
            'YYYY-MM-D',
            'YYYY-M-DD',
            'YY-M-DD',
            'Y-M-DD' ], true);
        
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Year Month Day';
        }
        if ( dateResult.year().toString().length === 1 ) {
          dateResult.year(2000 + dateResult.year());
        }
        if ( dateResult.year().toString().length === 2 ) {
          dateResult.year(2000 + dateResult.year());
        }
        return dateResult.format('YYYY-MM-DD');
      }
    }
    return 'Format Error: Date Year Month Day';
    
  },
  
  dateYearMonthDayCJK : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^[\s\u00A0]*([0-9]{4}|[0-9]{1,2})[\s\u00A0]*\u5E74[\s\u00A0]*([0-9]{1,2})[\s\u00A0]*\u6708[\s\u00A0]*([0-9]{1,2})[\s\u00A0]*\u65E5[\s\u00A0]*$/;
      var result = regex.exec(FiltersNumber.jpDigitsToNormal(element.innerText));
      if ( result ) {
        var year = result[1];
        var month = result[2];
        var day = result[3];
        var dateResult = moment(year + '-' + month + '-' + day, 'YYYY-MM-DD');
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Year Month Day CJK';
        }
        
        if ( dateResult.year().toString().length === 1 ) {
          dateResult.year(2000 + dateResult.year());
        }
        if ( dateResult.year().toString().length === 2 ) {
          dateResult.year(2000 + dateResult.year());
        }
        
        return dateResult.format('YYYY-MM-DD');
      }
    }
    return 'Format Error: Date Year Month Day CJK';
  },
  
  dateYearMonthEN : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^\s*([0-9]{1,2}|[0-9]{4})[^0-9]+(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)\s*$/;
      
      var result = regex.exec(element.innerText);
      if ( result ) {
        var month = result[2];
        var year = result[1];
        var dateResult = moment(month + '-' + year, 'MMM-Y');
        if ( !dateResult.isValid() ) {
          return 'Format Error: Date Year Month EN';
        }
        
        if ( dateResult.year().toString().length === 1 ) {
          dateResult.year(2000 + dateResult.year());
        }
        if ( dateResult.year().toString().length === 2 ) {
          dateResult.year(2000 + dateResult.year());
        }
        
        return dateResult.format('YYYY-MM');
        
      }
    }
    return 'Format Error: Date Year Month EN';
  },
  	  
  // TR4 common functions
  datedaymonth : function( arg, pattern, moTbl, dy=1, mo=2, lastindex=2 ) {
  	if (typeof moTbl === "undefined")
	  	moTbl = ConstantsDate.monthnumber;
    var m = pattern.exec(arg);
    if ( m && ConstantsNumber.lastindex(m) == lastindex && dy in m ) {
	    var _day = ConstantsNumber.zeroPadTwoDigits(m[dy]);
	    var _mo = m[mo].toLowerCase();
	    if ( (!moTbl || _mo in moTbl) && _mo in maxDayInMo && "01" <= _day && _day  <= (maxDayInMo[_mo] || "00")) {
		    _mo = (moTbl) ? moTbl[_mo] : parseInt(_mo);
	        return "--" + ConstantsNumber.zeroPadTwoDigits(_mo) + "-" + _day;
	    }
    }
    return 'Format Error: Date Day Month';
},

  datemonthyear	: function( arg, pattern, moTbl, mo=1, yr=2, lastindex=2 ) {
  	if (typeof moTbl === "undefined")
	  	moTbl = ConstantsDate.monthnumber;
    var m = pattern.exec(arg);
    if ( m && ConstantsNumber.lastindex(m) == lastindex && yr in m && mo in m ) {
    	var _yr = ConstantsDate.getYr4(m[yr]);
	    var _mo = m[mo].toLowerCase();
	    if ( !moTbl || _mo in moTbl ) {
		    _mo = (moTbl) ? moTbl[_mo] : parseInt(_mo);
	        return _yr  + "-" + ConstantsNumber.zeroPadTwoDigits(_mo);
	    }
    }
    return 'Format Error: Month Year';
},

  datedaymonthyear : function( arg, pattern, moTbl, dy=1, mo=2, yr=3, lastindex=3 ) {
  	if (typeof moTbl === "undefined")
	  	moTbl = ConstantsDate.monthnumber;
    var m = pattern.exec(arg);
    if ( m && ConstantsNumber.lastindex(m) == lastindex && yr in m && mo in m && dy in m ) {
    	var _yr = ConstantsDate.getYr4(m[yr]);
        var _day = ConstantsNumber.zeroPadTwoDigits(m[dy]);
	    var _mo = m[mo].toLowerCase();
	    if ( !moTbl || _mo in moTbl ) {
		    _mo = (moTbl) ? moTbl[_mo] : parseInt(_mo);
		    _mo =  ConstantsNumber.zeroPadTwoDigits(_mo);
		    return _yr  + "-" + _mo + "-" + _day;
        }
    }
    return 'Format Error: Day Month Year';
},
   
  // TR4 patterned calls
  datedaymonthbg : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, 
      			/^[ \t\n\r]*([0-9]{1,2})[^0-9]+(ян|фев|мар|апр|май|маи|юни|юли|авг|сеп|окт|ное|дек|ЯН|ФЕВ|МАР|АПР|МАЙ|МАИ|ЮНИ|ЮЛИ|АВГ|СЕП|ОКТ|НОЕ|ДЕК|Ян|Фев|Мар|Апр|Май|Маи|Юни|Юли|Авг|Сеп|Окт|Ное|Дек)[^0-9]{0,6}[ \t\n\r]*$/);
   }
  },

  datedaymonthcs : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, 
      	  	/^[ \t\n\r]*([0-9]{1,2})[^0-9]+(ledna|února|unora|března|brezna|dubna|května|kvetna|června|cervna|července|cervence|srpna|září|zari|října|rijna|listopadu|prosince|led|úno|uno|bře|bre|dub|kvě|kve|čvn|cvn|čvc|cvc|srp|zář|zar|říj|rij|lis|pro|LEDNA|ÚNORA|UNORA|BŘEZNA|BREZNA|DUBNA|KVĚTNA|KVETNA|ČERVNA|CERVNA|ČERVENCE|CERVENCE|SRPNA|ZÁŘÍ|ZARI|ŘÍJNA|RIJNA|LISTOPADU|PROSINCE|LED|ÚNO|UNO|BŘE|BRE|DUB|KVĚ|KVE|ČVN|CVN|ČVC|CVC|SRP|ZÁŘ|ZAR|ŘÍJ|RIJ|LIS|PRO|Ledna|Února|Unora|Března|Brezna|Dubna|Května|Kvetna|Června|Cervna|Července|Cervence|Srpna|Září|Zari|Října|Rijna|Listopadu|Prosince|Led|Úno|Uno|Bře|Bre|Dub|Kvě|Kve|Čvn|Cvn|Čvc|Cvc|Srp|Zář|Zar|Říj|Rij|Lis|Pro)\.?[ \t\n\r]*$/, 
      		ConstantsDate.monthnumbercs);
   }
  },

  datedaymonthde : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jan|jän|jaen|feb|mär|maer|mar|apr|mai|jun|jul|aug|sep|okt|nov|dez|JAN|JÄN|JAEN|FEB|MÄR|MAER|MAR|APR|MAI|JUN|JUL|AUG|SEP|OKT|NOV|DEZ|Jan|Jän|Jaen|Feb|Mär|Maer|Mar|Apr|Mai|Jun|Jul|Aug|Sep|Okt|Nov|Dez)[^0-9]{0,6}[ \t\n\r]*$/);
   }
  },
    
  datedaymonthel : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(ιαν|ίαν|φεβ|μάρ|μαρ|απρ|άπρ|αρίλ|άρίλ|αριλ|άριλ|μαΐ|μαι|μάι|μαϊ|μάϊ|ιούν|ίούν|ίουν|ιουν|ιούλ|ίούλ|ίουλ|ίουλ|ιουλ|αύγ|αυγ|σεπ|οκτ|όκτ|νοέ|νοε|δεκ|ΙΑΝ|ΊΑΝ|IΑΝ|ΦΕΒ|ΜΆΡ|ΜΑΡ|ΑΠΡ|ΆΠΡ|AΠΡ|AΡΙΛ|ΆΡΙΛ|ΑΡΙΛ|ΜΑΪ́|ΜΑΙ|ΜΆΙ|ΜΑΪ|ΜΆΪ|ΙΟΎΝ|ΊΟΎΝ|ΊΟΥΝ|IΟΥΝ|ΙΟΥΝ|IΟΥΝ|ΙΟΎΛ|ΊΟΎΛ|ΊΟΥΛ|IΟΎΛ|ΙΟΥΛ|IΟΥΛ|ΑΎΓ|ΑΥΓ|ΣΕΠ|ΟΚΤ|ΌΚΤ|OΚΤ|ΝΟΈ|ΝΟΕ|ΔΕΚ|Ιαν|Ίαν|Iαν|Φεβ|Μάρ|Μαρ|Απρ|Άπρ|Aπρ|Αρίλ|Άρίλ|Aρίλ|Aριλ|Άριλ|Αριλ|Μαΐ|Μαι|Μάι|Μαϊ|Μάϊ|Ιούν|Ίούν|Ίουν|Iούν|Ιουν|Iουν|Ιούλ|Ίούλ|Ίουλ|Iούλ|Ιουλ|Iουλ|Αύγ|Αυγ|Σεπ|Οκτ|Όκτ|Oκτ|Νοέ|Νοε|Δεκ)[^0-9]{0,8}[ \t\n\r]*$/);
   }
  },

  datedaymonthen : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)[ \t\n\r]*$/);
   }
  },
    
  datemonthdayen : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)[^0-9]+([0-9]{1,2})[A-Za-z]{0,2}[ \t\n\r]*$/, null, dy=2, mo=1);
   }
  },

  datedaymonthel : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(ιαν|ίαν|φεβ|μάρ|μαρ|απρ|άπρ|αρίλ|άρίλ|αριλ|άριλ|μαΐ|μαι|μάι|μαϊ|μάϊ|ιούν|ίούν|ίουν|ιουν|ιούλ|ίούλ|ίουλ|ίουλ|ιουλ|αύγ|αυγ|σεπ|οκτ|όκτ|νοέ|νοε|δεκ|ΙΑΝ|ΊΑΝ|IΑΝ|ΦΕΒ|ΜΆΡ|ΜΑΡ|ΑΠΡ|ΆΠΡ|AΠΡ|AΡΙΛ|ΆΡΙΛ|ΑΡΙΛ|ΜΑΪ́|ΜΑΙ|ΜΆΙ|ΜΑΪ|ΜΆΪ|ΙΟΎΝ|ΊΟΎΝ|ΊΟΥΝ|IΟΥΝ|ΙΟΥΝ|IΟΥΝ|ΙΟΎΛ|ΊΟΎΛ|ΊΟΥΛ|IΟΎΛ|ΙΟΥΛ|IΟΥΛ|ΑΎΓ|ΑΥΓ|ΣΕΠ|ΟΚΤ|ΌΚΤ|OΚΤ|ΝΟΈ|ΝΟΕ|ΔΕΚ|Ιαν|Ίαν|Iαν|Φεβ|Μάρ|Μαρ|Απρ|Άπρ|Aπρ|Αρίλ|Άρίλ|Aρίλ|Aριλ|Άριλ|Αριλ|Μαΐ|Μαι|Μάι|Μαϊ|Μάϊ|Ιούν|Ίούν|Ίουν|Iούν|Ιουν|Iουν|Ιούλ|Ίούλ|Ίουλ|Iούλ|Ιουλ|Iουλ|Αύγ|Αυγ|Σεπ|Οκτ|Όκτ|Oκτ|Νοέ|Νοε|Δεκ)[^0-9]{0,8}[ \t\n\r]*$/);
   }
  },

  datedaymonthes : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic|ENE|FEB|MAR|ABR|MAY|JUN|JUL|AGO|SEP|OCT|NOV|DIC|Ene|Feb|Mar|Abr|May|Jun|Jul|Ago|Sep|Oct|Nov|Dic)[^0-9]{0,7}[ \t\n\r]*$/);
   }
  },

  datedaymonthet : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jaan|veebr|märts|marts|apr|mai|juuni|juuli|aug|sept|okt|nov|dets|JAAN|VEEBR|MÄRTS|MARTS|APR|MAI|JUUNI|JUULI|AUG|SEPT|OKT|NOV|DETS|Jaan|Veebr|Märts|Marts|Apr|Mai|Juuni|Juuli|Aug|Sept|Okt|Nov|Dets)[^0-9]{0,5}[ \t\n\r]*$/);
   }
  },

  datedaymonthfi : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]*[^0-9a-zA-Z]+(tam|hel|maa|huh|tou|kes|hei|elo|syy|lok|mar|jou|TAM|HEL|MAA|HUH|TOU|KES|HEI|ELO|SYY|LOK|MAR|JOU|Tam|Hel|Maa|Huh|Tou|Kes|Hei|Elo|Syy|Lok|Mar|Jou)[^0-9]{0,8}[ \t\n\r]*$/, ConstantsDate.monthnumberfi);
   }
  },

  datedaymonthfr : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(janv|févr|fevr|mars|avr|mai|juin|juil|août|aout|sept|oct|nov|déc|dec|JANV|FÉVR|FEVR|MARS|AVR|MAI|JUIN|JUIL|AOÛT|AOUT|SEPT|OCT|NOV|DÉC|DEC|Janv|Févr|Fevr|Mars|Avr|Mai|Juin|Juil|Août|Aout|Sept|Oct|Nov|Déc|Dec)[^0-9]{0,5}[ \t\n\r]*$/);
   }
  },

  datedaymonthhr : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(sij|velj|ožu|ozu|tra|svi|lip|srp|kol|ruj|lis|stu|pro|SIJ|VELJ|OŽU|OZU|TRA|SVI|LIP|SRP|KOL|RUJ|LIS|STU|PRO|Sij|Velj|Ožu|Ozu|Tra|Svi|Lip|Srp|Kol|Ruj|Lis|Stu|Pro)[^0-9]{0,6}[ \t\n\r]*$/, ConstantsDate.monthnumberhr);
   }
  },

  datemonthdayhu : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*(jan|feb|márc|marc|ápr|apr|máj|maj|jún|jun|júl|jul|aug|szept|okt|nov|dec|JAN|FEB|MÁRC|MARC|ÁPR|APR|MÁJ|MAJ|JÚN|JUN|JÚL|JUL|AUG|SZEPT|OKT|NOV|DEC|Jan|Feb|Márc|Marc|Ápr|Apr|Máj|Maj|Jún|Jun|Júl|Jul|Aug|Szept|Okt|Nov|Dec)[^0-9]{0,7}[^0-9]+([0-9]{1,2})[ \t\n\r]*$/, null, dy=2, mo=1);
   }
  },

  datedaymonthit : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(gen|feb|mar|apr|mag|giu|lug|ago|set|ott|nov|dic|GEN|FEB|MAR|APR|MAG|GIU|LUG|AGO|SET|OTT|NOV|DIC|Gen|Feb|Mar|Apr|Mag|Giu|Lug|Ago|Set|Ott|Nov|Dic)[^0-9]{0,6}[ \t\n\r]*$/);
   }
  },

  datemonthdaylt : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*(sau|vas|kov|bal|geg|bir|lie|rugp|rgp|rugs|rgs|spa|spl|lap|gru|grd|SAU|VAS|KOV|BAL|GEG|BIR|LIE|RUGP|RGP|RUGS|RGS|SPA|SPL|LAP|GRU|GRD|Sau|Vas|Kov|Bal|Geg|Bir|Lie|Rugp|Rgp|Rugs|Rgs|Spa|Spl|Lap|Gru|Grd)[^0-9]{0,6}[^0-9]+([0-9]{1,2})[^0-9]*[ \t\n\r]*$/, ConstantsDate.monthnumberlt, dy=2, mo=1);
   }
  },

  datedaymonthlv : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(janv|febr|marts|apr|maijs|jūn|jun|jūl|jul|aug|sept|okt|nov|dec|JANV|FEBR|MARTS|APR|MAIJS|JŪN|JUN|JŪL|JUL|AUG|SEPT|OKT|NOV|DEC|Janv|Febr|Marts|Apr|Maijs|Jūn|Jun|Jūl|Jul|Aug|Sept|Okt|Nov|Dec)[^0-9]{0,6}[ \t\n\r]*$/);
   }
  },

  datedaymonthnl : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jan|feb|maa|mrt|apr|mei|jun|jul|aug|sep|okt|nov|dec|JAN|FEB|MAA|MRT|APR|MEI|JUN|JUL|AUG|SEP|OKT|NOV|DEC|Jan|Feb|Maa|Mrt|Apr|Mei|Jun|Jul|Aug|Sep|Okt|Nov|Dec)[^0-9]{0,6}[ \t\n\r]*$/);
   }
  },

  datedaymonthno : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jan|feb|mar|apr|mai|jun|jul|aug|sep|okt|nov|des|JAN|FEB|MAR|APR|MAI|JUN|JUL|AUG|SEP|OKT|NOV|DES|Jan|Feb|Mar|Apr|Mai|Jun|Jul|Aug|Sep|Okt|Nov|Des)[^0-9]{0,6}[ \t\n\r]*$/);
   }
  },

  datedaymonthpl : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]*[^0-9a-zA-Z]+(sty|lut|mar|kwi|maj|cze|lip|sie|wrz|paź|paz|lis|gru|STY|LUT|MAR|KWI|MAJ|CZE|LIP|SIE|WRZ|PAŹ|PAZ|LIS|GRU|Sty|Lut|Mar|Kwi|Maj|Cze|Lip|Sie|Wrz|Paź|Paz|Lis|Gru)[^0-9]{0,9}s*$/, ConstantsDate.monthnumberpl);
   }
  },

  datedaymonthpt : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez|JAN|FEV|MAR|ABR|MAI|JUN|JUL|AGO|SET|OUT|NOV|DEZ|Jan|Fev|Mar|Abr|Mai|Jun|Jul|Ago|Set|Out|Nov|Dez)[^0-9]{0,6}[ \t\n\r]*$/);
   }
  },

  datedaymonthroman : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]*[^XVIxvi]((I?(X|V|I)I{0,3})|(i?(x|v|i)i{0,3}))[ \t\n\r]*$/, ConstantsDate.monthnumberroman);
   }
  },

  datedaymonthro : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(ian|feb|mar|apr|mai|iun|iul|aug|sep|oct|noi|nov|dec|IAN|FEB|MAR|APR|MAI|IUN|IUL|AUG|SEP|OCT|NOI|NOV|DEC|Ian|Feb|Mar|Apr|Mai|Iun|Iul|Aug|Sep|Oct|Noi|Nov|Dec)[^0-9]{0,7}[ \t\n\r]*$/);
   }
  },

  datedaymonthsk : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jan|feb|mar|apr|máj|maj|jún|jun|júl|jul|aug|sep|okt|nov|dec|JAN|FEB|MAR|APR|MÁJ|MAJ|JÚN|JUN|JÚL|JUL|AUG|SEP|OKT|NOV|DEC|Jan|Feb|Mar|Apr|Máj|Maj|Jún|Jun|Júl|Jul|Aug|Sep|Okt|Nov|Dec)[^0-9]{0,6}[ \t\n\r]*$/);
   }
  },

  datedaymonthsl : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonth(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec|JAN|FEB|MAR|APR|MAJ|JUN|JUL|AVG|SEP|OKT|NOV|DEC|Jan|Feb|Mar|Apr|Maj|Jun|Jul|Avg|Sep|Okt|Nov|Dec)[^0-9]{0,6}[ \t\n\r]*$/);
   }
  },

  datedaymonthyearTR4 : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, ConstantsNumber.getDevanagariDigitsToNormal(arg), /^[ \t\n\r]*([0-9]{1,2})[^0-9]+([0-9]{1,2})[^0-9]+([0-9]{4}|[0-9]{1,2})[ \t\n\r]*$/, dy=1, mo=2, yr=3);
   }
  },
  
  datedaymonthyearbg : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /[ \t\n\r]*([0-9]{1,2})[^0-9]+(ян|фев|мар|апр|май|маи|юни|юли|авг|сеп|окт|ное|дек|ЯН|ФЕВ|МАР|АПР|МАЙ|МАИ|ЮНИ|ЮЛИ|АВГ|СЕП|ОКТ|НОЕ|ДЕК|Ян|Фев|Мар|Апр|Май|Маи|Юни|Юли|Авг|Сеп|Окт|Ное|Дек)[A-Za-z]*[^0-9]+([0-9]{1,2}|[0-9]{4})[^0-9]*[ \t\n\r]*$/);
   }
  },

  datedaymonthyearcs : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(ledna|února|unora|března|brezna|dubna|května|kvetna|června|cervna|července|cervence|srpna|září|zari|října|rijna|listopadu|prosince|led|úno|uno|bře|bre|dub|kvě|kve|čvn|cvn|čvc|cvc|srp|zář|zar|říj|rij|lis|pro|LEDNA|ÚNORA|UNORA|BŘEZNA|BREZNA|DUBNA|KVĚTNA|KVETNA|ČERVNA|CERVNA|ČERVENCE|CERVENCE|SRPNA|ZÁŘÍ|ZARI|ŘÍJNA|RIJNA|LISTOPADU|PROSINCE|LED|ÚNO|UNO|BŘE|BRE|DUB|KVĚ|KVE|ČVN|CVN|ČVC|CVC|SRP|ZÁŘ|ZAR|ŘÍJ|RIJ|LIS|PRO|Ledna|Února|Unora|Března|Brezna|Dubna|Května|Kvetna|Června|Cervna|Července|Cervence|Srpna|Září|Zari|Října|Rijna|Listopadu|Prosince|Led|Úno|Uno|Bře|Bre|Dub|Kvě|Kve|Čvn|Cvn|Čvc|Cvc|Srp|Zář|Zar|Říj|Rij|Lis|Pro)[^0-9a-zA-Z]+[^0-9]*([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/, ConstantsDate.monthnumbercs);
   }
  },

  datedaymonthyearde : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jan|jän|jaen|feb|mär|maer|mar|apr|mai|jun|jul|aug|sep|okt|nov|dez|JAN|JÄN|JAEN|FEB|MÄR|MAER|MAR|APR|MAI|JUN|JUL|AUG|SEP|OKT|NOV|DEZ|Jan|Jän|Jaen|Feb|Mär|Maer|Mar|Apr|Mai|Jun|Jul|Aug|Sep|Okt|Nov|Dez)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datedaymonthyearel : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(ιαν|ίαν|φεβ|μάρ|μαρ|απρ|άπρ|αρίλ|άρίλ|αριλ|άριλ|μαΐ|μαι|μάι|μαϊ|μάϊ|ιούν|ίούν|ίουν|ιουν|ιούλ|ίούλ|ίουλ|ίουλ|ιουλ|αύγ|αυγ|σεπ|οκτ|όκτ|νοέ|νοε|δεκ|ΙΑΝ|ΊΑΝ|IΑΝ|ΦΕΒ|ΜΆΡ|ΜΑΡ|ΑΠΡ|ΆΠΡ|AΠΡ|AΡΙΛ|ΆΡΙΛ|ΑΡΙΛ|ΜΑΪ́|ΜΑΙ|ΜΆΙ|ΜΑΪ|ΜΆΪ|ΙΟΎΝ|ΊΟΎΝ|ΊΟΥΝ|IΟΎΝ|ΙΟΥΝ|IΟΥΝ|ΙΟΎΛ|ΊΟΎΛ|ΊΟΥΛ|IΟΎΛ|ΙΟΥΛ|IΟΥΛ|ΑΎΓ|ΑΥΓ|ΣΕΠ|ΟΚΤ|ΌΚΤ|OΚΤ|ΝΟΈ|ΝΟΕ|ΔΕΚ|Ιαν|Ίαν|Iαν|Φεβ|Μάρ|Μαρ|Απρ|Άπρ|Aπρ|Αρίλ|Άρίλ|Aρίλ|Aριλ|Άριλ|Αριλ|Μαΐ|Μαι|Μάι|Μαϊ|Μάϊ|Ιούν|Ίούν|Ίουν|Iούν|Ιουν|Iουν|Ιούλ|Ίούλ|Ίουλ|Iούλ|Ιουλ|Iουλ|Αύγ|Αυγ|Σεπ|Οκτ|Όκτ|Oκτ|Νοέ|Νοε|Δεκ)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datedaymonthyearen : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)[^0-9]+([0-9]{4}|[0-9]{1,2})[ \t\n\r]*$/);
   }
  },

  datemonthdayyearen : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)[^0-9]+([0-9]+)[^0-9]+([0-9]{4}|[0-9]{1,2})[ \t\n\r]*$/, null, dy=2, mo=1, yr=3);
   }
  },
    
  datedaymonthyeares : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic|ENE|FEB|MAR|ABR|MAY|JUN|JUL|AGO|SEP|OCT|NOV|DIC|Ene|Feb|Mar|Abr|May|Jun|Jul|Ago|Sep|Oct|Nov|Dic)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datedaymonthyearet : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jaan|veebr|märts|marts|apr|mai|juuni|juuli|aug|sept|okt|nov|dets|JAAN|VEEBR|MÄRTS|MARTS|APR|MAI|JUUNI|JUULI|AUG|SEPT|OKT|NOV|DETS|Jaan|Veebr|Märts|Marts|Apr|Mai|Juuni|Juuli|Aug|Sept|Okt|Nov|Dets)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datedaymonthyearfi : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]*[^0-9a-zA-Z]+(tam|hel|maa|huh|tou|kes|hei|elo|syy|lok|mar|jou|TAM|HEL|MAA|HUH|TOU|KES|HEI|ELO|SYY|LOK|MAR|JOU|Tam|Hel|Maa|Huh|Tou|Kes|Hei|Elo|Syy|Lok|Mar|Jou)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/, ConstantsDate.monthnumberfi);
   }
  },

  datedaymonthyearfr : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(janv|févr|fevr|mars|avr|mai|juin|juil|août|aout|sept|oct|nov|déc|dec|JANV|FÉVR|FEVR|MARS|AVR|MAI|JUIN|JUIL|AOÛT|AOUT|SEPT|OCT|NOV|DÉC|DEC|Janv|Févr|Fevr|Mars|Avr|Mai|Juin|Juil|Août|Aout|Sept|Oct|Nov|Déc|Dec)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datedaymonthyearhr : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(sij|velj|ožu|ozu|tra|svi|lip|srp|kol|ruj|lis|stu|pro|SIJ|VELJ|OŽU|OZU|TRA|SVI|LIP|SRP|KOL|RUJ|LIS|STU|PRO|Sij|Velj|Ožu|Ozu|Tra|Svi|Lip|Srp|Kol|Ruj|Lis|Stu|Pro)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/, ConstantsDate.monthnumberhr);
   }
  },

  dateyearmonthdayhu : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2}|[0-9]{4})[^0-9]+(jan|feb|márc|marc|ápr|apr|máj|maj|jún|jun|júl|jul|aug|szept|okt|nov|dec|JAN|FEB|MÁRC|MARC|ÁPR|APR|MÁJ|MAJ|JÚN|JUN|JÚL|JUL|AUG|SZEPT|OKT|NOV|DEC|Jan|Feb|Márc|Marc|Ápr|Apr|Máj|Maj|Jún|Jun|Júl|Jul|Aug|Szept|Okt|Nov|Dec)[^0-9]+([0-9]{1,2})[ \t\n\r]*$/, null, dy=3, mo=2, yr=1);
   }
  },

  datedaymonthyearinTR4 : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyearin(element.innerText, /^[ \t\n\r]*([0-9]{1,2}|[०-९]{1,2})[^0-9०-९]+(जनवरी|फरवरी|मार्च|अप्रैल|मई|जून|जुलाई|अगस्त|सितंबर|अक्टूबर|नवंबर|दिसंबर)[^0-9०-९]+([0-9]{2}|[0-9]{4}|[०-९]{2}|[०-९]{4})[ \t\n\r]*$/);
   }
  },

  datedaymonthyearit : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(gen|feb|mar|apr|mag|giu|lug|ago|set|ott|nov|dic|GEN|FEB|MAR|APR|MAG|GIU|LUG|AGO|SET|OTT|NOV|DIC|Gen|Feb|Mar|Apr|Mag|Giu|Lug|Ago|Set|Ott|Nov|Dic)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  dateyeardaymonthlv : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2}|[0-9]{4})[^0-9]+([0-9]{1,2})[^0-9]+(janv|febr|marts|apr|maijs|jūn|jun|jūl|jul|aug|sept|okt|nov|dec|JANV|FEBR|MARTS|APR|MAIJS|JŪN|JUN|JŪL|JUL|AUG|SEPT|OKT|NOV|DEC|Janv|Febr|Marts|Apr|Maijs|Jūn|Jun|Jūl|Jul|Aug|Sept|Okt|Nov|Dec)[^0-9]*[ \t\n\r]*$/, null, dy=2, mo=3, yr=1);
   }
  },

  dateyearmonthdaylt : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2}|[0-9]{4})[^0-9]*[^0-9a-zA-Z]+(sau|vas|kov|bal|geg|bir|lie|rugp|rgp|rugs|rgs|spa|spl|lap|gru|grd|SAU|VAS|KOV|BAL|GEG|BIR|LIE|RUGP|RGP|RUGS|RGS|SPA|SPL|LAP|GRU|GRD|Sau|Vas|Kov|Bal|Geg|Bir|Lie|Rugp|Rgp|Rugs|Rgs|Spa|Spl|Lap|Gru|Grd)[^0-9]+([0-9]{1,2})[^0-9]*[ \t\n\r]*$/, ConstantsDate.monthnumberlt, dy=3, mo=2, yr=1);
   }
  },

  datedaymonthyearnl : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jan|feb|maa|mrt|apr|mei|jun|jul|aug|sep|okt|nov|dec|JAN|FEB|MAA|MRT|APR|MEI|JUN|JUL|AUG|SEP|OKT|NOV|DEC|Jan|Feb|Maa|Mrt|Apr|Mei|Jun|Jul|Aug|Sep|Okt|Nov|Dec)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datedaymonthyearno : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jan|feb|mar|apr|mai|jun|jul|aug|sep|okt|nov|des|JAN|FEB|MAR|APR|MAI|JUN|JUL|AUG|SEP|OKT|NOV|DES|Jan|Feb|Mar|Apr|Mai|Jun|Jul|Aug|Sep|Okt|Nov|Des)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datedaymonthyearpl : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]*[^0-9a-zA-Z]+(sty|lut|mar|kwi|maj|cze|lip|sie|wrz|paź|paz|lis|gru|STY|LUT|MAR|KWI|MAJ|CZE|LIP|SIE|WRZ|PAŹ|PAZ|LIS|GRU|Sty|Lut|Mar|Kwi|Maj|Cze|Lip|Sie|Wrz|Paź|Paz|Lis|Gru)[^0-9]+([0-9]{1,2}|[0-9]{4})[^0-9]*[ \t\n\r]*$/, ConstantsDate.monthnumberpl);
   }
  },

  datedaymonthyearpt : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez|JAN|FEV|MAR|ABR|MAI|JUN|JUL|AGO|SET|OUT|NOV|DEZ|Jan|Fev|Mar|Abr|Mai|Jun|Jul|Ago|Set|Out|Nov|Dez)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datedaymonthyearroman : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]*[^XVIxvi]((I?(X|V|I)I{0,3})|(i?(x|v|i)i{0,3}))[^XVIxvi][^0-9]*([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/, ConstantsDate.monthnumberroman, dy=1, mo=2, yr=7, lastindex=7);
   }
  },

  datedaymonthyearro : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(ian|feb|mar|apr|mai|iun|iul|aug|sep|oct|noi|nov|dec|IAN|FEB|MAR|APR|MAI|IUN|IUL|AUG|SEP|OCT|NOI|NOV|DEC|Ian|Feb|Mar|Apr|Mai|Iun|Iul|Aug|Sep|Oct|Noi|Nov|Dec)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datedaymonthyearsk : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jan|feb|mar|apr|máj|maj|jún|jun|júl|jul|aug|sep|okt|nov|dec|JAN|FEB|MAR|APR|MÁJ|MAJ|JÚN|JUN|JÚL|JUL|AUG|SEP|OKT|NOV|DEC|Jan|Feb|Mar|Apr|Máj|Maj|Jún|Jun|Júl|Jul|Aug|Sep|Okt|Nov|Dec)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datedaymonthyearsl : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datedaymonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2})[^0-9]+(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec|JAN|FEB|MAR|APR|MAJ|JUN|JUL|AVG|SEP|OKT|NOV|DEC|Jan|Feb|Mar|Apr|Maj|Jun|Jul|Avg|Sep|Okt|Nov|Dec)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },
   
  datemonthyearbg : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(ян|фев|мар|апр|май|маи|юни|юли|авг|сеп|окт|ное|дек|ЯН|ФЕВ|МАР|АПР|МАЙ|МАИ|ЮНИ|ЮЛИ|АВГ|СЕП|ОКТ|НОЕ|ДЕК|Ян|Фев|Мар|Апр|Май|Маи|Юни|Юли|Авг|Сеп|Окт|Ное|Дек)[^0-9]+([0-9]{1,2}|[0-9]{4})[^0-9]*[ \t\n\r]*$/);
   }
  },

  datemonthyearcs : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(leden|ledna|lednu|únor|unor|února|unora|únoru|unoru|březen|brezen|března|brezna|březnu|breznu|duben|dubna|dubnu|květen|kveten|května|kvetna|květnu|kvetnu|červen|cerven|června|cervna|červnu|cervnu|červenec|cervenec|července|cervence|červenci|cervenci|srpen|srpna|srpnu|září|zari|říjen|rijen|října|rijna|říjnu|rijnu|listopad|listopadu|prosinec|prosince|prosinci|led|úno|uno|bře|bre|dub|kvě|kve|čvn|cvn|čvc|cvc|srp|zář|zar|říj|rij|lis|pro|LEDEN|LEDNA|LEDNU|ÚNOR|UNOR|ÚNORA|UNORA|ÚNORU|UNORU|BŘEZEN|BREZEN|BŘEZNA|BREZNA|BŘEZNU|BREZNU|DUBEN|DUBNA|DUBNU|KVĚTEN|KVETEN|KVĚTNA|KVETNA|KVĚTNU|KVETNU|ČERVEN|CERVEN|ČERVNA|CERVNA|ČERVNU|CERVNU|ČERVENEC|CERVENEC|ČERVENCE|CERVENCE|ČERVENCI|CERVENCI|SRPEN|SRPNA|SRPNU|ZÁŘÍ|ZARI|ŘÍJEN|RIJEN|ŘÍJNA|RIJNA|ŘÍJNU|RIJNU|LISTOPAD|LISTOPADU|PROSINEC|PROSINCE|PROSINCI|LED|ÚNO|UNO|BŘE|BRE|DUB|KVĚ|KVE|ČVN|CVN|ČVC|CVC|SRP|ZÁŘ|ZAR|ŘÍJ|RIJ|LIS|PRO|Leden|Ledna|Lednu|Únor|Unor|Února|Unora|Únoru|Unoru|Březen|Brezen|Března|Brezna|Březnu|Breznu|Duben|Dubna|Dubnu|Květen|Kveten|Května|Kvetna|Květnu|Kvetnu|Červen|Cerven|Června|Cervna|Červnu|Cervnu|Červenec|Cervenec|Července|Cervence|Červenci|Cervenci|Srpen|Srpna|Srpnu|Září|Zari|Říjen|Rijen|Října|Rijna|Říjnu|Rijnu|Listopad|Listopadu|Prosinec|Prosince|Prosinci|Led|Úno|Uno|Bře|Bre|Dub|Kvě|Kve|Čvn|Cvn|Čvc|Cvc|Srp|Zář|Zar|Říj|Rij|Lis|Pro)[^0-9a-zA-Z]+[^0-9]*([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/, ConstantsDate.monthnumbercs);
   }
  },

  datemonthyearde : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(jan|jän|jaen|feb|mär|maer|mar|apr|mai|jun|jul|aug|sep|okt|nov|dez|JAN|JÄN|JAEN|FEB|MÄR|MAER|MAR|APR|MAI|JUN|JUL|AUG|SEP|OKT|NOV|DEZ|Jan|Jän|Jaen|Feb|Mär|Maer|Mar|Apr|Mai|Jun|Jul|Aug|Sep|Okt|Nov|Dez)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datemonthyearel : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(ιαν|ίαν|φεβ|μάρ|μαρ|απρ|άπρ|αρίλ|άρίλ|αριλ|άριλ|μαΐ|μαι|μάι|μαϊ|μάϊ|ιούν|ίούν|ίουν|ιουν|ιούλ|ίούλ|ίουλ|ίουλ|ιουλ|αύγ|αυγ|σεπ|οκτ|όκτ|νοέ|νοε|δεκ|ΙΑΝ|ΊΑΝ|IΑΝ|ΦΕΒ|ΜΆΡ|ΜΑΡ|ΑΠΡ|ΆΠΡ|AΠΡ|AΡΙΛ|ΆΡΙΛ|ΑΡΙΛ|ΜΑΪ́|ΜΑΙ|ΜΆΙ|ΜΑΪ|ΜΆΪ|ΙΟΎΝ|ΊΟΎΝ|ΊΟΥΝ|IΟΎΝ|ΙΟΥΝ|IΟΥΝ|ΙΟΎΛ|ΊΟΎΛ|ΊΟΥΛ|IΟΎΛ|ΙΟΥΛ|IΟΥΛ|ΑΎΓ|ΑΥΓ|ΣΕΠ|ΟΚΤ|ΌΚΤ|OΚΤ|ΝΟΈ|ΝΟΕ|ΔΕΚ|Ιαν|Ίαν|Iαν|Φεβ|Μάρ|Μαρ|Απρ|Άπρ|Aπρ|Αρίλ|Άρίλ|Aρίλ|Aριλ|Άριλ|Αριλ|Μαΐ|Μαι|Μάι|Μαϊ|Μάϊ|Ιούν|Ίούν|Ίουν|Iούν|Ιουν|Iουν|Ιούλ|Ίούλ|Ίουλ|Iούλ|Ιουλ|Iουλ|Αύγ|Αυγ|Σεπ|Οκτ|Όκτ|Oκτ|Νοέ|Νοε|Δεκ)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datemonthyearen : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/, mo=1, yr=2);
   }
  },
    
  datemonthyeares : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic|ENE|FEB|MAR|ABR|MAY|JUN|JUL|AGO|SEP|OCT|NOV|DIC|Ene|Feb|Mar|Abr|May|Jun|Jul|Ago|Sep|Oct|Nov|Dic)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },
    
  dateyearmonthen : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2}|[0-9]{4})[^0-9]+(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)[ \t\n\r]*$/, mo=2, yr=1);
   }
  },

  datemonthyeares : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic|ENE|FEB|MAR|ABR|MAY|JUN|JUL|AGO|SEP|OCT|NOV|DIC|Ene|Feb|Mar|Abr|May|Jun|Jul|Ago|Sep|Oct|Nov|Dic)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datemonthyearet : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(jaan|veebr|märts|marts|apr|mai|juuni|juuli|aug|sept|okt|nov|dets|JAAN|VEEBR|MÄRTS|MARTS|APR|MAI|JUUNI|JUULI|AUG|SEPT|OKT|NOV|DETS|Jaan|Veebr|Märts|Marts|Apr|Mai|Juuni|Juuli|Aug|Sept|Okt|Nov|Dets)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datemonthyearfi : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(tam|hel|maa|huh|tou|kes|hei|elo|syy|lok|mar|jou|TAM|HEL|MAA|HUH|TOU|KES|HEI|ELO|SYY|LOK|MAR|JOU|Tam|Hel|Maa|Huh|Tou|Kes|Hei|Elo|Syy|Lok|Mar|Jou)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/, ConstantsDate.monthnumberfi);
   }
  },

  datemonthyearfr : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(janv|févr|fevr|mars|avr|mai|juin|juil|août|aout|sept|oct|nov|déc|dec|JANV|FÉVR|FEVR|MARS|AVR|MAI|JUIN|JUIL|AOÛT|AOUT|SEPT|OCT|NOV|DÉC|DEC|Janv|Févr|Fevr|Mars|Avr|Mai|Juin|Juil|Août|Aout|Sept|Oct|Nov|Déc|Dec)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datemonthyearhr : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(sij|velj|ožu|ozu|tra|svi|lip|srp|kol|ruj|lis|stu|pro|SIJ|VELJ|OŽU|OZU|TRA|SVI|LIP|SRP|KOL|RUJ|LIS|STU|PRO|Sij|Velj|Ožu|Ozu|Tra|Svi|Lip|Srp|Kol|Ruj|Lis|Stu|Pro)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/, ConstantsDate.monthnumberhr);
   }
  },

  datemonthyearit : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(gen|feb|mar|apr|mag|giu|lug|ago|set|ott|nov|dic|GEN|FEB|MAR|APR|MAG|GIU|LUG|AGO|SET|OTT|NOV|DIC|Gen|Feb|Mar|Apr|Mag|Giu|Lug|Ago|Set|Ott|Nov|Dic)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datemonthyearnl : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(jan|feb|maa|mrt|apr|mei|jun|jul|aug|sep|okt|nov|dec|JAN|FEB|MAA|MRT|APR|MEI|JUN|JUL|AUG|SEP|OKT|NOV|DEC|Jan|Feb|Maa|Mrt|Apr|Mei|Jun|Jul|Aug|Sep|Okt|Nov|Dec)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datemonthyearno : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(jan|feb|mar|apr|mai|jun|jul|aug|sep|okt|nov|des|JAN|FEB|MAR|APR|MAI|JUN|JUL|AUG|SEP|OKT|NOV|DES|Jan|Feb|Mar|Apr|Mai|Jun|Jul|Aug|Sep|Okt|Nov|Des)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datemonthyearpl : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(sty|lut|mar|kwi|maj|cze|lip|sie|wrz|paź|paz|lis|gru|STY|LUT|MAR|KWI|MAJ|CZE|LIP|SIE|WRZ|PAŹ|PAZ|LIS|GRU|Sty|Lut|Mar|Kwi|Maj|Cze|Lip|Sie|Wrz|Paź|Paz|Lis|Gru)[^0-9]+([0-9]{1,2}|[0-9]{4})[^0-9]*[ \t\n\r]*$/, ConstantsDate.monthnumberpl);
   }
  },

  datemonthyearpt : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez|JAN|FEV|MAR|ABR|MAI|JUN|JUL|AGO|SET|OUT|NOV|DEZ|Jan|Fev|Mar|Abr|Mai|Jun|Jul|Ago|Set|Out|Nov|Dez)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datemonthyearroman : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, monthyearRomanPattern, ConstantsDate.monthnumberroman, mo=1, yr=6, lastindex=6);
   }
  },

  datemonthyearro : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(ian|feb|mar|apr|mai|iun|iul|aug|sep|oct|noi|nov|dec|IAN|FEB|MAR|APR|MAI|IUN|IUL|AUG|SEP|OCT|NOI|NOV|DEC|Ian|Feb|Mar|Apr|Mai|Iun|Iul|Aug|Sep|Oct|Noi|Nov|Dec)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datemonthyearsk : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(jan|feb|mar|apr|máj|maj|jún|jun|júl|jul|aug|sep|okt|nov|dec|JAN|FEB|MAR|APR|MÁJ|MAJ|JÚN|JUN|JÚL|JUL|AUG|SEP|OKT|NOV|DEC|Jan|Feb|Mar|Apr|Máj|Maj|Jún|Jun|Júl|Jul|Aug|Sep|Okt|Nov|Dec)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  datemonthyearsl : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec|JAN|FEB|MAR|APR|MAJ|JUN|JUL|AVG|SEP|OKT|NOV|DEC|Jan|Feb|Mar|Apr|Maj|Jun|Jul|Avg|Sep|Okt|Nov|Dec)[^0-9]+([0-9]{1,2}|[0-9]{4})[ \t\n\r]*$/);
   }
  },

  dateyearmonthhu : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2}|[0-9]{4})[^0-9]+(jan|feb|márc|marc|ápr|apr|máj|maj|jún|jun|júl|jul|aug|szept|okt|nov|dec|JAN|FEB|MÁRC|MARC|ÁPR|APR|MÁJ|MAJ|JÚN|JUN|JÚL|JUL|AUG|SZEPT|OKT|NOV|DEC|Jan|Feb|Márc|Marc|Ápr|Apr|Máj|Maj|Jún|Jun|Júl|Jul|Aug|Szept|Okt|Nov|Dec)[^0-9]{0,7}[ \t\n\r]*$/, null, mo=2, yr=1);
   }
  },

  dateyearmonthlt : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2}|[0-9]{4})[^0-9]*[^0-9a-zA-Z]+(sau|vas|kov|bal|geg|bir|lie|rugp|rgp|rugs|rgs|spa|spl|lap|gru|grd|SAU|VAS|KOV|BAL|GEG|BIR|LIE|RUGP|RGP|RUGS|RGS|SPA|SPL|LAP|GRU|GRD|Sau|Vas|Kov|Bal|Geg|Bir|Lie|Rugp|Rgp|Rugs|Rgs|Spa|Spl|Lap|Gru|Grd)[^0-9]*[ \t\n\r]*$/, ConstantsDate.monthnumberlt, mo=2, yr=1);
   }
  },

  dateyearmonthlv : function( element ) {
   if ( element && typeof element === 'object' && element['innerText'] ) {
      return FiltersDate.datemonthyear(element.innerText, /^[ \t\n\r]*([0-9]{1,2}|[0-9]{4})[^0-9]+(janv|febr|marts|apr|maijs|jūn|jun|jūl|jul|aug|sept|okt|nov|dec|JANV|FEBR|MARTS|APR|MAIJS|JŪN|JUN|JŪL|JUL|AUG|SEPT|OKT|NOV|DEC|Janv|Febr|Marts|Apr|Maijs|Jūn|Jun|Jūl|Jul|Aug|Sept|Okt|Nov|Dec)[^0-9]{0,7}[ \t\n\r]*$/, null,  mo=2, yr=1);
   }
  },


 printDurationType : function ( y, m, d, h, negative ){
  // preprocess each value so we don't print P0Y0M0D
  // in this case, we should print P0Y, and leave out the months and days.
  var sign="";
  if (negative){
sign="-"; }
 var empty = true;
  empty = empty && (y === null || y === 0);
  empty = empty && (m === null || m === 0);
  empty = empty && (d === null || d === 0);
  empty = empty && (h === null || h === 0);
  // zero is a special case.
  // don't need to print -P0Y, just print P0Y
  if ( empty ) { 
    sign = ""; 
    var hitFirstZeroYet = false;
    if ( y !== null && y === 0 ) {
      hitFirstZeroYet = true;
    }
    if ( m !== null && m === 0 ) {
      if ( hitFirstZeroYet ) {
        m = null;
      } else {
        hitFirstZeroYet = true;
      }
    }
    if ( d !== null && d === 0 ) {
      if ( hitFirstZeroYet ) {
        d = null;
      } else {
        hitFirstZeroYet = true;
      }
    }
    if ( h !== null && h === 0 && hitFirstZeroYet ) {
      if ( hitFirstZeroYet ) {
        h = null;
      } else {
        hitFirstZeroYet = true;
      }
    }
}
  var output = sign + "P";
  if ( y !== null){
  output += y.toString() + "Y"; }
  if ( m !== null){
  output += m.toString() + "M"; }
  if ( d !== null){
  output += d.toString() + "D"; }
  if ( h !== null){
  output += "T" + h.toString() + "H"; }
  return output;
},

  durYear : function( element ) {

    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var durationObj = ConstantsDate.getDuration(element.innerText);
    
      if ( durationObj.error ) {
        return 'Format Error: Dur Year';
      }
    
      var years = Math.floor(durationObj.value);
      var months = ((durationObj.value - years) * 12);
      var days = ((months - Math.floor(months)) * 30.4375);
if (months === 0){
(months = null); }
if (days === 0){
(days = null); }
var toReturn = FiltersDate.printDurationType(years, months!==null?Math.floor(months):null, days!==null?Math.floor(days):null, null, durationObj.negative);
    return toReturn;
    }
    return 'Format Error: Dur Year';
  }, 
  
  durMonth : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var durationObj = ConstantsDate.getDuration(element.innerText);
      if ( durationObj.error ) {
        return 'Format Error: Dur Month';
      }
      var months = Math.floor(durationObj.value);
      var days = Math.floor((durationObj.value - months) * 30.4375);
if (days === 0) {
(days = null); }
var toReturn = FiltersDate.printDurationType(null, months, days!==null?Math.floor(days):null, null, durationObj.negative);
    return toReturn;
      
    }
    return 'Format Error: Dur Month';
    
  },
  
  durWeek : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var durationObj = ConstantsDate.getDuration(element.innerText);
      if ( durationObj.error ) {
        return 'Format Error: Dur Week';
      }
var days = Math.floor(durationObj.value * 7);
var toReturn = FiltersDate.printDurationType(null, null, Math.floor(days), null, durationObj.negative);
    return toReturn;
     
    }
    return 'Format Error: Dur Month';
    
  },
  
  durDay : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var durationObj = ConstantsDate.getDuration(element.innerText);
      if ( durationObj.error ) {
        return 'Format Error: Dur Day';
      }
      var days;
      var hours;
      if ( durationObj.value ) {
        days = Math.floor(durationObj.value);
        hours = Math.floor((durationObj.value - days) * 24);
      } else {
        days = Math.floor(durationObj.value);
        hours = Math.floor((durationObj.value - days) * 24);
      } 
      
      if ( hours === 0 ) {
        hours = null;
      }
      
      /* if ( hours ) {
        return durationObj.negative ? '-P' + Math.floor(days) + 'D' + Math.floor(hours) + 'H' : 'P' + Math.floor(days)
            + 'D' + Math.floor(hours) + 'H';
      }
      return durationObj.negative ? '-P' + Math.floor(days) + 'D' : 'P' + Math.floor(days) + 'D'; */
      return FiltersDate.printDurationType(null, null, days, hours, durationObj.negative);
    }
    return 'Format Error: Dur Day';
  },
  
  durHour : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      var durationObj = ConstantsDate.getDuration(element.innerText);
      if ( durationObj.error ) {
        return 'Format Error: Dur Hour';
      }
      
      var hours = Math.floor(durationObj.value);
      
      // return durationObj.negative ? '-PT' + Math.floor(hours) + 'H' : 'PT' + Math.floor(hours) + 'H';
return FiltersDate.printDurationType(null, null, null, hours, durationObj.negative);
      
    }
    return 'Format Error: Dur Hour';
  },
  
  durWordsEn : function( element ) {
    if ( element && typeof element === 'object' && element['innerText'] ) {
      
      var regex = /^\s*((((([Oo]ne|[Tt](wo|hree|en|welve|hirteen)|[Ff](our(teen)?|ive|ifteen)|[Ss](ix(teen)?|even(teen)?)|[Ee](ight(een)?|leven)|[Nn]ine(teen)?)([\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\-]|\s+)+[Hh]undred([\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+(and[\s]+)?(([Oo]ne|[Tt](wo|hree|en|welve|hirteen)|[Ff](our(teen)?|ive|ifteen)|[Ss](ix(teen)?|even(teen)?)|[Ee](ight(een)?|leven)|[Nn]ine(teen)?)|([Tt](wenty|hirty)|[Ff](orty|ifty)|[Ss](ixty|eventy)|[Ee]ighty|[Nn]inety)(([\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D-]|\s+)([Oo]ne|[Tt](wo|hree)|[Ff](our|ive)|[Ss](ix|even)|[Ee]ight|[Nn]ine))?))?)|(([Oo]ne|[Tt](wo|hree|en|welve|hirteen)|[Ff](our(teen)?|ive|ifteen)|[Ss](ix(teen)?|even(teen)?)|[Ee](ight(een)?|leven)|[Nn]ine(teen)?)|([Tt](wenty|hirty)|[Ff](orty|ifty)|[Ss](ixty|eventy)|[Ee]ighty|[Nn]inety)(([\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D-]|\s+)([Oo]ne|[Tt](wo|hree)|[Ff](our|ive)|[Ss](ix|even)|[Ee]ight|[Nn]ine))?))|[Zz]ero|[Nn]o|[0-9][0-9]{0,3})[\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+[Yy]ears?(,?[\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+(and[\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+)?|$))?((((([Oo]ne|[Tt](wo|hree|en|welve|hirteen)|[Ff](our(teen)?|ive|ifteen)|[Ss](ix(teen)?|even(teen)?)|[Ee](ight(een)?|leven)|[Nn]ine(teen)?)[\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+[Hh]undred([\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+(and[\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+)?(([Oo]ne|[Tt](wo|hree|en|welve|hirteen)|[Ff](our(teen)?|ive|ifteen)|[Ss](ix(teen)?|even(teen)?)|[Ee](ight(een)?|leven)|[Nn]ine(teen)?)|([Tt](wenty|hirty)|[Ff](orty|ifty)|[Ss](ixty|eventy)|[Ee]ighty|[Nn]inety)(([\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D-]|\s+)([Oo]ne|[Tt](wo|hree)|[Ff](our|ive)|[Ss](ix|even)|[Ee]ight|[Nn]ine))?))?)|(([Oo]ne|[Tt](wo|hree|en|welve|hirteen)|[Ff](our(teen)?|ive|ifteen)|[Ss](ix(teen)?|even(teen)?)|[Ee](ight(een)?|leven)|[Nn]ine(teen)?)|([Tt](wenty|hirty)|[Ff](orty|ifty)|[Ss](ixty|eventy)|[Ee]ighty|[Nn]inety)(([\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D-]|\s+)([Oo]ne|[Tt](wo|hree)|[Ff](our|ive)|[Ss](ix|even)|[Ee]ight|[Nn]ine))?))|[Zz]ero|[Nn]o|[0-9][0-9]{0,3})[\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+[Mm]onths?(,?[\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+(and[\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+)?|$))?((((([Oo]ne|[Tt](wo|hree|en|welve|hirteen)|[Ff](our(teen)?|ive|ifteen)|[Ss](ix(teen)?|even(teen)?)|[Ee](ight(een)?|leven)|[Nn]ine(teen)?)[\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+[Hh]undred([\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+(and[\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+)?(([Oo]ne|[Tt](wo|hree|en|welve|hirteen)|[Ff](our(teen)?|ive|ifteen)|[Ss](ix(teen)?|even(teen)?)|[Ee](ight(een)?|leven)|[Nn]ine(teen)?)|([Tt](wenty|hirty)|[Ff](orty|ifty)|[Ss](ixty|eventy)|[Ee]ighty|[Nn]inety)(([\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D-]|\s+)([Oo]ne|[Tt](wo|hree)|[Ff](our|ive)|[Ss](ix|even)|[Ee]ight|[Nn]ine))?))?)|(([Oo]ne|[Tt](wo|hree|en|welve|hirteen)|[Ff](our(teen)?|ive|ifteen)|[Ss](ix(teen)?|even(teen)?)|[Ee](ight(een)?|leven)|[Nn]ine(teen)?)|([Tt](wenty|hirty)|[Ff](orty|ifty)|[Ss](ixty|eventy)|[Ee]ighty|[Nn]inety)(([\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D-]|\s+)([Oo]ne|[Tt](wo|hree)|[Ff](our|ive)|[Ss](ix|even)|[Ee]ight|[Nn]ine))?))|[Zz]ero|[Nn]o|[0-9][0-9]{0,3})[\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D\s-]+[Dd]ays?)?\s*$/;
      var secondRegex = /^\s*[\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D-]?([Zz]ero|[Nn]o(ne)?)[\u058A\u05BE\u2010\u2011\u2012\u2013\u2014\u2015\uFE58\uFE63\uFF0D-]?\s*$/;
      var thirdRegex = /,|\sand\s/g;
      var result = regex.exec(element.innerText);
      if ( result && element.innerText.trim().length > 0 ) {
        var dur = 'P';
        var grp = [ [ 1 + 1, 'Y' ], [ 62 + 1, 'M' ], [ 122 + 1, 'D' ] ];
        for ( var i = 0; i < grp.length; i++ ) {
          var groupIndex = grp[i][0];
          var groupSuffix = grp[i][1];
          var groupPart = result[groupIndex];
          if ( groupPart && groupPart !== null ) {
            if ( secondRegex.exec(groupPart) === null ) {
              if ( isNaN(groupPart) ) {
                var tmp = groupPart.trim().toLowerCase().replace(thirdRegex, ' ');
                dur += ConstantsNumber.textToNumber(tmp);
              } else {
                dur += groupPart;
              }
              dur += groupSuffix;
            }
          }
        }
        return (dur.length > 1) ? dur : "P0D";
      }
      
    }
    return 'Format Error: Dur Words EN';
  }
};
